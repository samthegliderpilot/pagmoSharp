//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.1.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace pagmo {

public partial class problemPagomWrapper : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal problemPagomWrapper(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(problemPagomWrapper obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(problemPagomWrapper obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~problemPagomWrapper() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          pagmoPINVOKE.delete_problemPagomWrapper(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public problemPagomWrapper() : this(pagmoPINVOKE.new_problemPagomWrapper__SWIG_0(), true) {
  }

  public problemPagomWrapper(problemBase base_) : this(pagmoPINVOKE.new_problemPagomWrapper__SWIG_1(problemBase.getCPtr(base_)), true) {
  }

  public problemPagomWrapper(problemPagomWrapper old) : this(pagmoPINVOKE.new_problemPagomWrapper__SWIG_2(problemPagomWrapper.getCPtr(old)), true) {
    if (pagmoPINVOKE.SWIGPendingException.Pending) throw pagmoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setBaseProblem(problemBase b) {
    pagmoPINVOKE.problemPagomWrapper_setBaseProblem(swigCPtr, problemBase.getCPtr(b));
  }

  public problemBase getBaseProblem() {
    global::System.IntPtr cPtr = pagmoPINVOKE.problemPagomWrapper_getBaseProblem(swigCPtr);
    problemBase ret = (cPtr == global::System.IntPtr.Zero) ? null : new problemBase(cPtr, false);
    return ret;
  }

  public DoubleVector fitness(DoubleVector x) {
    DoubleVector ret = new DoubleVector(pagmoPINVOKE.problemPagomWrapper_fitness(swigCPtr, DoubleVector.getCPtr(x)), true);
    if (pagmoPINVOKE.SWIGPendingException.Pending) throw pagmoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PairOfDoubleVectors get_bounds() {
    PairOfDoubleVectors ret = new PairOfDoubleVectors(pagmoPINVOKE.problemPagomWrapper_get_bounds(swigCPtr), true);
    return ret;
  }

  public bool has_batch_fitness() {
    bool ret = pagmoPINVOKE.problemPagomWrapper_has_batch_fitness(swigCPtr);
    return ret;
  }

  public string get_name() {
    string ret = pagmoPINVOKE.problemPagomWrapper_get_name(swigCPtr);
    return ret;
  }

  public uint get_nobj() {
    uint ret = pagmoPINVOKE.problemPagomWrapper_get_nobj(swigCPtr);
    return ret;
  }

  public uint get_nec() {
    uint ret = pagmoPINVOKE.problemPagomWrapper_get_nec(swigCPtr);
    return ret;
  }

  public uint get_nic() {
    uint ret = pagmoPINVOKE.problemPagomWrapper_get_nic(swigCPtr);
    return ret;
  }

  public uint get_nix() {
    uint ret = pagmoPINVOKE.problemPagomWrapper_get_nix(swigCPtr);
    return ret;
  }

  public thread_safety get_thread_safety() {
    thread_safety ret = (thread_safety)pagmoPINVOKE.problemPagomWrapper_get_thread_safety(swigCPtr);
    return ret;
  }

}

}
