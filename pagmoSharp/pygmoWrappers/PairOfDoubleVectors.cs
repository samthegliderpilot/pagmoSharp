//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.1.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace pagmo {

public class PairOfDoubleVectors : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal PairOfDoubleVectors(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PairOfDoubleVectors obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(PairOfDoubleVectors obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~PairOfDoubleVectors() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          pagmoPINVOKE.delete_PairOfDoubleVectors(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public PairOfDoubleVectors() : this(pagmoPINVOKE.new_PairOfDoubleVectors__SWIG_0(), true) {
  }

  public PairOfDoubleVectors(DoubleVector first, DoubleVector second) : this(pagmoPINVOKE.new_PairOfDoubleVectors__SWIG_1(DoubleVector.getCPtr(first), DoubleVector.getCPtr(second)), true) {
    if (pagmoPINVOKE.SWIGPendingException.Pending) throw pagmoPINVOKE.SWIGPendingException.Retrieve();
  }

  public PairOfDoubleVectors(PairOfDoubleVectors other) : this(pagmoPINVOKE.new_PairOfDoubleVectors__SWIG_2(PairOfDoubleVectors.getCPtr(other)), true) {
    if (pagmoPINVOKE.SWIGPendingException.Pending) throw pagmoPINVOKE.SWIGPendingException.Retrieve();
  }

  public DoubleVector first {
    set {
      pagmoPINVOKE.PairOfDoubleVectors_first_set(swigCPtr, DoubleVector.getCPtr(value));
      if (pagmoPINVOKE.SWIGPendingException.Pending) throw pagmoPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      DoubleVector ret = new DoubleVector(pagmoPINVOKE.PairOfDoubleVectors_first_get(swigCPtr), false);
      if (pagmoPINVOKE.SWIGPendingException.Pending) throw pagmoPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public DoubleVector second {
    set {
      pagmoPINVOKE.PairOfDoubleVectors_second_set(swigCPtr, DoubleVector.getCPtr(value));
      if (pagmoPINVOKE.SWIGPendingException.Pending) throw pagmoPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      DoubleVector ret = new DoubleVector(pagmoPINVOKE.PairOfDoubleVectors_second_get(swigCPtr), false);
      if (pagmoPINVOKE.SWIGPendingException.Pending) throw pagmoPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

}

}
