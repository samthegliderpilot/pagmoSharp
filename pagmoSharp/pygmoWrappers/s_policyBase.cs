//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.1.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace pagmo {

public class s_policyBase : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal s_policyBase(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(s_policyBase obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(s_policyBase obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~s_policyBase() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          pagmoPINVOKE.delete_s_policyBase(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public virtual SWIGTYPE_p_std__tupleT_std__vectorT_unsigned_long_long_t_std__vectorT_std__vectorT_double_t_t_std__vectorT_std__vectorT_double_t_t_t select(SWIGTYPE_p_std__tupleT_std__vectorT_unsigned_long_long_t_std__vectorT_std__vectorT_double_t_t_std__vectorT_std__vectorT_double_t_t_t a, uint arg1, uint arg2, uint arg3, uint arg4, uint arg5, DoubleVector arg6) {
    SWIGTYPE_p_std__tupleT_std__vectorT_unsigned_long_long_t_std__vectorT_std__vectorT_double_t_t_std__vectorT_std__vectorT_double_t_t_t ret = new SWIGTYPE_p_std__tupleT_std__vectorT_unsigned_long_long_t_std__vectorT_std__vectorT_double_t_t_std__vectorT_std__vectorT_double_t_t_t((SwigDerivedClassHasMethod("select", swigMethodTypes0) ? pagmoPINVOKE.s_policyBase_selectSwigExplicits_policyBase(swigCPtr, SWIGTYPE_p_std__tupleT_std__vectorT_unsigned_long_long_t_std__vectorT_std__vectorT_double_t_t_std__vectorT_std__vectorT_double_t_t_t.getCPtr(a), arg1, arg2, arg3, arg4, arg5, DoubleVector.getCPtr(arg6)) : pagmoPINVOKE.s_policyBase_select(swigCPtr, SWIGTYPE_p_std__tupleT_std__vectorT_unsigned_long_long_t_std__vectorT_std__vectorT_double_t_t_std__vectorT_std__vectorT_double_t_t_t.getCPtr(a), arg1, arg2, arg3, arg4, arg5, DoubleVector.getCPtr(arg6))), true);
    if (pagmoPINVOKE.SWIGPendingException.Pending) throw pagmoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual string get_name() {
    string ret = (SwigDerivedClassHasMethod("get_name", swigMethodTypes1) ? pagmoPINVOKE.s_policyBase_get_nameSwigExplicits_policyBase(swigCPtr) : pagmoPINVOKE.s_policyBase_get_name(swigCPtr));
    return ret;
  }

  public virtual string get_extra_info() {
    string ret = (SwigDerivedClassHasMethod("get_extra_info", swigMethodTypes2) ? pagmoPINVOKE.s_policyBase_get_extra_infoSwigExplicits_policyBase(swigCPtr) : pagmoPINVOKE.s_policyBase_get_extra_info(swigCPtr));
    return ret;
  }

  public virtual bool is_valid() {
    bool ret = (SwigDerivedClassHasMethod("is_valid", swigMethodTypes3) ? pagmoPINVOKE.s_policyBase_is_validSwigExplicits_policyBase(swigCPtr) : pagmoPINVOKE.s_policyBase_is_valid(swigCPtr));
    return ret;
  }

  public s_policyBase() : this(pagmoPINVOKE.new_s_policyBase(), true) {
    SwigDirectorConnect();
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("select", swigMethodTypes0))
      swigDelegate0 = new SwigDelegates_policyBase_0(SwigDirectorMethodselect);
    if (SwigDerivedClassHasMethod("get_name", swigMethodTypes1))
      swigDelegate1 = new SwigDelegates_policyBase_1(SwigDirectorMethodget_name);
    if (SwigDerivedClassHasMethod("get_extra_info", swigMethodTypes2))
      swigDelegate2 = new SwigDelegates_policyBase_2(SwigDirectorMethodget_extra_info);
    if (SwigDerivedClassHasMethod("is_valid", swigMethodTypes3))
      swigDelegate3 = new SwigDelegates_policyBase_3(SwigDirectorMethodis_valid);
    pagmoPINVOKE.s_policyBase_director_connect(swigCPtr, swigDelegate0, swigDelegate1, swigDelegate2, swigDelegate3);
  }

  private bool SwigDerivedClassHasMethod(string methodName, global::System.Type[] methodTypes) {
    global::System.Reflection.MethodInfo[] methodInfos = this.GetType().GetMethods(
        global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Instance);
    foreach (global::System.Reflection.MethodInfo methodInfo in methodInfos) {
      if (methodInfo.DeclaringType == null)
        continue;

      if (methodInfo.Name != methodName)
        continue;

      var parameters = methodInfo.GetParameters();
      if (parameters.Length != methodTypes.Length)
        continue;

      bool parametersMatch = true;
      for (var i = 0; i < parameters.Length; i++) {
        if (parameters[i].ParameterType != methodTypes[i]) {
          parametersMatch = false;
          break;
        }
      }

      if (!parametersMatch)
        continue;

      if (methodInfo.IsVirtual && (methodInfo.DeclaringType.IsSubclassOf(typeof(s_policyBase))) &&
        methodInfo.DeclaringType != methodInfo.GetBaseDefinition().DeclaringType) {
        return true;
      }
    }

    return false;
  }

  private global::System.IntPtr SwigDirectorMethodselect(global::System.IntPtr a, uint arg1, uint arg2, uint arg3, uint arg4, uint arg5, global::System.IntPtr arg6) {
    return SWIGTYPE_p_std__tupleT_std__vectorT_unsigned_long_long_t_std__vectorT_std__vectorT_double_t_t_std__vectorT_std__vectorT_double_t_t_t.getCPtr(select(new SWIGTYPE_p_std__tupleT_std__vectorT_unsigned_long_long_t_std__vectorT_std__vectorT_double_t_t_std__vectorT_std__vectorT_double_t_t_t(a, false), arg1, arg2, arg3, arg4, arg5, new DoubleVector(arg6, false))).Handle;
  }

  private string SwigDirectorMethodget_name() {
    return get_name();
  }

  private string SwigDirectorMethodget_extra_info() {
    return get_extra_info();
  }

  private bool SwigDirectorMethodis_valid() {
    return is_valid();
  }

  public delegate global::System.IntPtr SwigDelegates_policyBase_0(global::System.IntPtr a, uint arg1, uint arg2, uint arg3, uint arg4, uint arg5, global::System.IntPtr arg6);
  public delegate string SwigDelegates_policyBase_1();
  public delegate string SwigDelegates_policyBase_2();
  public delegate bool SwigDelegates_policyBase_3();

  private SwigDelegates_policyBase_0 swigDelegate0;
  private SwigDelegates_policyBase_1 swigDelegate1;
  private SwigDelegates_policyBase_2 swigDelegate2;
  private SwigDelegates_policyBase_3 swigDelegate3;

  private static global::System.Type[] swigMethodTypes0 = new global::System.Type[] { typeof(SWIGTYPE_p_std__tupleT_std__vectorT_unsigned_long_long_t_std__vectorT_std__vectorT_double_t_t_std__vectorT_std__vectorT_double_t_t_t), typeof(uint), typeof(uint), typeof(uint), typeof(uint), typeof(uint), typeof(DoubleVector) };
  private static global::System.Type[] swigMethodTypes1 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes2 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes3 = new global::System.Type[] {  };
}

}
