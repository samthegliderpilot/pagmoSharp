//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.1.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace pagmo {

public class s_policyPagmoWrapper : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal s_policyPagmoWrapper(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(s_policyPagmoWrapper obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(s_policyPagmoWrapper obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~s_policyPagmoWrapper() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          pagmoPINVOKE.delete_s_policyPagmoWrapper(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public s_policyPagmoWrapper() : this(pagmoPINVOKE.new_s_policyPagmoWrapper(), true) {
  }

  public void setBasePolicy(s_policyBase b) {
    pagmoPINVOKE.s_policyPagmoWrapper_setBasePolicy(swigCPtr, s_policyBase.getCPtr(b));
  }

  public s_policyBase getBasePolicy() {
    global::System.IntPtr cPtr = pagmoPINVOKE.s_policyPagmoWrapper_getBasePolicy(swigCPtr);
    s_policyBase ret = (cPtr == global::System.IntPtr.Zero) ? null : new s_policyBase(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_std__tupleT_std__vectorT_unsigned_long_long_t_std__vectorT_std__vectorT_double_t_t_std__vectorT_std__vectorT_double_t_t_t select(SWIGTYPE_p_std__tupleT_std__vectorT_unsigned_long_long_t_std__vectorT_std__vectorT_double_t_t_std__vectorT_std__vectorT_double_t_t_t a, uint b, uint c, uint d, uint e, uint f, DoubleVector g) {
    SWIGTYPE_p_std__tupleT_std__vectorT_unsigned_long_long_t_std__vectorT_std__vectorT_double_t_t_std__vectorT_std__vectorT_double_t_t_t ret = new SWIGTYPE_p_std__tupleT_std__vectorT_unsigned_long_long_t_std__vectorT_std__vectorT_double_t_t_std__vectorT_std__vectorT_double_t_t_t(pagmoPINVOKE.s_policyPagmoWrapper_select(swigCPtr, SWIGTYPE_p_std__tupleT_std__vectorT_unsigned_long_long_t_std__vectorT_std__vectorT_double_t_t_std__vectorT_std__vectorT_double_t_t_t.getCPtr(a), b, c, d, e, f, DoubleVector.getCPtr(g)), true);
    if (pagmoPINVOKE.SWIGPendingException.Pending) throw pagmoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string get_name() {
    string ret = pagmoPINVOKE.s_policyPagmoWrapper_get_name(swigCPtr);
    return ret;
  }

  public string get_extra_info() {
    string ret = pagmoPINVOKE.s_policyPagmoWrapper_get_extra_info(swigCPtr);
    return ret;
  }

  public bool is_valid() {
    bool ret = pagmoPINVOKE.s_policyPagmoWrapper_is_valid(swigCPtr);
    return ret;
  }

}

}
