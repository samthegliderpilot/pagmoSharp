//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace pagmo {

public partial class topology : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal topology(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(topology obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~topology() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          pagmoPINVOKE.delete_topology(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public topology() : this(pagmoPINVOKE.new_topology__SWIG_0(), true) {
  }

  public topology(topology arg0) : this(pagmoPINVOKE.new_topology__SWIG_2(topology.getCPtr(arg0)), true) {
    if (pagmoPINVOKE.SWIGPendingException.Pending) throw pagmoPINVOKE.SWIGPendingException.Retrieve();
  }

  public string get_name() {
    string ret = pagmoPINVOKE.topology_get_name(swigCPtr);
    return ret;
  }

  public string get_extra_info() {
    string ret = pagmoPINVOKE.topology_get_extra_info(swigCPtr);
    return ret;
  }

  public bool is_valid() {
    bool ret = pagmoPINVOKE.topology_is_valid(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_std__pairT_std__vectorT_std__size_t_t_std__vectorT_double_t_t get_connections(uint arg0) {
    SWIGTYPE_p_std__pairT_std__vectorT_std__size_t_t_std__vectorT_double_t_t ret = new SWIGTYPE_p_std__pairT_std__vectorT_std__size_t_t_std__vectorT_double_t_t(pagmoPINVOKE.topology_get_connections(swigCPtr, arg0), true);
    return ret;
  }

  public void push_back() {
    pagmoPINVOKE.topology_push_back__SWIG_0(swigCPtr);
  }

  public void push_back(uint arg0) {
    pagmoPINVOKE.topology_push_back__SWIG_1(swigCPtr, arg0);
  }

  public SWIGTYPE_p_std__type_index get_type_index() {
    SWIGTYPE_p_std__type_index ret = new SWIGTYPE_p_std__type_index(pagmoPINVOKE.topology_get_type_index(swigCPtr), true);
    return ret;
  }

  public global::System.IntPtr get_ptr() {
    global::System.IntPtr ret = pagmoPINVOKE.topology_get_ptr__SWIG_0(swigCPtr);
    return ret;
  }

}

}
