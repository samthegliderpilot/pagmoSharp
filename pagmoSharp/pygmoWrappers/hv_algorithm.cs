//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.1.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace pagmo {

public partial class hv_algorithm : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal hv_algorithm(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(hv_algorithm obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(hv_algorithm obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~hv_algorithm() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          pagmoPINVOKE.delete_hv_algorithm(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public static double volume_between(DoubleVector a, DoubleVector b, uint dim_bound) {
    double ret = pagmoPINVOKE.hv_algorithm_volume_between__SWIG_0(DoubleVector.getCPtr(a), DoubleVector.getCPtr(b), dim_bound);
    if (pagmoPINVOKE.SWIGPendingException.Pending) throw pagmoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double volume_between(DoubleVector a, DoubleVector b) {
    double ret = pagmoPINVOKE.hv_algorithm_volume_between__SWIG_1(DoubleVector.getCPtr(a), DoubleVector.getCPtr(b));
    if (pagmoPINVOKE.SWIGPendingException.Pending) throw pagmoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double volume_between(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, uint arg2) {
    double ret = pagmoPINVOKE.hv_algorithm_volume_between__SWIG_2(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), arg2);
    return ret;
  }

  public virtual double compute(VectorDoubleVector points, DoubleVector r_point) {
    double ret = pagmoPINVOKE.hv_algorithm_compute(swigCPtr, VectorDoubleVector.getCPtr(points), DoubleVector.getCPtr(r_point));
    if (pagmoPINVOKE.SWIGPendingException.Pending) throw pagmoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double exclusive(uint p_idx, VectorDoubleVector arg1, DoubleVector arg2) {
    double ret = pagmoPINVOKE.hv_algorithm_exclusive(swigCPtr, p_idx, VectorDoubleVector.getCPtr(arg1), DoubleVector.getCPtr(arg2));
    if (pagmoPINVOKE.SWIGPendingException.Pending) throw pagmoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual ulong least_contributor(VectorDoubleVector arg0, DoubleVector arg1) {
    ulong ret = pagmoPINVOKE.hv_algorithm_least_contributor(swigCPtr, VectorDoubleVector.getCPtr(arg0), DoubleVector.getCPtr(arg1));
    if (pagmoPINVOKE.SWIGPendingException.Pending) throw pagmoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual ulong greatest_contributor(VectorDoubleVector arg0, DoubleVector arg1) {
    ulong ret = pagmoPINVOKE.hv_algorithm_greatest_contributor(swigCPtr, VectorDoubleVector.getCPtr(arg0), DoubleVector.getCPtr(arg1));
    if (pagmoPINVOKE.SWIGPendingException.Pending) throw pagmoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual DoubleVector contributions(VectorDoubleVector arg0, DoubleVector arg1) {
    DoubleVector ret = new DoubleVector(pagmoPINVOKE.hv_algorithm_contributions(swigCPtr, VectorDoubleVector.getCPtr(arg0), DoubleVector.getCPtr(arg1)), true);
    if (pagmoPINVOKE.SWIGPendingException.Pending) throw pagmoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void verify_before_compute(VectorDoubleVector points, DoubleVector r_point) {
    pagmoPINVOKE.hv_algorithm_verify_before_compute(swigCPtr, VectorDoubleVector.getCPtr(points), DoubleVector.getCPtr(r_point));
    if (pagmoPINVOKE.SWIGPendingException.Pending) throw pagmoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual SWIGTYPE_p_std__shared_ptrT_pagmo__hv_algorithm_t clone() {
    SWIGTYPE_p_std__shared_ptrT_pagmo__hv_algorithm_t ret = new SWIGTYPE_p_std__shared_ptrT_pagmo__hv_algorithm_t(pagmoPINVOKE.hv_algorithm_clone(swigCPtr), true);
    return ret;
  }

  public virtual string get_name() {
    string ret = pagmoPINVOKE.hv_algorithm_get_name(swigCPtr);
    return ret;
  }

}

}
