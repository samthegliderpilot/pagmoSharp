//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.1.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace pagmo {

public partial class algorithm : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal algorithm(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(algorithm obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(algorithm obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~algorithm() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          pagmoPINVOKE.delete_algorithm(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public algorithm() : this(pagmoPINVOKE.new_algorithm__SWIG_0(), true) {
  }

  public algorithm(algorithm arg0) : this(pagmoPINVOKE.new_algorithm__SWIG_1(algorithm.getCPtr(arg0)), true) {
    if (pagmoPINVOKE.SWIGPendingException.Pending) throw pagmoPINVOKE.SWIGPendingException.Retrieve();
  }

  public population evolve(population arg0) {
    population ret = new population(pagmoPINVOKE.algorithm_evolve(swigCPtr, population.getCPtr(arg0)), true);
    if (pagmoPINVOKE.SWIGPendingException.Pending) throw pagmoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void set_seed(uint arg0) {
    pagmoPINVOKE.algorithm_set_seed(swigCPtr, arg0);
  }

  public bool has_set_seed() {
    bool ret = pagmoPINVOKE.algorithm_has_set_seed(swigCPtr);
    return ret;
  }

  public bool is_stochastic() {
    bool ret = pagmoPINVOKE.algorithm_is_stochastic(swigCPtr);
    return ret;
  }

  public void set_verbosity(uint arg0) {
    pagmoPINVOKE.algorithm_set_verbosity(swigCPtr, arg0);
  }

  public bool has_set_verbosity() {
    bool ret = pagmoPINVOKE.algorithm_has_set_verbosity(swigCPtr);
    return ret;
  }

  public string get_name() {
    string ret = pagmoPINVOKE.algorithm_get_name(swigCPtr);
    return ret;
  }

  public string get_extra_info() {
    string ret = pagmoPINVOKE.algorithm_get_extra_info(swigCPtr);
    return ret;
  }

  public thread_safety get_thread_safety() {
    thread_safety ret = (thread_safety)pagmoPINVOKE.algorithm_get_thread_safety(swigCPtr);
    return ret;
  }

  public bool is_valid() {
    bool ret = pagmoPINVOKE.algorithm_is_valid(swigCPtr);
    return ret;
  }

  public global::System.IntPtr get_ptr() {
    global::System.IntPtr ret = pagmoPINVOKE.algorithm_get_ptr__SWIG_0(swigCPtr);
    return ret;
  }

}

}
