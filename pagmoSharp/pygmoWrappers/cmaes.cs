//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.1.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace pagmo {

public partial class cmaes : algorithm {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal cmaes(global::System.IntPtr cPtr, bool cMemoryOwn) : base(pagmoPINVOKE.cmaes_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(cmaes obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(cmaes obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          pagmoPINVOKE.delete_cmaes(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public cmaes(uint gen, double cc, double cs, double c1, double cmu, double sigma0, double ftol, double xtol, bool memory, bool force_bounds, uint seed) : this(pagmoPINVOKE.new_cmaes__SWIG_0(gen, cc, cs, c1, cmu, sigma0, ftol, xtol, memory, force_bounds, seed), true) {
  }

  public cmaes(uint gen, double cc, double cs, double c1, double cmu, double sigma0, double ftol, double xtol, bool memory, bool force_bounds) : this(pagmoPINVOKE.new_cmaes__SWIG_1(gen, cc, cs, c1, cmu, sigma0, ftol, xtol, memory, force_bounds), true) {
  }

  public cmaes(uint gen, double cc, double cs, double c1, double cmu, double sigma0, double ftol, double xtol, bool memory) : this(pagmoPINVOKE.new_cmaes__SWIG_2(gen, cc, cs, c1, cmu, sigma0, ftol, xtol, memory), true) {
  }

  public cmaes(uint gen, double cc, double cs, double c1, double cmu, double sigma0, double ftol, double xtol) : this(pagmoPINVOKE.new_cmaes__SWIG_3(gen, cc, cs, c1, cmu, sigma0, ftol, xtol), true) {
  }

  public cmaes(uint gen, double cc, double cs, double c1, double cmu, double sigma0, double ftol) : this(pagmoPINVOKE.new_cmaes__SWIG_4(gen, cc, cs, c1, cmu, sigma0, ftol), true) {
  }

  public cmaes(uint gen, double cc, double cs, double c1, double cmu, double sigma0) : this(pagmoPINVOKE.new_cmaes__SWIG_5(gen, cc, cs, c1, cmu, sigma0), true) {
  }

  public cmaes(uint gen, double cc, double cs, double c1, double cmu) : this(pagmoPINVOKE.new_cmaes__SWIG_6(gen, cc, cs, c1, cmu), true) {
  }

  public cmaes(uint gen, double cc, double cs, double c1) : this(pagmoPINVOKE.new_cmaes__SWIG_7(gen, cc, cs, c1), true) {
  }

  public cmaes(uint gen, double cc, double cs) : this(pagmoPINVOKE.new_cmaes__SWIG_8(gen, cc, cs), true) {
  }

  public cmaes(uint gen, double cc) : this(pagmoPINVOKE.new_cmaes__SWIG_9(gen, cc), true) {
  }

  public cmaes(uint gen) : this(pagmoPINVOKE.new_cmaes__SWIG_10(gen), true) {
  }

  public cmaes() : this(pagmoPINVOKE.new_cmaes__SWIG_11(), true) {
  }

  public population evolve(population arg0) {
    population ret = new population(pagmoPINVOKE.cmaes_evolve(swigCPtr, population.getCPtr(arg0)), true);
    if (pagmoPINVOKE.SWIGPendingException.Pending) throw pagmoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void set_seed(uint arg0) {
    pagmoPINVOKE.cmaes_set_seed(swigCPtr, arg0);
  }

  public uint get_seed() {
    uint ret = pagmoPINVOKE.cmaes_get_seed(swigCPtr);
    return ret;
  }

  public new void set_verbosity(uint level) {
    pagmoPINVOKE.cmaes_set_verbosity(swigCPtr, level);
  }

  public uint get_verbosity() {
    uint ret = pagmoPINVOKE.cmaes_get_verbosity(swigCPtr);
    return ret;
  }

  public uint get_gen() {
    uint ret = pagmoPINVOKE.cmaes_get_gen(swigCPtr);
    return ret;
  }

  public void set_bfe(bfe b) {
    pagmoPINVOKE.cmaes_set_bfe(swigCPtr, bfe.getCPtr(b));
    if (pagmoPINVOKE.SWIGPendingException.Pending) throw pagmoPINVOKE.SWIGPendingException.Retrieve();
  }

  public new string get_name() {
    string ret = pagmoPINVOKE.cmaes_get_name(swigCPtr);
    return ret;
  }

  public new string get_extra_info() {
    string ret = pagmoPINVOKE.cmaes_get_extra_info(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_std__vectorT_std__tupleT_unsigned_int_unsigned_long_long_double_double_double_double_t_t get_log() {
    SWIGTYPE_p_std__vectorT_std__tupleT_unsigned_int_unsigned_long_long_double_double_double_double_t_t ret = new SWIGTYPE_p_std__vectorT_std__tupleT_unsigned_int_unsigned_long_long_double_double_double_double_t_t(pagmoPINVOKE.cmaes_get_log(swigCPtr), false);
    return ret;
  }

}

}
