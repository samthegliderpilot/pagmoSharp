//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.1.0
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace pagmo {

public partial class population : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal population(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(population obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(population obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~population() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          pagmoPINVOKE.delete_population(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public population(problemPagomWrapper x, uint pop_size, uint seed) : this(pagmoPINVOKE.new_population__SWIG_3(problemPagomWrapper.getCPtr(x), pop_size, seed), true) {
    if (pagmoPINVOKE.SWIGPendingException.Pending) throw pagmoPINVOKE.SWIGPendingException.Retrieve();
  }

  public population(problemPagomWrapper x, uint pop_size) : this(pagmoPINVOKE.new_population__SWIG_4(problemPagomWrapper.getCPtr(x), pop_size), true) {
    if (pagmoPINVOKE.SWIGPendingException.Pending) throw pagmoPINVOKE.SWIGPendingException.Retrieve();
  }

  public population(problemPagomWrapper x) : this(pagmoPINVOKE.new_population__SWIG_5(problemPagomWrapper.getCPtr(x)), true) {
    if (pagmoPINVOKE.SWIGPendingException.Pending) throw pagmoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void push_back(DoubleVector arg0) {
    pagmoPINVOKE.population_push_back__SWIG_0(swigCPtr, DoubleVector.getCPtr(arg0));
    if (pagmoPINVOKE.SWIGPendingException.Pending) throw pagmoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void push_back(DoubleVector arg0, DoubleVector arg1) {
    pagmoPINVOKE.population_push_back__SWIG_1(swigCPtr, DoubleVector.getCPtr(arg0), DoubleVector.getCPtr(arg1));
    if (pagmoPINVOKE.SWIGPendingException.Pending) throw pagmoPINVOKE.SWIGPendingException.Retrieve();
  }

  public DoubleVector random_decision_vector() {
    DoubleVector ret = new DoubleVector(pagmoPINVOKE.population_random_decision_vector(swigCPtr), true);
    return ret;
  }

  public uint best_idx() {
    uint ret = pagmoPINVOKE.population_best_idx__SWIG_0(swigCPtr);
    return ret;
  }

  public uint best_idx(DoubleVector arg0) {
    uint ret = pagmoPINVOKE.population_best_idx__SWIG_1(swigCPtr, DoubleVector.getCPtr(arg0));
    if (pagmoPINVOKE.SWIGPendingException.Pending) throw pagmoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint best_idx(double arg0) {
    uint ret = pagmoPINVOKE.population_best_idx__SWIG_2(swigCPtr, arg0);
    return ret;
  }

  public uint worst_idx() {
    uint ret = pagmoPINVOKE.population_worst_idx__SWIG_0(swigCPtr);
    return ret;
  }

  public uint worst_idx(DoubleVector arg0) {
    uint ret = pagmoPINVOKE.population_worst_idx__SWIG_1(swigCPtr, DoubleVector.getCPtr(arg0));
    if (pagmoPINVOKE.SWIGPendingException.Pending) throw pagmoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint worst_idx(double arg0) {
    uint ret = pagmoPINVOKE.population_worst_idx__SWIG_2(swigCPtr, arg0);
    return ret;
  }

  public DoubleVector champion_x() {
    DoubleVector ret = new DoubleVector(pagmoPINVOKE.population_champion_x(swigCPtr), true);
    return ret;
  }

  public DoubleVector champion_f() {
    DoubleVector ret = new DoubleVector(pagmoPINVOKE.population_champion_f(swigCPtr), true);
    return ret;
  }

  public uint size() {
    uint ret = pagmoPINVOKE.population_size(swigCPtr);
    return ret;
  }

  public void set_xf(uint arg0, DoubleVector arg1, DoubleVector arg2) {
    pagmoPINVOKE.population_set_xf(swigCPtr, arg0, DoubleVector.getCPtr(arg1), DoubleVector.getCPtr(arg2));
    if (pagmoPINVOKE.SWIGPendingException.Pending) throw pagmoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void set_x(uint arg0, DoubleVector arg1) {
    pagmoPINVOKE.population_set_x(swigCPtr, arg0, DoubleVector.getCPtr(arg1));
    if (pagmoPINVOKE.SWIGPendingException.Pending) throw pagmoPINVOKE.SWIGPendingException.Retrieve();
  }

  public problemPagomWrapper get_problem() {
    problemPagomWrapper ret = new problemPagomWrapper(pagmoPINVOKE.population_get_problem(swigCPtr), false);
    return ret;
  }

  public VectorDoubleVector get_f() {
    VectorDoubleVector ret = new VectorDoubleVector(pagmoPINVOKE.population_get_f(swigCPtr), false);
    return ret;
  }

  public VectorDoubleVector get_x() {
    VectorDoubleVector ret = new VectorDoubleVector(pagmoPINVOKE.population_get_x(swigCPtr), false);
    return ret;
  }

  public ULongLongVector get_ID() {
    ULongLongVector ret = new ULongLongVector(pagmoPINVOKE.population_get_ID(swigCPtr), false);
    return ret;
  }

  public uint get_seed() {
    uint ret = pagmoPINVOKE.population_get_seed(swigCPtr);
    return ret;
  }

}

}
