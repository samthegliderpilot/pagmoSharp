//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.1.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace pagmo {

public partial class nlopt : algorithm {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal nlopt(global::System.IntPtr cPtr, bool cMemoryOwn) : base(pagmoPINVOKE.nlopt_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(nlopt obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(nlopt obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          pagmoPINVOKE.delete_nlopt(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public nlopt() : this(pagmoPINVOKE.new_nlopt__SWIG_0(), true) {
  }

  public nlopt(string arg0) : this(pagmoPINVOKE.new_nlopt__SWIG_1(arg0), true) {
    if (pagmoPINVOKE.SWIGPendingException.Pending) throw pagmoPINVOKE.SWIGPendingException.Retrieve();
  }

  public nlopt(nlopt arg0) : this(pagmoPINVOKE.new_nlopt__SWIG_2(nlopt.getCPtr(arg0)), true) {
    if (pagmoPINVOKE.SWIGPendingException.Pending) throw pagmoPINVOKE.SWIGPendingException.Retrieve();
  }

  public population evolve(population arg0) {
    population ret = new population(pagmoPINVOKE.nlopt_evolve(swigCPtr, population.getCPtr(arg0)), true);
    if (pagmoPINVOKE.SWIGPendingException.Pending) throw pagmoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public new string get_name() {
    string ret = pagmoPINVOKE.nlopt_get_name(swigCPtr);
    return ret;
  }

  public new void set_verbosity(uint n) {
    pagmoPINVOKE.nlopt_set_verbosity(swigCPtr, n);
  }

  public new string get_extra_info() {
    string ret = pagmoPINVOKE.nlopt_get_extra_info(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_std__vectorT_std__tupleT_unsigned_long_double_size_t_double_bool_t_t get_log() {
    SWIGTYPE_p_std__vectorT_std__tupleT_unsigned_long_double_size_t_double_bool_t_t ret = new SWIGTYPE_p_std__vectorT_std__tupleT_unsigned_long_double_size_t_double_bool_t_t(pagmoPINVOKE.nlopt_get_log(swigCPtr), false);
    return ret;
  }

  public string get_solver_name() {
    string ret = pagmoPINVOKE.nlopt_get_solver_name(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_nlopt_result get_last_opt_result() {
    SWIGTYPE_p_nlopt_result ret = new SWIGTYPE_p_nlopt_result(pagmoPINVOKE.nlopt_get_last_opt_result(swigCPtr), true);
    return ret;
  }

  public double get_stopval() {
    double ret = pagmoPINVOKE.nlopt_get_stopval(swigCPtr);
    return ret;
  }

  public void set_stopval(double arg0) {
    pagmoPINVOKE.nlopt_set_stopval(swigCPtr, arg0);
  }

  public double get_ftol_rel() {
    double ret = pagmoPINVOKE.nlopt_get_ftol_rel(swigCPtr);
    return ret;
  }

  public void set_ftol_rel(double arg0) {
    pagmoPINVOKE.nlopt_set_ftol_rel(swigCPtr, arg0);
  }

  public double get_ftol_abs() {
    double ret = pagmoPINVOKE.nlopt_get_ftol_abs(swigCPtr);
    return ret;
  }

  public void set_ftol_abs(double arg0) {
    pagmoPINVOKE.nlopt_set_ftol_abs(swigCPtr, arg0);
  }

  public double get_xtol_rel() {
    double ret = pagmoPINVOKE.nlopt_get_xtol_rel(swigCPtr);
    return ret;
  }

  public void set_xtol_rel(double arg0) {
    pagmoPINVOKE.nlopt_set_xtol_rel(swigCPtr, arg0);
  }

  public double get_xtol_abs() {
    double ret = pagmoPINVOKE.nlopt_get_xtol_abs(swigCPtr);
    return ret;
  }

  public void set_xtol_abs(double arg0) {
    pagmoPINVOKE.nlopt_set_xtol_abs(swigCPtr, arg0);
  }

  public int get_maxeval() {
    int ret = pagmoPINVOKE.nlopt_get_maxeval(swigCPtr);
    return ret;
  }

  public void set_maxeval(int n) {
    pagmoPINVOKE.nlopt_set_maxeval(swigCPtr, n);
  }

  public int get_maxtime() {
    int ret = pagmoPINVOKE.nlopt_get_maxtime(swigCPtr);
    return ret;
  }

  public void set_maxtime(int n) {
    pagmoPINVOKE.nlopt_set_maxtime(swigCPtr, n);
  }

  public nlopt get_local_optimizer() {
    global::System.IntPtr cPtr = pagmoPINVOKE.nlopt_get_local_optimizer__SWIG_0(swigCPtr);
    nlopt ret = (cPtr == global::System.IntPtr.Zero) ? null : new nlopt(cPtr, false);
    return ret;
  }

  public void unset_local_optimizer() {
    pagmoPINVOKE.nlopt_unset_local_optimizer(swigCPtr);
  }

}

}
