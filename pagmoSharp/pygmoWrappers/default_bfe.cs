//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.1.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace pagmo {

public class default_bfe : bfe {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal default_bfe(global::System.IntPtr cPtr, bool cMemoryOwn) : base(pagmoPINVOKE.default_bfe_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(default_bfe obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(default_bfe obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          pagmoPINVOKE.delete_default_bfe(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public default_bfe() : this(pagmoPINVOKE.new_default_bfe__SWIG_0(), true) {
  }

  public default_bfe(default_bfe arg0) : this(pagmoPINVOKE.new_default_bfe__SWIG_1(default_bfe.getCPtr(arg0)), true) {
    if (pagmoPINVOKE.SWIGPendingException.Pending) throw pagmoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual string get_name() {
    string ret = pagmoPINVOKE.default_bfe_get_name(swigCPtr);
    return ret;
  }

  public DoubleVector Operator(problemPagomWrapper theProblem, DoubleVector values) {
    DoubleVector ret = new DoubleVector(pagmoPINVOKE.default_bfe_Operator(swigCPtr, problemPagomWrapper.getCPtr(theProblem), DoubleVector.getCPtr(values)), true);
    if (pagmoPINVOKE.SWIGPendingException.Pending) throw pagmoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
