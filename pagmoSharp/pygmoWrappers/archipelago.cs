//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace pagmo {

public partial class archipelago : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal archipelago(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(archipelago obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~archipelago() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          pagmoPINVOKE.delete_archipelago(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public archipelago() : this(pagmoPINVOKE.new_archipelago__SWIG_0(), true) {
  }

  public archipelago(archipelago arg0) : this(pagmoPINVOKE.new_archipelago__SWIG_1(archipelago.getCPtr(arg0)), true) {
    if (pagmoPINVOKE.SWIGPendingException.Pending) throw pagmoPINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_std__vectorT_std__unique_ptrT_pagmo__island_t_t__size_type size() {
    SWIGTYPE_p_std__vectorT_std__unique_ptrT_pagmo__island_t_t__size_type ret = new SWIGTYPE_p_std__vectorT_std__unique_ptrT_pagmo__island_t_t__size_type(pagmoPINVOKE.archipelago_size(swigCPtr), true);
    return ret;
  }

  public void evolve(uint n) {
    pagmoPINVOKE.archipelago_evolve__SWIG_0(swigCPtr, n);
  }

  public void evolve() {
    pagmoPINVOKE.archipelago_evolve__SWIG_1(swigCPtr);
  }

  public void wait() {
    pagmoPINVOKE.archipelago_wait(swigCPtr);
  }

  public void wait_check() {
    pagmoPINVOKE.archipelago_wait_check(swigCPtr);
  }

  public SWIGTYPE_p_evolve_status status() {
    SWIGTYPE_p_evolve_status ret = new SWIGTYPE_p_evolve_status(pagmoPINVOKE.archipelago_status(swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_boost__indirect_iteratorT_pagmo__archipelago__container_t__iterator_t begin() {
    SWIGTYPE_p_boost__indirect_iteratorT_pagmo__archipelago__container_t__iterator_t ret = new SWIGTYPE_p_boost__indirect_iteratorT_pagmo__archipelago__container_t__iterator_t(pagmoPINVOKE.archipelago_begin__SWIG_0(swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_boost__indirect_iteratorT_pagmo__archipelago__container_t__iterator_t end() {
    SWIGTYPE_p_boost__indirect_iteratorT_pagmo__archipelago__container_t__iterator_t ret = new SWIGTYPE_p_boost__indirect_iteratorT_pagmo__archipelago__container_t__iterator_t(pagmoPINVOKE.archipelago_end__SWIG_0(swigCPtr), true);
    return ret;
  }

  public VectorDoubleVector get_champions_f() {
    VectorDoubleVector ret = new VectorDoubleVector(pagmoPINVOKE.archipelago_get_champions_f(swigCPtr), true);
    return ret;
  }

  public VectorDoubleVector get_champions_x() {
    VectorDoubleVector ret = new VectorDoubleVector(pagmoPINVOKE.archipelago_get_champions_x(swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_std__vectorT_migration_entry_t_t get_migration_log() {
    SWIGTYPE_p_std__vectorT_migration_entry_t_t ret = new SWIGTYPE_p_std__vectorT_migration_entry_t_t(pagmoPINVOKE.archipelago_get_migration_log(swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_std__vectorT_individuals_group_t_t get_migrants_db() {
    SWIGTYPE_p_std__vectorT_individuals_group_t_t ret = new SWIGTYPE_p_std__vectorT_individuals_group_t_t(pagmoPINVOKE.archipelago_get_migrants_db(swigCPtr), true);
    return ret;
  }

  public void set_migrants_db(SWIGTYPE_p_std__vectorT_individuals_group_t_t arg0) {
    pagmoPINVOKE.archipelago_set_migrants_db(swigCPtr, SWIGTYPE_p_std__vectorT_individuals_group_t_t.getCPtr(arg0));
    if (pagmoPINVOKE.SWIGPendingException.Pending) throw pagmoPINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_topology get_topology() {
    SWIGTYPE_p_topology ret = new SWIGTYPE_p_topology(pagmoPINVOKE.archipelago_get_topology(swigCPtr), true);
    return ret;
  }

  public void set_topology(SWIGTYPE_p_topology arg0) {
    pagmoPINVOKE.archipelago_set_topology(swigCPtr, SWIGTYPE_p_topology.getCPtr(arg0));
    if (pagmoPINVOKE.SWIGPendingException.Pending) throw pagmoPINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_migration_type get_migration_type() {
    SWIGTYPE_p_migration_type ret = new SWIGTYPE_p_migration_type(pagmoPINVOKE.archipelago_get_migration_type(swigCPtr), true);
    return ret;
  }

  public void set_migration_type(SWIGTYPE_p_migration_type arg0) {
    pagmoPINVOKE.archipelago_set_migration_type(swigCPtr, SWIGTYPE_p_migration_type.getCPtr(arg0));
    if (pagmoPINVOKE.SWIGPendingException.Pending) throw pagmoPINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_migrant_handling get_migrant_handling() {
    SWIGTYPE_p_migrant_handling ret = new SWIGTYPE_p_migrant_handling(pagmoPINVOKE.archipelago_get_migrant_handling(swigCPtr), true);
    return ret;
  }

  public void set_migrant_handling(SWIGTYPE_p_migrant_handling arg0) {
    pagmoPINVOKE.archipelago_set_migrant_handling(swigCPtr, SWIGTYPE_p_migrant_handling.getCPtr(arg0));
    if (pagmoPINVOKE.SWIGPendingException.Pending) throw pagmoPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
