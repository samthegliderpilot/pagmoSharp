//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.1.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace pagmo {

public class Fnds_Return_Type : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Fnds_Return_Type(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Fnds_Return_Type obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(Fnds_Return_Type obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~Fnds_Return_Type() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          pagmoPINVOKE.delete_Fnds_Return_Type(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public VectorOfVectorIndexes Item1 {
    set {
      pagmoPINVOKE.Fnds_Return_Type_Item1_set(swigCPtr, VectorOfVectorIndexes.getCPtr(value));
      if (pagmoPINVOKE.SWIGPendingException.Pending) throw pagmoPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      VectorOfVectorIndexes ret = new VectorOfVectorIndexes(pagmoPINVOKE.Fnds_Return_Type_Item1_get(swigCPtr), false);
      if (pagmoPINVOKE.SWIGPendingException.Pending) throw pagmoPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public VectorOfVectorIndexes Item2 {
    set {
      pagmoPINVOKE.Fnds_Return_Type_Item2_set(swigCPtr, VectorOfVectorIndexes.getCPtr(value));
      if (pagmoPINVOKE.SWIGPendingException.Pending) throw pagmoPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      VectorOfVectorIndexes ret = new VectorOfVectorIndexes(pagmoPINVOKE.Fnds_Return_Type_Item2_get(swigCPtr), false);
      if (pagmoPINVOKE.SWIGPendingException.Pending) throw pagmoPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public ULongLongVector Item3 {
    set {
      pagmoPINVOKE.Fnds_Return_Type_Item3_set(swigCPtr, ULongLongVector.getCPtr(value));
      if (pagmoPINVOKE.SWIGPendingException.Pending) throw pagmoPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      ULongLongVector ret = new ULongLongVector(pagmoPINVOKE.Fnds_Return_Type_Item3_get(swigCPtr), false);
      if (pagmoPINVOKE.SWIGPendingException.Pending) throw pagmoPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public ULongLongVector Item4 {
    set {
      pagmoPINVOKE.Fnds_Return_Type_Item4_set(swigCPtr, ULongLongVector.getCPtr(value));
      if (pagmoPINVOKE.SWIGPendingException.Pending) throw pagmoPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      ULongLongVector ret = new ULongLongVector(pagmoPINVOKE.Fnds_Return_Type_Item4_get(swigCPtr), false);
      if (pagmoPINVOKE.SWIGPendingException.Pending) throw pagmoPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public Fnds_Return_Type(SWIGTYPE_p_std__tupleT_std__vectorT_std__vectorT_size_t_t_t_std__vectorT_std__vectorT_size_t_t_t_std__vectorT_size_t_t_std__vectorT_size_t_t_t theTuple) : this(pagmoPINVOKE.new_Fnds_Return_Type(SWIGTYPE_p_std__tupleT_std__vectorT_std__vectorT_size_t_t_t_std__vectorT_std__vectorT_size_t_t_t_std__vectorT_size_t_t_std__vectorT_size_t_t_t.getCPtr(theTuple)), true) {
    if (pagmoPINVOKE.SWIGPendingException.Pending) throw pagmoPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
