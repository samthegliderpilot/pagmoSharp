/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_pagmo_WRAP_H_
#define SWIG_pagmo_WRAP_H_

class SwigDirector_problemBase : public pagmoWrap::problemBase, public Swig::Director {

public:
    SwigDirector_problemBase();
    virtual ~SwigDirector_problemBase();
    virtual pagmoWrap::vector_double fitness(pagmoWrap::vector_double const &arg0) const;
    virtual std::pair< pagmoWrap::vector_double,pagmoWrap::vector_double > get_bounds() const;
    virtual bool has_batch_fitness() const;
    virtual std::string get_name() const;
    virtual std::vector< double >::size_type get_nobj() const;
    virtual std::vector< double >::size_type get_nec() const;
    virtual std::vector< double >::size_type get_nic() const;
    virtual std::vector< double >::size_type get_nix() const;
    virtual pagmo::thread_safety get_thread_safety() const;
    virtual bool has_gradient() const;
    virtual pagmoWrap::vector_double gradient(pagmoWrap::vector_double const &arg0) const;
    virtual bool has_gradient_sparsity() const;
    virtual pagmo::sparsity_pattern gradient_sparsity() const;

    typedef void * (SWIGSTDCALL* SWIG_Callback0_t)(void *);
    typedef void * (SWIGSTDCALL* SWIG_Callback1_t)();
    typedef unsigned int (SWIGSTDCALL* SWIG_Callback2_t)();
    typedef const char * (SWIGSTDCALL* SWIG_Callback3_t)();
    typedef unsigned long (SWIGSTDCALL* SWIG_Callback4_t)();
    typedef unsigned long (SWIGSTDCALL* SWIG_Callback5_t)();
    typedef unsigned long (SWIGSTDCALL* SWIG_Callback6_t)();
    typedef unsigned long (SWIGSTDCALL* SWIG_Callback7_t)();
    typedef int (SWIGSTDCALL* SWIG_Callback8_t)();
    typedef unsigned int (SWIGSTDCALL* SWIG_Callback9_t)();
    typedef void * (SWIGSTDCALL* SWIG_Callback10_t)(void *);
    typedef unsigned int (SWIGSTDCALL* SWIG_Callback11_t)();
    typedef void * (SWIGSTDCALL* SWIG_Callback12_t)();
    void swig_connect_director(SWIG_Callback0_t callbackfitness, SWIG_Callback1_t callbackget_bounds, SWIG_Callback2_t callbackhas_batch_fitness, SWIG_Callback3_t callbackget_name, SWIG_Callback4_t callbackget_nobj, SWIG_Callback5_t callbackget_nec, SWIG_Callback6_t callbackget_nic, SWIG_Callback7_t callbackget_nix, SWIG_Callback8_t callbackget_thread_safety, SWIG_Callback9_t callbackhas_gradient, SWIG_Callback10_t callbackgradient, SWIG_Callback11_t callbackhas_gradient_sparsity, SWIG_Callback12_t callbackgradient_sparsity);

private:
    SWIG_Callback0_t swig_callbackfitness;
    SWIG_Callback1_t swig_callbackget_bounds;
    SWIG_Callback2_t swig_callbackhas_batch_fitness;
    SWIG_Callback3_t swig_callbackget_name;
    SWIG_Callback4_t swig_callbackget_nobj;
    SWIG_Callback5_t swig_callbackget_nec;
    SWIG_Callback6_t swig_callbackget_nic;
    SWIG_Callback7_t swig_callbackget_nix;
    SWIG_Callback8_t swig_callbackget_thread_safety;
    SWIG_Callback9_t swig_callbackhas_gradient;
    SWIG_Callback10_t swig_callbackgradient;
    SWIG_Callback11_t swig_callbackhas_gradient_sparsity;
    SWIG_Callback12_t swig_callbackgradient_sparsity;
    void swig_init_callbacks();
};

class SwigDirector_r_policyBase : public pagmoWrap::r_policyBase, public Swig::Director {

public:
    SwigDirector_r_policyBase();
    virtual ~SwigDirector_r_policyBase();
    virtual pagmo::individuals_group_t replace(pagmo::individuals_group_t const &a,pagmo::vector_double::size_type const &b,pagmo::vector_double::size_type const &c,pagmo::vector_double::size_type const &d,pagmo::vector_double::size_type const &e,pagmo::vector_double::size_type const &f,pagmo::vector_double const &g,pagmo::individuals_group_t const &h) const;
    virtual std::string get_name() const;
    virtual std::string get_extra_info() const;
    virtual bool is_valid() const;

    typedef void * (SWIGSTDCALL* SWIG_Callback0_t)(void *, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, void *, void *);
    typedef const char * (SWIGSTDCALL* SWIG_Callback1_t)();
    typedef const char * (SWIGSTDCALL* SWIG_Callback2_t)();
    typedef unsigned int (SWIGSTDCALL* SWIG_Callback3_t)();
    void swig_connect_director(SWIG_Callback0_t callbackreplace, SWIG_Callback1_t callbackget_name, SWIG_Callback2_t callbackget_extra_info, SWIG_Callback3_t callbackis_valid);

private:
    SWIG_Callback0_t swig_callbackreplace;
    SWIG_Callback1_t swig_callbackget_name;
    SWIG_Callback2_t swig_callbackget_extra_info;
    SWIG_Callback3_t swig_callbackis_valid;
    void swig_init_callbacks();
};

class SwigDirector_s_policyBase : public pagmoWrap::s_policyBase, public Swig::Director {

public:
    SwigDirector_s_policyBase();
    virtual ~SwigDirector_s_policyBase();
    virtual pagmo::individuals_group_t select(pagmo::individuals_group_t const &a,pagmo::vector_double::size_type const &arg1,pagmo::vector_double::size_type const &arg2,pagmo::vector_double::size_type const &arg3,pagmo::vector_double::size_type const &arg4,pagmo::vector_double::size_type const &arg5,pagmo::vector_double const &arg6) const;
    virtual std::string get_name() const;
    virtual std::string get_extra_info() const;
    virtual bool is_valid() const;

    typedef void * (SWIGSTDCALL* SWIG_Callback0_t)(void *, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, void *);
    typedef const char * (SWIGSTDCALL* SWIG_Callback1_t)();
    typedef const char * (SWIGSTDCALL* SWIG_Callback2_t)();
    typedef unsigned int (SWIGSTDCALL* SWIG_Callback3_t)();
    void swig_connect_director(SWIG_Callback0_t callbackselect, SWIG_Callback1_t callbackget_name, SWIG_Callback2_t callbackget_extra_info, SWIG_Callback3_t callbackis_valid);

private:
    SWIG_Callback0_t swig_callbackselect;
    SWIG_Callback1_t swig_callbackget_name;
    SWIG_Callback2_t swig_callbackget_extra_info;
    SWIG_Callback3_t swig_callbackis_valid;
    void swig_init_callbacks();
};


#endif
