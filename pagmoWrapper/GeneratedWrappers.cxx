/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


#define SWIG_VERSION 0x040101
#define SWIGCSHARP
#define SWIG_DIRECTORS

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_pagmo(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_pagmo(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_pagmo(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) do { if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } } while (0)

/* SWIG Errors applicable to all language modules, values are reserved from -1 to -99 */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13


/* -----------------------------------------------------------------------------
 * director_common.swg
 *
 * This file contains support for director classes which is common between
 * languages.
 * ----------------------------------------------------------------------------- */

/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be useful for multi-modules projects.
*/
#ifdef SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define Swig
#endif
/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that C# proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#if defined(DEBUG_DIRECTOR_OWNED)
#include <iostream>
#endif
#include <string>
#include <exception>

namespace Swig {
  /* Director base class - not currently used in C# directors */
  class Director {
  };

  /* Base class for director exceptions */
  class DirectorException : public std::exception {
  protected:
    std::string swig_msg;

  public:
    DirectorException(const char *msg) : swig_msg(msg) {
    }

    DirectorException(const std::string &msg) : swig_msg(msg) {
    }

    virtual ~DirectorException() throw() {
    }

    const char *what() const throw() {
      return swig_msg.c_str();
    }
  };

  /* Pure virtual method exception */
  class DirectorPureVirtualException : public DirectorException {
  public:
    DirectorPureVirtualException(const char *msg) : DirectorException(std::string("Attempt to invoke pure virtual method ") + msg) {
    }

    static void raise(const char *msg) {
      throw DirectorPureVirtualException(msg);
    }
  };
}


#ifdef __cplusplus
#include <utility>
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigSmartPointer {
    T *ptr;
    SwigSmartPointer(T *p) : ptr(p) { }
    ~SwigSmartPointer() { delete ptr; }
    SwigSmartPointer& operator=(SwigSmartPointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
    void reset(T *p) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = p; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigSmartPointer tmp(new T(t)); pointer = tmp; return *this; }
#if __cplusplus >=201103L
  SwigValueWrapper& operator=(T&& t) { SwigSmartPointer tmp(new T(std::move(t))); pointer = tmp; return *this; }
  operator T&&() const { return std::move(*pointer.ptr); }
#else
  operator T&() const { return *pointer.ptr; }
#endif
  T *operator&() const { return pointer.ptr; }
  static void reset(SwigValueWrapper& t, T *p) { t.pointer.reset(p); }
};

/*
 * SwigValueInit() is a generic initialisation solution as the following approach:
 * 
 *       T c_result = T();
 * 
 * doesn't compile for all types for example:
 * 
 *       unsigned int c_result = unsigned int();
 */
template <typename T> T SwigValueInit() {
  return T();
}

#if __cplusplus >=201103L
# define SWIG_STD_MOVE(OBJ) std::move(OBJ)
#else
# define SWIG_STD_MOVE(OBJ) OBJ
#endif

#endif


	#include "pagmo/algorithm.hpp"
	#include "pagmo/archipelago.hpp"	
	#include "pagmo/bfe.hpp"
	#include "pagmo/exceptions.hpp"
	#include "pagmo/island.hpp"
	#include "pagmo/population.hpp"	
	#include "pagmo/problem.hpp"
	#include "pagmo/rng.hpp"
	#include "pagmo/s11n.hpp"	// has to do with serialization of varidec templates, which swig doesn't support and I don't think is needed for this library
	#include "pagmo/threading.hpp" 
	#include "pagmo/topology.hpp"
	#include "pagmo/type_traits.hpp"
	#include "pagmo/types.hpp"
	    
	#include "problem.h" // this is a manually created item.  We want to include it in the wrappers so the generated cxx code can use the handwritten code for the problem
	#include "r_policy.h"
	#include "s_policy.h"


#include <string>


#include <typeinfo>
#include <stdexcept>


#include <vector>
#include <algorithm>
#include <stdexcept>


SWIGINTERN void SWIG_CSharpException(int code, const char *msg) {
  if (code == SWIG_ValueError) {
    SWIG_CSharpExceptionArgumentCodes exception_code = SWIG_CSharpArgumentOutOfRangeException;
    SWIG_CSharpSetPendingExceptionArgument(exception_code, msg, 0);
  } else {
    SWIG_CSharpExceptionCodes exception_code = SWIG_CSharpApplicationException;
    switch(code) {
    case SWIG_MemoryError:
      exception_code = SWIG_CSharpOutOfMemoryException;
      break;
    case SWIG_IndexError:
      exception_code = SWIG_CSharpIndexOutOfRangeException;
      break;
    case SWIG_DivisionByZero:
      exception_code = SWIG_CSharpDivideByZeroException;
      break;
    case SWIG_IOError:
      exception_code = SWIG_CSharpIOException;
      break;
    case SWIG_OverflowError:
      exception_code = SWIG_CSharpOverflowException;
      break;
    case SWIG_RuntimeError:
    case SWIG_TypeError:
    case SWIG_SyntaxError:
    case SWIG_SystemError:
    case SWIG_UnknownError:
    default:
      exception_code = SWIG_CSharpApplicationException;
      break;
    }
    SWIG_CSharpSetPendingException(exception_code, msg);
  }
}


#include <typeinfo>
#include <stdexcept>


#include <utility>

SWIGINTERN std::vector< double > *new_std_vector_Sl_double_Sg___SWIG_2(int capacity){
        std::vector< double >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< double >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN double std_vector_Sl_double_Sg__getitemcopy(std::vector< double > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< double >::value_type const &std_vector_Sl_double_Sg__getitem(std::vector< double > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_double_Sg__setitem(std::vector< double > *self,int index,double const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_double_Sg__AddRange(std::vector< double > *self,std::vector< double > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< double > *std_vector_Sl_double_Sg__GetRange(std::vector< double > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< double >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_double_Sg__Insert(std::vector< double > *self,int index,double const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_double_Sg__InsertRange(std::vector< double > *self,int index,std::vector< double > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_double_Sg__RemoveAt(std::vector< double > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_double_Sg__RemoveRange(std::vector< double > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< double > *std_vector_Sl_double_Sg__Repeat(double const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< double >(count, value);
      }
SWIGINTERN void std_vector_Sl_double_Sg__Reverse__SWIG_0(std::vector< double > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_double_Sg__Reverse__SWIG_1(std::vector< double > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_double_Sg__SetRange(std::vector< double > *self,int index,std::vector< double > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_double_Sg__Contains(std::vector< double > *self,double const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_double_Sg__IndexOf(std::vector< double > *self,double const &value){
        int index = -1;
        std::vector< double >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_double_Sg__LastIndexOf(std::vector< double > *self,double const &value){
        int index = -1;
        std::vector< double >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_double_Sg__Remove(std::vector< double > *self,double const &value){
        std::vector< double >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
          return true;
        }
        return false;
      }
SWIGINTERN std::vector< unsigned long long > *new_std_vector_Sl_unsigned_SS_long_SS_long_Sg___SWIG_2(int capacity){
        std::vector< unsigned long long >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< unsigned long long >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN unsigned long long std_vector_Sl_unsigned_SS_long_SS_long_Sg__getitemcopy(std::vector< unsigned long long > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< unsigned long long >::value_type const &std_vector_Sl_unsigned_SS_long_SS_long_Sg__getitem(std::vector< unsigned long long > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_unsigned_SS_long_SS_long_Sg__setitem(std::vector< unsigned long long > *self,int index,unsigned long long const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_unsigned_SS_long_SS_long_Sg__AddRange(std::vector< unsigned long long > *self,std::vector< unsigned long long > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< unsigned long long > *std_vector_Sl_unsigned_SS_long_SS_long_Sg__GetRange(std::vector< unsigned long long > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< unsigned long long >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_unsigned_SS_long_SS_long_Sg__Insert(std::vector< unsigned long long > *self,int index,unsigned long long const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_unsigned_SS_long_SS_long_Sg__InsertRange(std::vector< unsigned long long > *self,int index,std::vector< unsigned long long > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_unsigned_SS_long_SS_long_Sg__RemoveAt(std::vector< unsigned long long > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_unsigned_SS_long_SS_long_Sg__RemoveRange(std::vector< unsigned long long > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< unsigned long long > *std_vector_Sl_unsigned_SS_long_SS_long_Sg__Repeat(unsigned long long const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< unsigned long long >(count, value);
      }
SWIGINTERN void std_vector_Sl_unsigned_SS_long_SS_long_Sg__Reverse__SWIG_0(std::vector< unsigned long long > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_unsigned_SS_long_SS_long_Sg__Reverse__SWIG_1(std::vector< unsigned long long > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_unsigned_SS_long_SS_long_Sg__SetRange(std::vector< unsigned long long > *self,int index,std::vector< unsigned long long > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_unsigned_SS_long_SS_long_Sg__Contains(std::vector< unsigned long long > *self,unsigned long long const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_unsigned_SS_long_SS_long_Sg__IndexOf(std::vector< unsigned long long > *self,unsigned long long const &value){
        int index = -1;
        std::vector< unsigned long long >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_unsigned_SS_long_SS_long_Sg__LastIndexOf(std::vector< unsigned long long > *self,unsigned long long const &value){
        int index = -1;
        std::vector< unsigned long long >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_unsigned_SS_long_SS_long_Sg__Remove(std::vector< unsigned long long > *self,unsigned long long const &value){
        std::vector< unsigned long long >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
          return true;
        }
        return false;
      }
SWIGINTERN std::vector< std::vector< double > > *new_std_vector_Sl_std_vector_Sl_double_Sg__Sg___SWIG_2(int capacity){
        std::vector< std::vector< double > >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< std::vector< double > >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN std::vector< double > std_vector_Sl_std_vector_Sl_double_Sg__Sg__getitemcopy(std::vector< std::vector< double > > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< std::vector< double > >::value_type const &std_vector_Sl_std_vector_Sl_double_Sg__Sg__getitem(std::vector< std::vector< double > > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_double_Sg__Sg__setitem(std::vector< std::vector< double > > *self,int index,std::vector< double > const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_double_Sg__Sg__AddRange(std::vector< std::vector< double > > *self,std::vector< std::vector< double > > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< std::vector< double > > *std_vector_Sl_std_vector_Sl_double_Sg__Sg__GetRange(std::vector< std::vector< double > > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< std::vector< double > >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_double_Sg__Sg__Insert(std::vector< std::vector< double > > *self,int index,std::vector< double > const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_double_Sg__Sg__InsertRange(std::vector< std::vector< double > > *self,int index,std::vector< std::vector< double > > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_double_Sg__Sg__RemoveAt(std::vector< std::vector< double > > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_double_Sg__Sg__RemoveRange(std::vector< std::vector< double > > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< std::vector< double > > *std_vector_Sl_std_vector_Sl_double_Sg__Sg__Repeat(std::vector< double > const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< std::vector< double > >(count, value);
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_double_Sg__Sg__Reverse__SWIG_0(std::vector< std::vector< double > > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_double_Sg__Sg__Reverse__SWIG_1(std::vector< std::vector< double > > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_double_Sg__Sg__SetRange(std::vector< std::vector< double > > *self,int index,std::vector< std::vector< double > > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }

#include "pagmo/island.hpp"


#include "pagmo/population.hpp"


//#include "cassert"
//#include "memory"
//#include "string"
//#include "type_traits"
//#include "typeindex"
//#include "typeinfo"
//#include "utility"

#include "boost/type_traits/integral_constant.hpp"

#include "pagmo/config.hpp"
#include "pagmo/detail/support_xeus_cling.hpp"
#include "pagmo/detail/type_name.hpp"
#include "pagmo/detail/typeid_name_extract.hpp"
#include "pagmo/detail/visibility.hpp"
#include "pagmo/exceptions.hpp"
#include "pagmo/population.hpp"
#include "pagmo/s11n.hpp"
#include "pagmo/threading.hpp"
#include "pagmo/type_traits.hpp"
#include "pagmo/algorithm.hpp"


#include <memory>


#include "pagmo/island.hpp"
#include "pagmo/archipelago.hpp"
#include "pagmo/topology.hpp"


#include "pagmo/bfe.hpp"


#include "pagmo/io.hpp"

#include <algorithm>
#include <initializer_list>
#include <iostream>
#include <map>
#include <sstream>
#include <stdexcept>
#include <string>
#include <utility>
#include <vector>

#include "pagmo/detail/visibility.hpp"
#include "pagmo/exceptions.hpp"


#include "pagmo/rng.hpp"


#include "pagmo/algorithm.hpp"
#include "pagmo/algorithms/bee_colony.hpp"


#include "pagmo/algorithm.hpp"
#include "pagmo/algorithms/cmaes.hpp"


#include "pagmo/algorithm.hpp"
#include "pagmo/algorithms/compass_search.hpp"

SWIGINTERN void pagmo_compass_search_set_seed(pagmo::compass_search const *self,unsigned int){
   // do nothing
}
SWIGINTERN unsigned int pagmo_compass_search_get_seed(pagmo::compass_search const *self){
   return 0;
}
SWIGINTERN unsigned int pagmo_compass_search_get_gen(pagmo::compass_search const *self){
   return 0;
}

#include "pagmo/algorithm.hpp"
#include "pagmo/algorithms/de.hpp"


#include "pagmo/algorithms/de1220.hpp"


#include "pagmo/algorithms/gaco.hpp"
#include "pagmo/rng.hpp"


#include "pagmo/algorithms/gwo.hpp"
#include "pagmo/rng.hpp"


#include "pagmo/algorithm.hpp"
#include "pagmo/algorithms/nlopt.hpp"
//#include "nloptGenerated.cxx"
SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_nlopt_set_local_optimizer(void* jarg1, void* jarg2) {
    pagmo::nlopt* arg1 = (pagmo::nlopt*)0;
    arg1 = (pagmo::nlopt*)jarg1;

    pagmo::nlopt* arg2 = (pagmo::nlopt*)0;
    arg2 = (pagmo::nlopt*)jarg2;
    (arg1)->set_local_optimizer(*arg2);
}


#include "pagmo/algorithm.hpp"
#include "pagmo/algorithms/nspso.hpp"


#include "pagmo/algorithm.hpp"
#include "pagmo/algorithms/pso.hpp"


#include "pagmo/algorithm.hpp"
#include "pagmo/algorithms/pso_gen.hpp"


#include "pagmo/algorithm.hpp"
#include "pagmo/algorithms/sea.hpp"


#include "pagmo/algorithm.hpp"
#include "pagmo/algorithms/simulated_annealing.hpp"


#include "pagmo/algorithms/sade.hpp"


#include "pagmo/algorithm.hpp"
#include "pagmo/algorithms/sga.hpp"


#include "pagmo/algorithm.hpp"
#include "pagmo/algorithms/xnes.hpp"


#include "pagmo/bfe.hpp"
#include "pagmo/batch_evaluators/default_bfe.hpp"

SWIGINTERN pagmo::vector_double pagmo_default_bfe_Operator(pagmo::default_bfe const *self,pagmoWrap::problemPagomWrapper const &theProblem,pagmo::vector_double const &values){
	   return self->operator()(static_cast<pagmo::problem>(theProblem), values);
	}

#include "pagmo/bfe.hpp"
#include "pagmo/batch_evaluators/member_bfe.hpp"

SWIGINTERN pagmo::vector_double pagmo_member_bfe_Operator(pagmo::member_bfe const *self,pagmoWrap::problemPagomWrapper const &theProblem,pagmo::vector_double const &values){
	   return self->operator()(static_cast<pagmo::problem>(theProblem), values);
	}

#include "pagmo/bfe.hpp"
#include "pagmo/batch_evaluators/thread_bfe.hpp"

SWIGINTERN pagmo::vector_double pagmo_thread_bfe_Operator(pagmo::thread_bfe const *self,pagmoWrap::problemPagomWrapper const &theProblem,pagmo::vector_double const &values){
	   return self->operator()(static_cast<pagmo::problem>(theProblem), values);
	}

#include "pagmo/island.hpp"
#include "pagmo/islands/thread_island.hpp"


#include "pagmo/problems/ackley.hpp"
#include "pagmo/problem.hpp"

SWIGINTERN pagmo::vector_double::size_type pagmo_ackley_get_nic(pagmo::ackley const *self){
   return 0;
}
SWIGINTERN pagmo::vector_double::size_type pagmo_ackley_get_nec(pagmo::ackley const *self){
   return 0;
}
SWIGINTERN pagmo::vector_double::size_type pagmo_ackley_get_nix(pagmo::ackley const *self){
   return 0;
}
SWIGINTERN pagmo::vector_double::size_type pagmo_ackley_get_nobj(pagmo::ackley const *self){
   return 1;
}
SWIGINTERN bool pagmo_ackley_has_batch_fitness(pagmo::ackley const *self){
	return true;
}
SWIGINTERN pagmo::thread_safety pagmo_ackley_get_thread_safety(pagmo::ackley const *self){
	return pagmo::thread_safety::none; //TODO: What is the right answer?
}

#include "pagmo/problems/cec2006.hpp"
#include "pagmo/problem.hpp"

SWIGINTERN pagmo::vector_double::size_type pagmo_cec2006_get_nix(pagmo::cec2006 const *self){
   return 0;
}
SWIGINTERN pagmo::vector_double::size_type pagmo_cec2006_get_nobj(pagmo::cec2006 const *self){
   return 1;
}
SWIGINTERN pagmo::thread_safety pagmo_cec2006_get_thread_safety(pagmo::cec2006 const *self){
	return pagmo::thread_safety::none; //TODO: What is the right answer?
}
SWIGINTERN bool pagmo_cec2006_has_batch_fitness(pagmo::cec2006 const *self){
	return false;
}

#include "pagmo/problems/golomb_ruler.hpp"
#include "pagmo/problem.hpp"

SWIGINTERN pagmo::vector_double::size_type pagmo_golomb_ruler_get_nic(pagmo::golomb_ruler const *self){
   return 0;
}
SWIGINTERN pagmo::vector_double::size_type pagmo_golomb_ruler_get_nobj(pagmo::golomb_ruler const *self){
   return 1;
}
SWIGINTERN bool pagmo_golomb_ruler_has_batch_fitness(pagmo::golomb_ruler const *self){
	return true;
}
SWIGINTERN pagmo::thread_safety pagmo_golomb_ruler_get_thread_safety(pagmo::golomb_ruler const *self){
	return pagmo::thread_safety::none; //TODO: What is the right answer?
}

#include "pagmo/problems/inventory.hpp"
#include "pagmo/problem.hpp"

SWIGINTERN pagmo::vector_double::size_type pagmo_inventory_get_nic(pagmo::inventory const *self){
   return 0;
}
SWIGINTERN pagmo::vector_double::size_type pagmo_inventory_get_nec(pagmo::inventory const *self){
   return 0;
}
SWIGINTERN pagmo::vector_double::size_type pagmo_inventory_get_nix(pagmo::inventory const *self){
   return 0;
}
SWIGINTERN pagmo::vector_double::size_type pagmo_inventory_get_nobj(pagmo::inventory const *self){
   return 1;
}
SWIGINTERN bool pagmo_inventory_has_batch_fitness(pagmo::inventory const *self){
	return true;
}
SWIGINTERN pagmo::thread_safety pagmo_inventory_get_thread_safety(pagmo::inventory const *self){
	return pagmo::thread_safety::none; //TODO: What is the right answer?
}

#include "pagmo/problems/minlp_rastrigin.hpp"
#include "pagmo/problem.hpp"

SWIGINTERN pagmo::vector_double::size_type pagmo_minlp_rastrigin_get_nic(pagmo::minlp_rastrigin const *self){
   return 0;
}
SWIGINTERN pagmo::vector_double::size_type pagmo_minlp_rastrigin_get_nec(pagmo::minlp_rastrigin const *self){
   return 0;
}
SWIGINTERN pagmo::vector_double::size_type pagmo_minlp_rastrigin_get_nobj(pagmo::minlp_rastrigin const *self){
   return 1;
}
SWIGINTERN bool pagmo_minlp_rastrigin_has_batch_fitness(pagmo::minlp_rastrigin const *self){
	return true;
}
SWIGINTERN pagmo::thread_safety pagmo_minlp_rastrigin_get_thread_safety(pagmo::minlp_rastrigin const *self){
	return pagmo::thread_safety::none; //TODO: What is the right answer?
}

#include "pagmo/problems/zdt.hpp"
#include "pagmo/problem.hpp"

SWIGINTERN pagmo::vector_double::size_type pagmo_zdt_get_nic(pagmo::zdt const *self){
   return 0;
}
SWIGINTERN pagmo::vector_double::size_type pagmo_zdt_get_nec(pagmo::zdt const *self){
   return 0;
}
SWIGINTERN bool pagmo_zdt_has_batch_fitness(pagmo::zdt const *self){
	return true;
}
SWIGINTERN pagmo::thread_safety pagmo_zdt_get_thread_safety(pagmo::zdt const *self){
	return pagmo::thread_safety::none; //TODO: What is the right answer?
}

#include "pagmo/r_policies/fair_replace.hpp"
#include "pagmo/r_policy.hpp"

#include <string>
#include <type_traits>

#include "pagmo/detail/base_sr_policy.hpp"
#include "pagmo/detail/visibility.hpp"
#include "pagmo/r_policy.hpp"
#include "pagmo/s11n.hpp"
#include "pagmo/type_traits.hpp"
#include "pagmo/types.hpp"


#include "pagmo/s_policies/select_best.hpp"
#include "pagmo/s_policy.hpp"

#include <string>
#include <type_traits>

#include "pagmo/detail/base_sr_policy.hpp"
#include "pagmo/detail/visibility.hpp"
#include "pagmo/s11n.hpp"
#include "pagmo/s_policy.hpp"
#include "pagmo/type_traits.hpp"
#include "pagmo/types.hpp"


#include "pagmo/topologies/unconnected.hpp"
#include <cstddef>
#include <string>
#include <utility>
#include <vector>

#include "pagmo/detail/visibility.hpp"
#include "pagmo/s11n.hpp"
#include "pagmo/topology.hpp"
#include "pagmo/types.hpp"


#include "pagmo/utils/hv_algos/hv_algorithm.hpp"
#include "pagmo/detail/visibility.hpp"
#include "pagmo/types.hpp"


#include "pagmo/utils/hypervolume.hpp"

#include <memory>
#include <vector>

#include "pagmo/detail/visibility.hpp"
#include "pagmo/population.hpp"
#include "pagmo/s11n.hpp"
#include "pagmo/types.hpp"
#include "pagmo/utils/hv_algos/hv_algorithm.hpp"


#include <cmath>
#include <numeric>
#include <random>
#include <sstream>
#include <stdexcept>
#include <string>
#include <tuple>
#include <vector>

#include "boost/numeric/conversion/cast.hpp"

#include "pagmo/detail/visibility.hpp"
#include "pagmo/exceptions.hpp"
#include "pagmo/types.hpp"
#include "pagmo/utils/discrepancy.hpp"
#include "pagmo/utils/generic.hpp"
#include "pagmo/utils/multi_objective.hpp"


#include <stdint.h>		// Use the C99 official header


#include <exception>
struct wrapped_exception : std::exception {
  wrapped_exception(const std::string& msg) : msg(msg) {}
private:
  virtual const char * what () const noexcept {
    return msg.c_str();
  }
  std::string msg;
};



/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "pagmoSharpSwigInterface_wrap.h"

SwigDirector_problemBase::SwigDirector_problemBase() : pagmoWrap::problemBase(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_problemBase::~SwigDirector_problemBase() {
  
}


pagmoWrap::vector_double SwigDirector_problemBase::fitness(pagmoWrap::vector_double const &arg0) const {
  pagmoWrap::vector_double c_result ;
  void * jresult = 0 ;
  void * jarg0 = 0 ;
  
  if (!swig_callbackfitness) {
    return pagmoWrap::problemBase::fitness(arg0);
  } else {
    jarg0 = (pagmoWrap::vector_double *) &arg0; 
    jresult = (void *) swig_callbackfitness(jarg0);
    if (!jresult) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Unexpected null return for type pagmoWrap::vector_double", 0);
      return c_result;
    }
    c_result = *(pagmoWrap::vector_double *)jresult; 
  }
  return c_result;
}

std::pair< pagmoWrap::vector_double,pagmoWrap::vector_double > SwigDirector_problemBase::get_bounds() const {
  std::pair< pagmoWrap::vector_double,pagmoWrap::vector_double > c_result ;
  void * jresult = 0 ;
  
  if (!swig_callbackget_bounds) {
    return pagmoWrap::problemBase::get_bounds();
  } else {
    jresult = (void *) swig_callbackget_bounds();
    if (!jresult) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Unexpected null return for type std::pair< pagmoWrap::vector_double,pagmoWrap::vector_double >", 0);
      return c_result;
    }
    c_result = *(std::pair< pagmoWrap::vector_double,pagmoWrap::vector_double > *)jresult; 
  }
  return c_result;
}

bool SwigDirector_problemBase::has_batch_fitness() const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  
  if (!swig_callbackhas_batch_fitness) {
    return pagmoWrap::problemBase::has_batch_fitness();
  } else {
    jresult = (unsigned int) swig_callbackhas_batch_fitness();
    c_result = jresult ? true : false; 
  }
  return c_result;
}

std::string SwigDirector_problemBase::get_name() const {
  std::string c_result ;
  const char * jresult = 0 ;
  
  if (!swig_callbackget_name) {
    return pagmoWrap::problemBase::get_name();
  } else {
    jresult = (const char *) swig_callbackget_name();
    if (!jresult) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
      return c_result;
    }
    c_result.assign(jresult); 
  }
  return c_result;
}

std::vector< double >::size_type SwigDirector_problemBase::get_nobj() const {
  std::vector< double >::size_type c_result = SwigValueInit< std::vector< double >::size_type >() ;
  unsigned long jresult = 0 ;
  
  if (!swig_callbackget_nobj) {
    return pagmoWrap::problemBase::get_nobj();
  } else {
    jresult = (unsigned long) swig_callbackget_nobj();
    c_result = (std::vector< double >::size_type)jresult; 
  }
  return c_result;
}

std::vector< double >::size_type SwigDirector_problemBase::get_nec() const {
  std::vector< double >::size_type c_result = SwigValueInit< std::vector< double >::size_type >() ;
  unsigned long jresult = 0 ;
  
  if (!swig_callbackget_nec) {
    return pagmoWrap::problemBase::get_nec();
  } else {
    jresult = (unsigned long) swig_callbackget_nec();
    c_result = (std::vector< double >::size_type)jresult; 
  }
  return c_result;
}

std::vector< double >::size_type SwigDirector_problemBase::get_nic() const {
  std::vector< double >::size_type c_result = SwigValueInit< std::vector< double >::size_type >() ;
  unsigned long jresult = 0 ;
  
  if (!swig_callbackget_nic) {
    return pagmoWrap::problemBase::get_nic();
  } else {
    jresult = (unsigned long) swig_callbackget_nic();
    c_result = (std::vector< double >::size_type)jresult; 
  }
  return c_result;
}

std::vector< double >::size_type SwigDirector_problemBase::get_nix() const {
  std::vector< double >::size_type c_result = SwigValueInit< std::vector< double >::size_type >() ;
  unsigned long jresult = 0 ;
  
  if (!swig_callbackget_nix) {
    return pagmoWrap::problemBase::get_nix();
  } else {
    jresult = (unsigned long) swig_callbackget_nix();
    c_result = (std::vector< double >::size_type)jresult; 
  }
  return c_result;
}

pagmo::thread_safety SwigDirector_problemBase::get_thread_safety() const {
  pagmo::thread_safety c_result = SwigValueInit< pagmo::thread_safety >() ;
  int jresult = 0 ;
  
  if (!swig_callbackget_thread_safety) {
    return pagmoWrap::problemBase::get_thread_safety();
  } else {
    jresult = (int) swig_callbackget_thread_safety();
    c_result = (pagmo::thread_safety)jresult; 
  }
  return c_result;
}

bool SwigDirector_problemBase::has_gradient() const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  
  if (!swig_callbackhas_gradient) {
    return pagmoWrap::problemBase::has_gradient();
  } else {
    jresult = (unsigned int) swig_callbackhas_gradient();
    c_result = jresult ? true : false; 
  }
  return c_result;
}

pagmoWrap::vector_double SwigDirector_problemBase::gradient(pagmoWrap::vector_double const &arg0) const {
  pagmoWrap::vector_double c_result ;
  void * jresult = 0 ;
  void * jarg0 = 0 ;
  
  if (!swig_callbackgradient) {
    return pagmoWrap::problemBase::gradient(arg0);
  } else {
    jarg0 = (pagmoWrap::vector_double *) &arg0; 
    jresult = (void *) swig_callbackgradient(jarg0);
    if (!jresult) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Unexpected null return for type pagmoWrap::vector_double", 0);
      return c_result;
    }
    c_result = *(pagmoWrap::vector_double *)jresult; 
  }
  return c_result;
}

bool SwigDirector_problemBase::has_gradient_sparsity() const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  
  if (!swig_callbackhas_gradient_sparsity) {
    return pagmoWrap::problemBase::has_gradient_sparsity();
  } else {
    jresult = (unsigned int) swig_callbackhas_gradient_sparsity();
    c_result = jresult ? true : false; 
  }
  return c_result;
}

pagmo::sparsity_pattern SwigDirector_problemBase::gradient_sparsity() const {
  SwigValueWrapper< std::vector< std::pair< size_t,size_t > > > c_result ;
  void * jresult = 0 ;
  
  if (!swig_callbackgradient_sparsity) {
    return pagmoWrap::problemBase::gradient_sparsity();
  } else {
    jresult = (void *) swig_callbackgradient_sparsity();
    if (!jresult) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Unexpected null return for type pagmo::sparsity_pattern", 0);
      return c_result;
    }
    c_result = *(pagmo::sparsity_pattern *)jresult; 
  }
  return c_result;
}

void SwigDirector_problemBase::swig_connect_director(SWIG_Callback0_t callbackfitness, SWIG_Callback1_t callbackget_bounds, SWIG_Callback2_t callbackhas_batch_fitness, SWIG_Callback3_t callbackget_name, SWIG_Callback4_t callbackget_nobj, SWIG_Callback5_t callbackget_nec, SWIG_Callback6_t callbackget_nic, SWIG_Callback7_t callbackget_nix, SWIG_Callback8_t callbackget_thread_safety, SWIG_Callback9_t callbackhas_gradient, SWIG_Callback10_t callbackgradient, SWIG_Callback11_t callbackhas_gradient_sparsity, SWIG_Callback12_t callbackgradient_sparsity) {
  swig_callbackfitness = callbackfitness;
  swig_callbackget_bounds = callbackget_bounds;
  swig_callbackhas_batch_fitness = callbackhas_batch_fitness;
  swig_callbackget_name = callbackget_name;
  swig_callbackget_nobj = callbackget_nobj;
  swig_callbackget_nec = callbackget_nec;
  swig_callbackget_nic = callbackget_nic;
  swig_callbackget_nix = callbackget_nix;
  swig_callbackget_thread_safety = callbackget_thread_safety;
  swig_callbackhas_gradient = callbackhas_gradient;
  swig_callbackgradient = callbackgradient;
  swig_callbackhas_gradient_sparsity = callbackhas_gradient_sparsity;
  swig_callbackgradient_sparsity = callbackgradient_sparsity;
}

void SwigDirector_problemBase::swig_init_callbacks() {
  swig_callbackfitness = 0;
  swig_callbackget_bounds = 0;
  swig_callbackhas_batch_fitness = 0;
  swig_callbackget_name = 0;
  swig_callbackget_nobj = 0;
  swig_callbackget_nec = 0;
  swig_callbackget_nic = 0;
  swig_callbackget_nix = 0;
  swig_callbackget_thread_safety = 0;
  swig_callbackhas_gradient = 0;
  swig_callbackgradient = 0;
  swig_callbackhas_gradient_sparsity = 0;
  swig_callbackgradient_sparsity = 0;
}

SwigDirector_r_policyBase::SwigDirector_r_policyBase() : pagmoWrap::r_policyBase(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_r_policyBase::~SwigDirector_r_policyBase() {
  
}


pagmo::individuals_group_t SwigDirector_r_policyBase::replace(pagmo::individuals_group_t const &a,pagmo::vector_double::size_type const &b,pagmo::vector_double::size_type const &c,pagmo::vector_double::size_type const &d,pagmo::vector_double::size_type const &e,pagmo::vector_double::size_type const &f,pagmo::vector_double const &g,pagmo::individuals_group_t const &h) const {
  SwigValueWrapper< std::tuple< std::vector< unsigned long long >,std::vector< std::vector< double > >,std::vector< std::vector< double > > > > c_result ;
  void * jresult = 0 ;
  void * ja = 0 ;
  unsigned long jb = 0 ;
  unsigned long jc = 0 ;
  unsigned long jd = 0 ;
  unsigned long je = 0 ;
  unsigned long jf = 0 ;
  void * jg = 0 ;
  void * jh = 0 ;
  
  if (!swig_callbackreplace) {
    return pagmoWrap::r_policyBase::replace(a,b,c,d,e,f,g,h);
  } else {
    ja = (pagmo::individuals_group_t *) &a; 
    jb = b;
    jc = c;
    jd = d;
    je = e;
    jf = f;
    jg = (pagmo::vector_double *) &g; 
    jh = (pagmo::individuals_group_t *) &h; 
    jresult = (void *) swig_callbackreplace(ja, jb, jc, jd, je, jf, jg, jh);
    if (!jresult) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Unexpected null return for type pagmo::individuals_group_t", 0);
      return c_result;
    }
    c_result = *(pagmo::individuals_group_t *)jresult; 
  }
  return c_result;
}

std::string SwigDirector_r_policyBase::get_name() const {
  std::string c_result ;
  const char * jresult = 0 ;
  
  if (!swig_callbackget_name) {
    return pagmoWrap::r_policyBase::get_name();
  } else {
    jresult = (const char *) swig_callbackget_name();
    if (!jresult) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
      return c_result;
    }
    c_result.assign(jresult); 
  }
  return c_result;
}

std::string SwigDirector_r_policyBase::get_extra_info() const {
  std::string c_result ;
  const char * jresult = 0 ;
  
  if (!swig_callbackget_extra_info) {
    return pagmoWrap::r_policyBase::get_extra_info();
  } else {
    jresult = (const char *) swig_callbackget_extra_info();
    if (!jresult) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
      return c_result;
    }
    c_result.assign(jresult); 
  }
  return c_result;
}

bool SwigDirector_r_policyBase::is_valid() const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  
  if (!swig_callbackis_valid) {
    return pagmoWrap::r_policyBase::is_valid();
  } else {
    jresult = (unsigned int) swig_callbackis_valid();
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_r_policyBase::swig_connect_director(SWIG_Callback0_t callbackreplace, SWIG_Callback1_t callbackget_name, SWIG_Callback2_t callbackget_extra_info, SWIG_Callback3_t callbackis_valid) {
  swig_callbackreplace = callbackreplace;
  swig_callbackget_name = callbackget_name;
  swig_callbackget_extra_info = callbackget_extra_info;
  swig_callbackis_valid = callbackis_valid;
}

void SwigDirector_r_policyBase::swig_init_callbacks() {
  swig_callbackreplace = 0;
  swig_callbackget_name = 0;
  swig_callbackget_extra_info = 0;
  swig_callbackis_valid = 0;
}

SwigDirector_s_policyBase::SwigDirector_s_policyBase() : pagmoWrap::s_policyBase(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_s_policyBase::~SwigDirector_s_policyBase() {
  
}


pagmo::individuals_group_t SwigDirector_s_policyBase::select(pagmo::individuals_group_t const &a,pagmo::vector_double::size_type const &arg1,pagmo::vector_double::size_type const &arg2,pagmo::vector_double::size_type const &arg3,pagmo::vector_double::size_type const &arg4,pagmo::vector_double::size_type const &arg5,pagmo::vector_double const &arg6) const {
  SwigValueWrapper< std::tuple< std::vector< unsigned long long >,std::vector< std::vector< double > >,std::vector< std::vector< double > > > > c_result ;
  void * jresult = 0 ;
  void * ja = 0 ;
  unsigned long jarg1 = 0 ;
  unsigned long jarg2 = 0 ;
  unsigned long jarg3 = 0 ;
  unsigned long jarg4 = 0 ;
  unsigned long jarg5 = 0 ;
  void * jarg6 = 0 ;
  
  if (!swig_callbackselect) {
    return pagmoWrap::s_policyBase::select(a,arg1,arg2,arg3,arg4,arg5,arg6);
  } else {
    ja = (pagmo::individuals_group_t *) &a; 
    jarg1 = arg1;
    jarg2 = arg2;
    jarg3 = arg3;
    jarg4 = arg4;
    jarg5 = arg5;
    jarg6 = (pagmo::vector_double *) &arg6; 
    jresult = (void *) swig_callbackselect(ja, jarg1, jarg2, jarg3, jarg4, jarg5, jarg6);
    if (!jresult) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Unexpected null return for type pagmo::individuals_group_t", 0);
      return c_result;
    }
    c_result = *(pagmo::individuals_group_t *)jresult; 
  }
  return c_result;
}

std::string SwigDirector_s_policyBase::get_name() const {
  std::string c_result ;
  const char * jresult = 0 ;
  
  if (!swig_callbackget_name) {
    return pagmoWrap::s_policyBase::get_name();
  } else {
    jresult = (const char *) swig_callbackget_name();
    if (!jresult) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
      return c_result;
    }
    c_result.assign(jresult); 
  }
  return c_result;
}

std::string SwigDirector_s_policyBase::get_extra_info() const {
  std::string c_result ;
  const char * jresult = 0 ;
  
  if (!swig_callbackget_extra_info) {
    return pagmoWrap::s_policyBase::get_extra_info();
  } else {
    jresult = (const char *) swig_callbackget_extra_info();
    if (!jresult) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
      return c_result;
    }
    c_result.assign(jresult); 
  }
  return c_result;
}

bool SwigDirector_s_policyBase::is_valid() const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  
  if (!swig_callbackis_valid) {
    return pagmoWrap::s_policyBase::is_valid();
  } else {
    jresult = (unsigned int) swig_callbackis_valid();
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_s_policyBase::swig_connect_director(SWIG_Callback0_t callbackselect, SWIG_Callback1_t callbackget_name, SWIG_Callback2_t callbackget_extra_info, SWIG_Callback3_t callbackis_valid) {
  swig_callbackselect = callbackselect;
  swig_callbackget_name = callbackget_name;
  swig_callbackget_extra_info = callbackget_extra_info;
  swig_callbackis_valid = callbackis_valid;
}

void SwigDirector_s_policyBase::swig_init_callbacks() {
  swig_callbackselect = 0;
  swig_callbackget_name = 0;
  swig_callbackget_extra_info = 0;
  swig_callbackis_valid = 0;
}


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_delete_problemBase(void * jarg1) {
  pagmoWrap::problemBase *arg1 = (pagmoWrap::problemBase *) 0 ;
  
  arg1 = (pagmoWrap::problemBase *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_problemBase_fitness(void * jarg1, void * jarg2) {
  void * jresult ;
  pagmoWrap::problemBase *arg1 = (pagmoWrap::problemBase *) 0 ;
  pagmoWrap::vector_double *arg2 = 0 ;
  pagmoWrap::vector_double result;
  
  arg1 = (pagmoWrap::problemBase *)jarg1; 
  arg2 = (pagmoWrap::vector_double *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pagmoWrap::vector_double const & is null", 0);
    return 0;
  } 
  result = ((pagmoWrap::problemBase const *)arg1)->fitness((pagmoWrap::vector_double const &)*arg2);
  jresult = new pagmoWrap::vector_double(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_problemBase_fitnessSwigExplicitproblemBase(void * jarg1, void * jarg2) {
  void * jresult ;
  pagmoWrap::problemBase *arg1 = (pagmoWrap::problemBase *) 0 ;
  pagmoWrap::vector_double *arg2 = 0 ;
  pagmoWrap::vector_double result;
  
  arg1 = (pagmoWrap::problemBase *)jarg1; 
  arg2 = (pagmoWrap::vector_double *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pagmoWrap::vector_double const & is null", 0);
    return 0;
  } 
  result = ((pagmoWrap::problemBase const *)arg1)->pagmoWrap::problemBase::fitness((pagmoWrap::vector_double const &)*arg2);
  jresult = new pagmoWrap::vector_double(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_problemBase_get_bounds(void * jarg1) {
  void * jresult ;
  pagmoWrap::problemBase *arg1 = (pagmoWrap::problemBase *) 0 ;
  std::pair< pagmoWrap::vector_double,pagmoWrap::vector_double > result;
  
  arg1 = (pagmoWrap::problemBase *)jarg1; 
  result = ((pagmoWrap::problemBase const *)arg1)->get_bounds();
  jresult = new std::pair< pagmoWrap::vector_double,pagmoWrap::vector_double >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_problemBase_get_boundsSwigExplicitproblemBase(void * jarg1) {
  void * jresult ;
  pagmoWrap::problemBase *arg1 = (pagmoWrap::problemBase *) 0 ;
  std::pair< pagmoWrap::vector_double,pagmoWrap::vector_double > result;
  
  arg1 = (pagmoWrap::problemBase *)jarg1; 
  result = ((pagmoWrap::problemBase const *)arg1)->pagmoWrap::problemBase::get_bounds();
  jresult = new std::pair< pagmoWrap::vector_double,pagmoWrap::vector_double >(result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pagmo_problemBase_has_batch_fitness(void * jarg1) {
  unsigned int jresult ;
  pagmoWrap::problemBase *arg1 = (pagmoWrap::problemBase *) 0 ;
  bool result;
  
  arg1 = (pagmoWrap::problemBase *)jarg1; 
  result = (bool)((pagmoWrap::problemBase const *)arg1)->has_batch_fitness();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pagmo_problemBase_has_batch_fitnessSwigExplicitproblemBase(void * jarg1) {
  unsigned int jresult ;
  pagmoWrap::problemBase *arg1 = (pagmoWrap::problemBase *) 0 ;
  bool result;
  
  arg1 = (pagmoWrap::problemBase *)jarg1; 
  result = (bool)((pagmoWrap::problemBase const *)arg1)->pagmoWrap::problemBase::has_batch_fitness();
  jresult = result; 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_pagmo_problemBase_get_name(void * jarg1) {
  const char * jresult ;
  pagmoWrap::problemBase *arg1 = (pagmoWrap::problemBase *) 0 ;
  std::string result;
  
  arg1 = (pagmoWrap::problemBase *)jarg1; 
  result = ((pagmoWrap::problemBase const *)arg1)->get_name();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_pagmo_problemBase_get_nameSwigExplicitproblemBase(void * jarg1) {
  const char * jresult ;
  pagmoWrap::problemBase *arg1 = (pagmoWrap::problemBase *) 0 ;
  std::string result;
  
  arg1 = (pagmoWrap::problemBase *)jarg1; 
  result = ((pagmoWrap::problemBase const *)arg1)->pagmoWrap::problemBase::get_name();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pagmo_problemBase_get_nobj(void * jarg1) {
  unsigned long jresult ;
  pagmoWrap::problemBase *arg1 = (pagmoWrap::problemBase *) 0 ;
  std::vector< double >::size_type result;
  
  arg1 = (pagmoWrap::problemBase *)jarg1; 
  result = ((pagmoWrap::problemBase const *)arg1)->get_nobj();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pagmo_problemBase_get_nobjSwigExplicitproblemBase(void * jarg1) {
  unsigned long jresult ;
  pagmoWrap::problemBase *arg1 = (pagmoWrap::problemBase *) 0 ;
  std::vector< double >::size_type result;
  
  arg1 = (pagmoWrap::problemBase *)jarg1; 
  result = ((pagmoWrap::problemBase const *)arg1)->pagmoWrap::problemBase::get_nobj();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pagmo_problemBase_get_nec(void * jarg1) {
  unsigned long jresult ;
  pagmoWrap::problemBase *arg1 = (pagmoWrap::problemBase *) 0 ;
  std::vector< double >::size_type result;
  
  arg1 = (pagmoWrap::problemBase *)jarg1; 
  result = ((pagmoWrap::problemBase const *)arg1)->get_nec();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pagmo_problemBase_get_necSwigExplicitproblemBase(void * jarg1) {
  unsigned long jresult ;
  pagmoWrap::problemBase *arg1 = (pagmoWrap::problemBase *) 0 ;
  std::vector< double >::size_type result;
  
  arg1 = (pagmoWrap::problemBase *)jarg1; 
  result = ((pagmoWrap::problemBase const *)arg1)->pagmoWrap::problemBase::get_nec();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pagmo_problemBase_get_nic(void * jarg1) {
  unsigned long jresult ;
  pagmoWrap::problemBase *arg1 = (pagmoWrap::problemBase *) 0 ;
  std::vector< double >::size_type result;
  
  arg1 = (pagmoWrap::problemBase *)jarg1; 
  result = ((pagmoWrap::problemBase const *)arg1)->get_nic();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pagmo_problemBase_get_nicSwigExplicitproblemBase(void * jarg1) {
  unsigned long jresult ;
  pagmoWrap::problemBase *arg1 = (pagmoWrap::problemBase *) 0 ;
  std::vector< double >::size_type result;
  
  arg1 = (pagmoWrap::problemBase *)jarg1; 
  result = ((pagmoWrap::problemBase const *)arg1)->pagmoWrap::problemBase::get_nic();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pagmo_problemBase_get_nix(void * jarg1) {
  unsigned long jresult ;
  pagmoWrap::problemBase *arg1 = (pagmoWrap::problemBase *) 0 ;
  std::vector< double >::size_type result;
  
  arg1 = (pagmoWrap::problemBase *)jarg1; 
  result = ((pagmoWrap::problemBase const *)arg1)->get_nix();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pagmo_problemBase_get_nixSwigExplicitproblemBase(void * jarg1) {
  unsigned long jresult ;
  pagmoWrap::problemBase *arg1 = (pagmoWrap::problemBase *) 0 ;
  std::vector< double >::size_type result;
  
  arg1 = (pagmoWrap::problemBase *)jarg1; 
  result = ((pagmoWrap::problemBase const *)arg1)->pagmoWrap::problemBase::get_nix();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pagmo_problemBase_get_thread_safety(void * jarg1) {
  int jresult ;
  pagmoWrap::problemBase *arg1 = (pagmoWrap::problemBase *) 0 ;
  pagmo::thread_safety result;
  
  arg1 = (pagmoWrap::problemBase *)jarg1; 
  result = (pagmo::thread_safety)((pagmoWrap::problemBase const *)arg1)->get_thread_safety();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pagmo_problemBase_get_thread_safetySwigExplicitproblemBase(void * jarg1) {
  int jresult ;
  pagmoWrap::problemBase *arg1 = (pagmoWrap::problemBase *) 0 ;
  pagmo::thread_safety result;
  
  arg1 = (pagmoWrap::problemBase *)jarg1; 
  result = (pagmo::thread_safety)((pagmoWrap::problemBase const *)arg1)->pagmoWrap::problemBase::get_thread_safety();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pagmo_problemBase_has_gradient(void * jarg1) {
  unsigned int jresult ;
  pagmoWrap::problemBase *arg1 = (pagmoWrap::problemBase *) 0 ;
  bool result;
  
  arg1 = (pagmoWrap::problemBase *)jarg1; 
  result = (bool)((pagmoWrap::problemBase const *)arg1)->has_gradient();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pagmo_problemBase_has_gradientSwigExplicitproblemBase(void * jarg1) {
  unsigned int jresult ;
  pagmoWrap::problemBase *arg1 = (pagmoWrap::problemBase *) 0 ;
  bool result;
  
  arg1 = (pagmoWrap::problemBase *)jarg1; 
  result = (bool)((pagmoWrap::problemBase const *)arg1)->pagmoWrap::problemBase::has_gradient();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_problemBase_gradient(void * jarg1, void * jarg2) {
  void * jresult ;
  pagmoWrap::problemBase *arg1 = (pagmoWrap::problemBase *) 0 ;
  pagmoWrap::vector_double *arg2 = 0 ;
  pagmoWrap::vector_double result;
  
  arg1 = (pagmoWrap::problemBase *)jarg1; 
  arg2 = (pagmoWrap::vector_double *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pagmoWrap::vector_double const & is null", 0);
    return 0;
  } 
  result = ((pagmoWrap::problemBase const *)arg1)->gradient((pagmoWrap::vector_double const &)*arg2);
  jresult = new pagmoWrap::vector_double(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_problemBase_gradientSwigExplicitproblemBase(void * jarg1, void * jarg2) {
  void * jresult ;
  pagmoWrap::problemBase *arg1 = (pagmoWrap::problemBase *) 0 ;
  pagmoWrap::vector_double *arg2 = 0 ;
  pagmoWrap::vector_double result;
  
  arg1 = (pagmoWrap::problemBase *)jarg1; 
  arg2 = (pagmoWrap::vector_double *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pagmoWrap::vector_double const & is null", 0);
    return 0;
  } 
  result = ((pagmoWrap::problemBase const *)arg1)->pagmoWrap::problemBase::gradient((pagmoWrap::vector_double const &)*arg2);
  jresult = new pagmoWrap::vector_double(result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pagmo_problemBase_has_gradient_sparsity(void * jarg1) {
  unsigned int jresult ;
  pagmoWrap::problemBase *arg1 = (pagmoWrap::problemBase *) 0 ;
  bool result;
  
  arg1 = (pagmoWrap::problemBase *)jarg1; 
  result = (bool)((pagmoWrap::problemBase const *)arg1)->has_gradient_sparsity();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pagmo_problemBase_has_gradient_sparsitySwigExplicitproblemBase(void * jarg1) {
  unsigned int jresult ;
  pagmoWrap::problemBase *arg1 = (pagmoWrap::problemBase *) 0 ;
  bool result;
  
  arg1 = (pagmoWrap::problemBase *)jarg1; 
  result = (bool)((pagmoWrap::problemBase const *)arg1)->pagmoWrap::problemBase::has_gradient_sparsity();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_problemBase_gradient_sparsity(void * jarg1) {
  void * jresult ;
  pagmoWrap::problemBase *arg1 = (pagmoWrap::problemBase *) 0 ;
  SwigValueWrapper< std::vector< std::pair< size_t,size_t > > > result;
  
  arg1 = (pagmoWrap::problemBase *)jarg1; 
  result = ((pagmoWrap::problemBase const *)arg1)->gradient_sparsity();
  jresult = new pagmo::sparsity_pattern(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_problemBase_gradient_sparsitySwigExplicitproblemBase(void * jarg1) {
  void * jresult ;
  pagmoWrap::problemBase *arg1 = (pagmoWrap::problemBase *) 0 ;
  SwigValueWrapper< std::vector< std::pair< size_t,size_t > > > result;
  
  arg1 = (pagmoWrap::problemBase *)jarg1; 
  result = ((pagmoWrap::problemBase const *)arg1)->pagmoWrap::problemBase::gradient_sparsity();
  jresult = new pagmo::sparsity_pattern(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_problemBase() {
  void * jresult ;
  pagmoWrap::problemBase *result = 0 ;
  
  result = (pagmoWrap::problemBase *)new SwigDirector_problemBase();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_problemBase_director_connect(void *objarg, SwigDirector_problemBase::SWIG_Callback0_t callback0, SwigDirector_problemBase::SWIG_Callback1_t callback1, SwigDirector_problemBase::SWIG_Callback2_t callback2, SwigDirector_problemBase::SWIG_Callback3_t callback3, SwigDirector_problemBase::SWIG_Callback4_t callback4, SwigDirector_problemBase::SWIG_Callback5_t callback5, SwigDirector_problemBase::SWIG_Callback6_t callback6, SwigDirector_problemBase::SWIG_Callback7_t callback7, SwigDirector_problemBase::SWIG_Callback8_t callback8, SwigDirector_problemBase::SWIG_Callback9_t callback9, SwigDirector_problemBase::SWIG_Callback10_t callback10, SwigDirector_problemBase::SWIG_Callback11_t callback11, SwigDirector_problemBase::SWIG_Callback12_t callback12) {
  pagmoWrap::problemBase *obj = (pagmoWrap::problemBase *)objarg;
  SwigDirector_problemBase *director = static_cast<SwigDirector_problemBase *>(obj);
  director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9, callback10, callback11, callback12);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_problemPagomWrapper__SWIG_0() {
  void * jresult ;
  pagmoWrap::problemPagomWrapper *result = 0 ;
  
  result = (pagmoWrap::problemPagomWrapper *)new pagmoWrap::problemPagomWrapper();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_problemPagomWrapper__SWIG_1(void * jarg1) {
  void * jresult ;
  pagmoWrap::problemBase *arg1 = (pagmoWrap::problemBase *) 0 ;
  pagmoWrap::problemPagomWrapper *result = 0 ;
  
  arg1 = (pagmoWrap::problemBase *)jarg1; 
  result = (pagmoWrap::problemPagomWrapper *)new pagmoWrap::problemPagomWrapper(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_problemPagomWrapper__SWIG_2(void * jarg1) {
  void * jresult ;
  pagmoWrap::problemPagomWrapper *arg1 = 0 ;
  pagmoWrap::problemPagomWrapper *result = 0 ;
  
  arg1 = (pagmoWrap::problemPagomWrapper *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pagmoWrap::problemPagomWrapper const & is null", 0);
    return 0;
  } 
  result = (pagmoWrap::problemPagomWrapper *)new pagmoWrap::problemPagomWrapper((pagmoWrap::problemPagomWrapper const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_delete_problemPagomWrapper(void * jarg1) {
  pagmoWrap::problemPagomWrapper *arg1 = (pagmoWrap::problemPagomWrapper *) 0 ;
  
  arg1 = (pagmoWrap::problemPagomWrapper *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_problemPagomWrapper_setBaseProblem(void * jarg1, void * jarg2) {
  pagmoWrap::problemPagomWrapper *arg1 = (pagmoWrap::problemPagomWrapper *) 0 ;
  pagmoWrap::problemBase *arg2 = (pagmoWrap::problemBase *) 0 ;
  
  arg1 = (pagmoWrap::problemPagomWrapper *)jarg1; 
  arg2 = (pagmoWrap::problemBase *)jarg2; 
  (arg1)->setBaseProblem(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_problemPagomWrapper_getBaseProblem(void * jarg1) {
  void * jresult ;
  pagmoWrap::problemPagomWrapper *arg1 = (pagmoWrap::problemPagomWrapper *) 0 ;
  pagmoWrap::problemBase *result = 0 ;
  
  arg1 = (pagmoWrap::problemPagomWrapper *)jarg1; 
  result = (pagmoWrap::problemBase *)(arg1)->getBaseProblem();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_problemPagomWrapper_fitness(void * jarg1, void * jarg2) {
  void * jresult ;
  pagmoWrap::problemPagomWrapper *arg1 = (pagmoWrap::problemPagomWrapper *) 0 ;
  pagmoWrap::vector_double *arg2 = 0 ;
  pagmoWrap::vector_double result;
  
  arg1 = (pagmoWrap::problemPagomWrapper *)jarg1; 
  arg2 = (pagmoWrap::vector_double *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pagmoWrap::vector_double const & is null", 0);
    return 0;
  } 
  result = ((pagmoWrap::problemPagomWrapper const *)arg1)->fitness((pagmoWrap::vector_double const &)*arg2);
  jresult = new pagmoWrap::vector_double(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_problemPagomWrapper_get_bounds(void * jarg1) {
  void * jresult ;
  pagmoWrap::problemPagomWrapper *arg1 = (pagmoWrap::problemPagomWrapper *) 0 ;
  std::pair< pagmoWrap::vector_double,pagmoWrap::vector_double > result;
  
  arg1 = (pagmoWrap::problemPagomWrapper *)jarg1; 
  result = ((pagmoWrap::problemPagomWrapper const *)arg1)->get_bounds();
  jresult = new std::pair< pagmoWrap::vector_double,pagmoWrap::vector_double >(result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pagmo_problemPagomWrapper_has_batch_fitness(void * jarg1) {
  unsigned int jresult ;
  pagmoWrap::problemPagomWrapper *arg1 = (pagmoWrap::problemPagomWrapper *) 0 ;
  bool result;
  
  arg1 = (pagmoWrap::problemPagomWrapper *)jarg1; 
  result = (bool)((pagmoWrap::problemPagomWrapper const *)arg1)->has_batch_fitness();
  jresult = result; 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_pagmo_problemPagomWrapper_get_name(void * jarg1) {
  const char * jresult ;
  pagmoWrap::problemPagomWrapper *arg1 = (pagmoWrap::problemPagomWrapper *) 0 ;
  std::string result;
  
  arg1 = (pagmoWrap::problemPagomWrapper *)jarg1; 
  result = ((pagmoWrap::problemPagomWrapper const *)arg1)->get_name();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pagmo_problemPagomWrapper_get_nobj(void * jarg1) {
  unsigned long jresult ;
  pagmoWrap::problemPagomWrapper *arg1 = (pagmoWrap::problemPagomWrapper *) 0 ;
  std::vector< double >::size_type result;
  
  arg1 = (pagmoWrap::problemPagomWrapper *)jarg1; 
  result = ((pagmoWrap::problemPagomWrapper const *)arg1)->get_nobj();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pagmo_problemPagomWrapper_get_nec(void * jarg1) {
  unsigned long jresult ;
  pagmoWrap::problemPagomWrapper *arg1 = (pagmoWrap::problemPagomWrapper *) 0 ;
  std::vector< double >::size_type result;
  
  arg1 = (pagmoWrap::problemPagomWrapper *)jarg1; 
  result = ((pagmoWrap::problemPagomWrapper const *)arg1)->get_nec();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pagmo_problemPagomWrapper_get_nic(void * jarg1) {
  unsigned long jresult ;
  pagmoWrap::problemPagomWrapper *arg1 = (pagmoWrap::problemPagomWrapper *) 0 ;
  std::vector< double >::size_type result;
  
  arg1 = (pagmoWrap::problemPagomWrapper *)jarg1; 
  result = ((pagmoWrap::problemPagomWrapper const *)arg1)->get_nic();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pagmo_problemPagomWrapper_get_nix(void * jarg1) {
  unsigned long jresult ;
  pagmoWrap::problemPagomWrapper *arg1 = (pagmoWrap::problemPagomWrapper *) 0 ;
  std::vector< double >::size_type result;
  
  arg1 = (pagmoWrap::problemPagomWrapper *)jarg1; 
  result = ((pagmoWrap::problemPagomWrapper const *)arg1)->get_nix();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pagmo_problemPagomWrapper_get_thread_safety(void * jarg1) {
  int jresult ;
  pagmoWrap::problemPagomWrapper *arg1 = (pagmoWrap::problemPagomWrapper *) 0 ;
  pagmo::thread_safety result;
  
  arg1 = (pagmoWrap::problemPagomWrapper *)jarg1; 
  result = (pagmo::thread_safety)((pagmoWrap::problemPagomWrapper const *)arg1)->get_thread_safety();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pagmo_problemPagomWrapper_has_gradient(void * jarg1) {
  unsigned int jresult ;
  pagmoWrap::problemPagomWrapper *arg1 = (pagmoWrap::problemPagomWrapper *) 0 ;
  bool result;
  
  arg1 = (pagmoWrap::problemPagomWrapper *)jarg1; 
  result = (bool)((pagmoWrap::problemPagomWrapper const *)arg1)->has_gradient();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_problemPagomWrapper_gradient(void * jarg1, void * jarg2) {
  void * jresult ;
  pagmoWrap::problemPagomWrapper *arg1 = (pagmoWrap::problemPagomWrapper *) 0 ;
  pagmoWrap::vector_double *arg2 = 0 ;
  pagmoWrap::vector_double result;
  
  arg1 = (pagmoWrap::problemPagomWrapper *)jarg1; 
  arg2 = (pagmoWrap::vector_double *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pagmoWrap::vector_double const & is null", 0);
    return 0;
  } 
  result = ((pagmoWrap::problemPagomWrapper const *)arg1)->gradient((pagmoWrap::vector_double const &)*arg2);
  jresult = new pagmoWrap::vector_double(result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pagmo_problemPagomWrapper_has_gradient_sparsity(void * jarg1) {
  unsigned int jresult ;
  pagmoWrap::problemPagomWrapper *arg1 = (pagmoWrap::problemPagomWrapper *) 0 ;
  bool result;
  
  arg1 = (pagmoWrap::problemPagomWrapper *)jarg1; 
  result = (bool)((pagmoWrap::problemPagomWrapper const *)arg1)->has_gradient_sparsity();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_problemPagomWrapper_gradient_sparsity(void * jarg1) {
  void * jresult ;
  pagmoWrap::problemPagomWrapper *arg1 = (pagmoWrap::problemPagomWrapper *) 0 ;
  SwigValueWrapper< std::vector< std::pair< size_t,size_t > > > result;
  
  arg1 = (pagmoWrap::problemPagomWrapper *)jarg1; 
  result = ((pagmoWrap::problemPagomWrapper const *)arg1)->gradient_sparsity();
  jresult = new pagmo::sparsity_pattern(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_delete_r_policyBase(void * jarg1) {
  pagmoWrap::r_policyBase *arg1 = (pagmoWrap::r_policyBase *) 0 ;
  
  arg1 = (pagmoWrap::r_policyBase *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_r_policyBase_replace(void * jarg1, void * jarg2, unsigned long jarg3, unsigned long jarg4, unsigned long jarg5, unsigned long jarg6, unsigned long jarg7, void * jarg8, void * jarg9) {
  void * jresult ;
  pagmoWrap::r_policyBase *arg1 = (pagmoWrap::r_policyBase *) 0 ;
  pagmo::individuals_group_t *arg2 = 0 ;
  pagmo::vector_double::size_type *arg3 = 0 ;
  pagmo::vector_double::size_type *arg4 = 0 ;
  pagmo::vector_double::size_type *arg5 = 0 ;
  pagmo::vector_double::size_type *arg6 = 0 ;
  pagmo::vector_double::size_type *arg7 = 0 ;
  pagmo::vector_double *arg8 = 0 ;
  pagmo::individuals_group_t *arg9 = 0 ;
  pagmo::vector_double::size_type temp3 ;
  pagmo::vector_double::size_type temp4 ;
  pagmo::vector_double::size_type temp5 ;
  pagmo::vector_double::size_type temp6 ;
  pagmo::vector_double::size_type temp7 ;
  SwigValueWrapper< std::tuple< std::vector< unsigned long long >,std::vector< std::vector< double > >,std::vector< std::vector< double > > > > result;
  
  arg1 = (pagmoWrap::r_policyBase *)jarg1; 
  arg2 = (pagmo::individuals_group_t *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pagmo::individuals_group_t const & is null", 0);
    return 0;
  } 
  temp3 = (pagmo::vector_double::size_type)jarg3; 
  arg3 = &temp3; 
  temp4 = (pagmo::vector_double::size_type)jarg4; 
  arg4 = &temp4; 
  temp5 = (pagmo::vector_double::size_type)jarg5; 
  arg5 = &temp5; 
  temp6 = (pagmo::vector_double::size_type)jarg6; 
  arg6 = &temp6; 
  temp7 = (pagmo::vector_double::size_type)jarg7; 
  arg7 = &temp7; 
  arg8 = (pagmo::vector_double *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pagmo::vector_double const & is null", 0);
    return 0;
  } 
  arg9 = (pagmo::individuals_group_t *)jarg9;
  if (!arg9) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pagmo::individuals_group_t const & is null", 0);
    return 0;
  } 
  result = ((pagmoWrap::r_policyBase const *)arg1)->replace((pagmo::individuals_group_t const &)*arg2,(pagmo::vector_double::size_type const &)*arg3,(pagmo::vector_double::size_type const &)*arg4,(pagmo::vector_double::size_type const &)*arg5,(pagmo::vector_double::size_type const &)*arg6,(pagmo::vector_double::size_type const &)*arg7,(pagmo::vector_double const &)*arg8,(pagmo::individuals_group_t const &)*arg9);
  jresult = new pagmo::individuals_group_t(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_r_policyBase_replaceSwigExplicitr_policyBase(void * jarg1, void * jarg2, unsigned long jarg3, unsigned long jarg4, unsigned long jarg5, unsigned long jarg6, unsigned long jarg7, void * jarg8, void * jarg9) {
  void * jresult ;
  pagmoWrap::r_policyBase *arg1 = (pagmoWrap::r_policyBase *) 0 ;
  pagmo::individuals_group_t *arg2 = 0 ;
  pagmo::vector_double::size_type *arg3 = 0 ;
  pagmo::vector_double::size_type *arg4 = 0 ;
  pagmo::vector_double::size_type *arg5 = 0 ;
  pagmo::vector_double::size_type *arg6 = 0 ;
  pagmo::vector_double::size_type *arg7 = 0 ;
  pagmo::vector_double *arg8 = 0 ;
  pagmo::individuals_group_t *arg9 = 0 ;
  pagmo::vector_double::size_type temp3 ;
  pagmo::vector_double::size_type temp4 ;
  pagmo::vector_double::size_type temp5 ;
  pagmo::vector_double::size_type temp6 ;
  pagmo::vector_double::size_type temp7 ;
  SwigValueWrapper< std::tuple< std::vector< unsigned long long >,std::vector< std::vector< double > >,std::vector< std::vector< double > > > > result;
  
  arg1 = (pagmoWrap::r_policyBase *)jarg1; 
  arg2 = (pagmo::individuals_group_t *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pagmo::individuals_group_t const & is null", 0);
    return 0;
  } 
  temp3 = (pagmo::vector_double::size_type)jarg3; 
  arg3 = &temp3; 
  temp4 = (pagmo::vector_double::size_type)jarg4; 
  arg4 = &temp4; 
  temp5 = (pagmo::vector_double::size_type)jarg5; 
  arg5 = &temp5; 
  temp6 = (pagmo::vector_double::size_type)jarg6; 
  arg6 = &temp6; 
  temp7 = (pagmo::vector_double::size_type)jarg7; 
  arg7 = &temp7; 
  arg8 = (pagmo::vector_double *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pagmo::vector_double const & is null", 0);
    return 0;
  } 
  arg9 = (pagmo::individuals_group_t *)jarg9;
  if (!arg9) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pagmo::individuals_group_t const & is null", 0);
    return 0;
  } 
  result = ((pagmoWrap::r_policyBase const *)arg1)->pagmoWrap::r_policyBase::replace((pagmo::individuals_group_t const &)*arg2,(pagmo::vector_double::size_type const &)*arg3,(pagmo::vector_double::size_type const &)*arg4,(pagmo::vector_double::size_type const &)*arg5,(pagmo::vector_double::size_type const &)*arg6,(pagmo::vector_double::size_type const &)*arg7,(pagmo::vector_double const &)*arg8,(pagmo::individuals_group_t const &)*arg9);
  jresult = new pagmo::individuals_group_t(result); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_pagmo_r_policyBase_get_name(void * jarg1) {
  const char * jresult ;
  pagmoWrap::r_policyBase *arg1 = (pagmoWrap::r_policyBase *) 0 ;
  std::string result;
  
  arg1 = (pagmoWrap::r_policyBase *)jarg1; 
  result = ((pagmoWrap::r_policyBase const *)arg1)->get_name();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_pagmo_r_policyBase_get_nameSwigExplicitr_policyBase(void * jarg1) {
  const char * jresult ;
  pagmoWrap::r_policyBase *arg1 = (pagmoWrap::r_policyBase *) 0 ;
  std::string result;
  
  arg1 = (pagmoWrap::r_policyBase *)jarg1; 
  result = ((pagmoWrap::r_policyBase const *)arg1)->pagmoWrap::r_policyBase::get_name();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_pagmo_r_policyBase_get_extra_info(void * jarg1) {
  const char * jresult ;
  pagmoWrap::r_policyBase *arg1 = (pagmoWrap::r_policyBase *) 0 ;
  std::string result;
  
  arg1 = (pagmoWrap::r_policyBase *)jarg1; 
  result = ((pagmoWrap::r_policyBase const *)arg1)->get_extra_info();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_pagmo_r_policyBase_get_extra_infoSwigExplicitr_policyBase(void * jarg1) {
  const char * jresult ;
  pagmoWrap::r_policyBase *arg1 = (pagmoWrap::r_policyBase *) 0 ;
  std::string result;
  
  arg1 = (pagmoWrap::r_policyBase *)jarg1; 
  result = ((pagmoWrap::r_policyBase const *)arg1)->pagmoWrap::r_policyBase::get_extra_info();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pagmo_r_policyBase_is_valid(void * jarg1) {
  unsigned int jresult ;
  pagmoWrap::r_policyBase *arg1 = (pagmoWrap::r_policyBase *) 0 ;
  bool result;
  
  arg1 = (pagmoWrap::r_policyBase *)jarg1; 
  result = (bool)((pagmoWrap::r_policyBase const *)arg1)->is_valid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pagmo_r_policyBase_is_validSwigExplicitr_policyBase(void * jarg1) {
  unsigned int jresult ;
  pagmoWrap::r_policyBase *arg1 = (pagmoWrap::r_policyBase *) 0 ;
  bool result;
  
  arg1 = (pagmoWrap::r_policyBase *)jarg1; 
  result = (bool)((pagmoWrap::r_policyBase const *)arg1)->pagmoWrap::r_policyBase::is_valid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_r_policyBase() {
  void * jresult ;
  pagmoWrap::r_policyBase *result = 0 ;
  
  result = (pagmoWrap::r_policyBase *)new SwigDirector_r_policyBase();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_r_policyBase_director_connect(void *objarg, SwigDirector_r_policyBase::SWIG_Callback0_t callback0, SwigDirector_r_policyBase::SWIG_Callback1_t callback1, SwigDirector_r_policyBase::SWIG_Callback2_t callback2, SwigDirector_r_policyBase::SWIG_Callback3_t callback3) {
  pagmoWrap::r_policyBase *obj = (pagmoWrap::r_policyBase *)objarg;
  SwigDirector_r_policyBase *director = static_cast<SwigDirector_r_policyBase *>(obj);
  director->swig_connect_director(callback0, callback1, callback2, callback3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_r_policyPagmoWrapper__SWIG_0() {
  void * jresult ;
  pagmoWrap::r_policyPagmoWrapper *result = 0 ;
  
  result = (pagmoWrap::r_policyPagmoWrapper *)new pagmoWrap::r_policyPagmoWrapper();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_r_policyPagmoWrapper__SWIG_1(void * jarg1) {
  void * jresult ;
  pagmoWrap::r_policyBase *arg1 = (pagmoWrap::r_policyBase *) 0 ;
  pagmoWrap::r_policyPagmoWrapper *result = 0 ;
  
  arg1 = (pagmoWrap::r_policyBase *)jarg1; 
  result = (pagmoWrap::r_policyPagmoWrapper *)new pagmoWrap::r_policyPagmoWrapper(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_r_policyPagmoWrapper__SWIG_2(void * jarg1) {
  void * jresult ;
  pagmoWrap::r_policyPagmoWrapper *arg1 = 0 ;
  pagmoWrap::r_policyPagmoWrapper *result = 0 ;
  
  arg1 = (pagmoWrap::r_policyPagmoWrapper *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pagmoWrap::r_policyPagmoWrapper const & is null", 0);
    return 0;
  } 
  result = (pagmoWrap::r_policyPagmoWrapper *)new pagmoWrap::r_policyPagmoWrapper((pagmoWrap::r_policyPagmoWrapper const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_delete_r_policyPagmoWrapper(void * jarg1) {
  pagmoWrap::r_policyPagmoWrapper *arg1 = (pagmoWrap::r_policyPagmoWrapper *) 0 ;
  
  arg1 = (pagmoWrap::r_policyPagmoWrapper *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_r_policyPagmoWrapper_setBasePolicy(void * jarg1, void * jarg2) {
  pagmoWrap::r_policyPagmoWrapper *arg1 = (pagmoWrap::r_policyPagmoWrapper *) 0 ;
  pagmoWrap::r_policyBase *arg2 = (pagmoWrap::r_policyBase *) 0 ;
  
  arg1 = (pagmoWrap::r_policyPagmoWrapper *)jarg1; 
  arg2 = (pagmoWrap::r_policyBase *)jarg2; 
  (arg1)->setBasePolicy(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_r_policyPagmoWrapper_getBasePolicy(void * jarg1) {
  void * jresult ;
  pagmoWrap::r_policyPagmoWrapper *arg1 = (pagmoWrap::r_policyPagmoWrapper *) 0 ;
  pagmoWrap::r_policyBase *result = 0 ;
  
  arg1 = (pagmoWrap::r_policyPagmoWrapper *)jarg1; 
  result = (pagmoWrap::r_policyBase *)(arg1)->getBasePolicy();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_r_policyPagmoWrapper_replace(void * jarg1, void * jarg2, unsigned long jarg3, unsigned long jarg4, unsigned long jarg5, unsigned long jarg6, unsigned long jarg7, void * jarg8, void * jarg9) {
  void * jresult ;
  pagmoWrap::r_policyPagmoWrapper *arg1 = (pagmoWrap::r_policyPagmoWrapper *) 0 ;
  pagmo::individuals_group_t *arg2 = 0 ;
  pagmo::vector_double::size_type *arg3 = 0 ;
  pagmo::vector_double::size_type *arg4 = 0 ;
  pagmo::vector_double::size_type *arg5 = 0 ;
  pagmo::vector_double::size_type *arg6 = 0 ;
  pagmo::vector_double::size_type *arg7 = 0 ;
  pagmo::vector_double *arg8 = 0 ;
  pagmo::individuals_group_t *arg9 = 0 ;
  pagmo::vector_double::size_type temp3 ;
  pagmo::vector_double::size_type temp4 ;
  pagmo::vector_double::size_type temp5 ;
  pagmo::vector_double::size_type temp6 ;
  pagmo::vector_double::size_type temp7 ;
  SwigValueWrapper< std::tuple< std::vector< unsigned long long >,std::vector< std::vector< double > >,std::vector< std::vector< double > > > > result;
  
  arg1 = (pagmoWrap::r_policyPagmoWrapper *)jarg1; 
  arg2 = (pagmo::individuals_group_t *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pagmo::individuals_group_t const & is null", 0);
    return 0;
  } 
  temp3 = (pagmo::vector_double::size_type)jarg3; 
  arg3 = &temp3; 
  temp4 = (pagmo::vector_double::size_type)jarg4; 
  arg4 = &temp4; 
  temp5 = (pagmo::vector_double::size_type)jarg5; 
  arg5 = &temp5; 
  temp6 = (pagmo::vector_double::size_type)jarg6; 
  arg6 = &temp6; 
  temp7 = (pagmo::vector_double::size_type)jarg7; 
  arg7 = &temp7; 
  arg8 = (pagmo::vector_double *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pagmo::vector_double const & is null", 0);
    return 0;
  } 
  arg9 = (pagmo::individuals_group_t *)jarg9;
  if (!arg9) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pagmo::individuals_group_t const & is null", 0);
    return 0;
  } 
  result = ((pagmoWrap::r_policyPagmoWrapper const *)arg1)->replace((pagmo::individuals_group_t const &)*arg2,(pagmo::vector_double::size_type const &)*arg3,(pagmo::vector_double::size_type const &)*arg4,(pagmo::vector_double::size_type const &)*arg5,(pagmo::vector_double::size_type const &)*arg6,(pagmo::vector_double::size_type const &)*arg7,(pagmo::vector_double const &)*arg8,(pagmo::individuals_group_t const &)*arg9);
  jresult = new pagmo::individuals_group_t(result); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_pagmo_r_policyPagmoWrapper_get_name(void * jarg1) {
  const char * jresult ;
  pagmoWrap::r_policyPagmoWrapper *arg1 = (pagmoWrap::r_policyPagmoWrapper *) 0 ;
  std::string result;
  
  arg1 = (pagmoWrap::r_policyPagmoWrapper *)jarg1; 
  result = ((pagmoWrap::r_policyPagmoWrapper const *)arg1)->get_name();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_pagmo_r_policyPagmoWrapper_get_extra_info(void * jarg1) {
  const char * jresult ;
  pagmoWrap::r_policyPagmoWrapper *arg1 = (pagmoWrap::r_policyPagmoWrapper *) 0 ;
  std::string result;
  
  arg1 = (pagmoWrap::r_policyPagmoWrapper *)jarg1; 
  result = ((pagmoWrap::r_policyPagmoWrapper const *)arg1)->get_extra_info();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pagmo_r_policyPagmoWrapper_is_valid(void * jarg1) {
  unsigned int jresult ;
  pagmoWrap::r_policyPagmoWrapper *arg1 = (pagmoWrap::r_policyPagmoWrapper *) 0 ;
  bool result;
  
  arg1 = (pagmoWrap::r_policyPagmoWrapper *)jarg1; 
  result = (bool)((pagmoWrap::r_policyPagmoWrapper const *)arg1)->is_valid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_delete_s_policyBase(void * jarg1) {
  pagmoWrap::s_policyBase *arg1 = (pagmoWrap::s_policyBase *) 0 ;
  
  arg1 = (pagmoWrap::s_policyBase *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_s_policyBase_select(void * jarg1, void * jarg2, unsigned long jarg3, unsigned long jarg4, unsigned long jarg5, unsigned long jarg6, unsigned long jarg7, void * jarg8) {
  void * jresult ;
  pagmoWrap::s_policyBase *arg1 = (pagmoWrap::s_policyBase *) 0 ;
  pagmo::individuals_group_t *arg2 = 0 ;
  pagmo::vector_double::size_type *arg3 = 0 ;
  pagmo::vector_double::size_type *arg4 = 0 ;
  pagmo::vector_double::size_type *arg5 = 0 ;
  pagmo::vector_double::size_type *arg6 = 0 ;
  pagmo::vector_double::size_type *arg7 = 0 ;
  pagmo::vector_double *arg8 = 0 ;
  pagmo::vector_double::size_type temp3 ;
  pagmo::vector_double::size_type temp4 ;
  pagmo::vector_double::size_type temp5 ;
  pagmo::vector_double::size_type temp6 ;
  pagmo::vector_double::size_type temp7 ;
  SwigValueWrapper< std::tuple< std::vector< unsigned long long >,std::vector< std::vector< double > >,std::vector< std::vector< double > > > > result;
  
  arg1 = (pagmoWrap::s_policyBase *)jarg1; 
  arg2 = (pagmo::individuals_group_t *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pagmo::individuals_group_t const & is null", 0);
    return 0;
  } 
  temp3 = (pagmo::vector_double::size_type)jarg3; 
  arg3 = &temp3; 
  temp4 = (pagmo::vector_double::size_type)jarg4; 
  arg4 = &temp4; 
  temp5 = (pagmo::vector_double::size_type)jarg5; 
  arg5 = &temp5; 
  temp6 = (pagmo::vector_double::size_type)jarg6; 
  arg6 = &temp6; 
  temp7 = (pagmo::vector_double::size_type)jarg7; 
  arg7 = &temp7; 
  arg8 = (pagmo::vector_double *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pagmo::vector_double const & is null", 0);
    return 0;
  } 
  result = ((pagmoWrap::s_policyBase const *)arg1)->select((pagmo::individuals_group_t const &)*arg2,(pagmo::vector_double::size_type const &)*arg3,(pagmo::vector_double::size_type const &)*arg4,(pagmo::vector_double::size_type const &)*arg5,(pagmo::vector_double::size_type const &)*arg6,(pagmo::vector_double::size_type const &)*arg7,(pagmo::vector_double const &)*arg8);
  jresult = new pagmo::individuals_group_t(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_s_policyBase_selectSwigExplicits_policyBase(void * jarg1, void * jarg2, unsigned long jarg3, unsigned long jarg4, unsigned long jarg5, unsigned long jarg6, unsigned long jarg7, void * jarg8) {
  void * jresult ;
  pagmoWrap::s_policyBase *arg1 = (pagmoWrap::s_policyBase *) 0 ;
  pagmo::individuals_group_t *arg2 = 0 ;
  pagmo::vector_double::size_type *arg3 = 0 ;
  pagmo::vector_double::size_type *arg4 = 0 ;
  pagmo::vector_double::size_type *arg5 = 0 ;
  pagmo::vector_double::size_type *arg6 = 0 ;
  pagmo::vector_double::size_type *arg7 = 0 ;
  pagmo::vector_double *arg8 = 0 ;
  pagmo::vector_double::size_type temp3 ;
  pagmo::vector_double::size_type temp4 ;
  pagmo::vector_double::size_type temp5 ;
  pagmo::vector_double::size_type temp6 ;
  pagmo::vector_double::size_type temp7 ;
  SwigValueWrapper< std::tuple< std::vector< unsigned long long >,std::vector< std::vector< double > >,std::vector< std::vector< double > > > > result;
  
  arg1 = (pagmoWrap::s_policyBase *)jarg1; 
  arg2 = (pagmo::individuals_group_t *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pagmo::individuals_group_t const & is null", 0);
    return 0;
  } 
  temp3 = (pagmo::vector_double::size_type)jarg3; 
  arg3 = &temp3; 
  temp4 = (pagmo::vector_double::size_type)jarg4; 
  arg4 = &temp4; 
  temp5 = (pagmo::vector_double::size_type)jarg5; 
  arg5 = &temp5; 
  temp6 = (pagmo::vector_double::size_type)jarg6; 
  arg6 = &temp6; 
  temp7 = (pagmo::vector_double::size_type)jarg7; 
  arg7 = &temp7; 
  arg8 = (pagmo::vector_double *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pagmo::vector_double const & is null", 0);
    return 0;
  } 
  result = ((pagmoWrap::s_policyBase const *)arg1)->pagmoWrap::s_policyBase::select((pagmo::individuals_group_t const &)*arg2,(pagmo::vector_double::size_type const &)*arg3,(pagmo::vector_double::size_type const &)*arg4,(pagmo::vector_double::size_type const &)*arg5,(pagmo::vector_double::size_type const &)*arg6,(pagmo::vector_double::size_type const &)*arg7,(pagmo::vector_double const &)*arg8);
  jresult = new pagmo::individuals_group_t(result); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_pagmo_s_policyBase_get_name(void * jarg1) {
  const char * jresult ;
  pagmoWrap::s_policyBase *arg1 = (pagmoWrap::s_policyBase *) 0 ;
  std::string result;
  
  arg1 = (pagmoWrap::s_policyBase *)jarg1; 
  result = ((pagmoWrap::s_policyBase const *)arg1)->get_name();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_pagmo_s_policyBase_get_nameSwigExplicits_policyBase(void * jarg1) {
  const char * jresult ;
  pagmoWrap::s_policyBase *arg1 = (pagmoWrap::s_policyBase *) 0 ;
  std::string result;
  
  arg1 = (pagmoWrap::s_policyBase *)jarg1; 
  result = ((pagmoWrap::s_policyBase const *)arg1)->pagmoWrap::s_policyBase::get_name();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_pagmo_s_policyBase_get_extra_info(void * jarg1) {
  const char * jresult ;
  pagmoWrap::s_policyBase *arg1 = (pagmoWrap::s_policyBase *) 0 ;
  std::string result;
  
  arg1 = (pagmoWrap::s_policyBase *)jarg1; 
  result = ((pagmoWrap::s_policyBase const *)arg1)->get_extra_info();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_pagmo_s_policyBase_get_extra_infoSwigExplicits_policyBase(void * jarg1) {
  const char * jresult ;
  pagmoWrap::s_policyBase *arg1 = (pagmoWrap::s_policyBase *) 0 ;
  std::string result;
  
  arg1 = (pagmoWrap::s_policyBase *)jarg1; 
  result = ((pagmoWrap::s_policyBase const *)arg1)->pagmoWrap::s_policyBase::get_extra_info();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pagmo_s_policyBase_is_valid(void * jarg1) {
  unsigned int jresult ;
  pagmoWrap::s_policyBase *arg1 = (pagmoWrap::s_policyBase *) 0 ;
  bool result;
  
  arg1 = (pagmoWrap::s_policyBase *)jarg1; 
  result = (bool)((pagmoWrap::s_policyBase const *)arg1)->is_valid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pagmo_s_policyBase_is_validSwigExplicits_policyBase(void * jarg1) {
  unsigned int jresult ;
  pagmoWrap::s_policyBase *arg1 = (pagmoWrap::s_policyBase *) 0 ;
  bool result;
  
  arg1 = (pagmoWrap::s_policyBase *)jarg1; 
  result = (bool)((pagmoWrap::s_policyBase const *)arg1)->pagmoWrap::s_policyBase::is_valid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_s_policyBase() {
  void * jresult ;
  pagmoWrap::s_policyBase *result = 0 ;
  
  result = (pagmoWrap::s_policyBase *)new SwigDirector_s_policyBase();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_s_policyBase_director_connect(void *objarg, SwigDirector_s_policyBase::SWIG_Callback0_t callback0, SwigDirector_s_policyBase::SWIG_Callback1_t callback1, SwigDirector_s_policyBase::SWIG_Callback2_t callback2, SwigDirector_s_policyBase::SWIG_Callback3_t callback3) {
  pagmoWrap::s_policyBase *obj = (pagmoWrap::s_policyBase *)objarg;
  SwigDirector_s_policyBase *director = static_cast<SwigDirector_s_policyBase *>(obj);
  director->swig_connect_director(callback0, callback1, callback2, callback3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_s_policyPagmoWrapper() {
  void * jresult ;
  pagmoWrap::s_policyPagmoWrapper *result = 0 ;
  
  result = (pagmoWrap::s_policyPagmoWrapper *)new pagmoWrap::s_policyPagmoWrapper();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_s_policyPagmoWrapper_setBasePolicy(void * jarg1, void * jarg2) {
  pagmoWrap::s_policyPagmoWrapper *arg1 = (pagmoWrap::s_policyPagmoWrapper *) 0 ;
  pagmoWrap::s_policyBase *arg2 = (pagmoWrap::s_policyBase *) 0 ;
  
  arg1 = (pagmoWrap::s_policyPagmoWrapper *)jarg1; 
  arg2 = (pagmoWrap::s_policyBase *)jarg2; 
  (arg1)->setBasePolicy(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_s_policyPagmoWrapper_getBasePolicy(void * jarg1) {
  void * jresult ;
  pagmoWrap::s_policyPagmoWrapper *arg1 = (pagmoWrap::s_policyPagmoWrapper *) 0 ;
  pagmoWrap::s_policyBase *result = 0 ;
  
  arg1 = (pagmoWrap::s_policyPagmoWrapper *)jarg1; 
  result = (pagmoWrap::s_policyBase *)(arg1)->getBasePolicy();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_s_policyPagmoWrapper_select(void * jarg1, void * jarg2, unsigned long jarg3, unsigned long jarg4, unsigned long jarg5, unsigned long jarg6, unsigned long jarg7, void * jarg8) {
  void * jresult ;
  pagmoWrap::s_policyPagmoWrapper *arg1 = (pagmoWrap::s_policyPagmoWrapper *) 0 ;
  pagmo::individuals_group_t *arg2 = 0 ;
  pagmo::vector_double::size_type *arg3 = 0 ;
  pagmo::vector_double::size_type *arg4 = 0 ;
  pagmo::vector_double::size_type *arg5 = 0 ;
  pagmo::vector_double::size_type *arg6 = 0 ;
  pagmo::vector_double::size_type *arg7 = 0 ;
  pagmo::vector_double *arg8 = 0 ;
  pagmo::vector_double::size_type temp3 ;
  pagmo::vector_double::size_type temp4 ;
  pagmo::vector_double::size_type temp5 ;
  pagmo::vector_double::size_type temp6 ;
  pagmo::vector_double::size_type temp7 ;
  SwigValueWrapper< std::tuple< std::vector< unsigned long long >,std::vector< std::vector< double > >,std::vector< std::vector< double > > > > result;
  
  arg1 = (pagmoWrap::s_policyPagmoWrapper *)jarg1; 
  arg2 = (pagmo::individuals_group_t *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pagmo::individuals_group_t const & is null", 0);
    return 0;
  } 
  temp3 = (pagmo::vector_double::size_type)jarg3; 
  arg3 = &temp3; 
  temp4 = (pagmo::vector_double::size_type)jarg4; 
  arg4 = &temp4; 
  temp5 = (pagmo::vector_double::size_type)jarg5; 
  arg5 = &temp5; 
  temp6 = (pagmo::vector_double::size_type)jarg6; 
  arg6 = &temp6; 
  temp7 = (pagmo::vector_double::size_type)jarg7; 
  arg7 = &temp7; 
  arg8 = (pagmo::vector_double *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pagmo::vector_double const & is null", 0);
    return 0;
  } 
  result = ((pagmoWrap::s_policyPagmoWrapper const *)arg1)->select((pagmo::individuals_group_t const &)*arg2,(pagmo::vector_double::size_type const &)*arg3,(pagmo::vector_double::size_type const &)*arg4,(pagmo::vector_double::size_type const &)*arg5,(pagmo::vector_double::size_type const &)*arg6,(pagmo::vector_double::size_type const &)*arg7,(pagmo::vector_double const &)*arg8);
  jresult = new pagmo::individuals_group_t(result); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_pagmo_s_policyPagmoWrapper_get_name(void * jarg1) {
  const char * jresult ;
  pagmoWrap::s_policyPagmoWrapper *arg1 = (pagmoWrap::s_policyPagmoWrapper *) 0 ;
  std::string result;
  
  arg1 = (pagmoWrap::s_policyPagmoWrapper *)jarg1; 
  result = ((pagmoWrap::s_policyPagmoWrapper const *)arg1)->get_name();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_pagmo_s_policyPagmoWrapper_get_extra_info(void * jarg1) {
  const char * jresult ;
  pagmoWrap::s_policyPagmoWrapper *arg1 = (pagmoWrap::s_policyPagmoWrapper *) 0 ;
  std::string result;
  
  arg1 = (pagmoWrap::s_policyPagmoWrapper *)jarg1; 
  result = ((pagmoWrap::s_policyPagmoWrapper const *)arg1)->get_extra_info();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pagmo_s_policyPagmoWrapper_is_valid(void * jarg1) {
  unsigned int jresult ;
  pagmoWrap::s_policyPagmoWrapper *arg1 = (pagmoWrap::s_policyPagmoWrapper *) 0 ;
  bool result;
  
  arg1 = (pagmoWrap::s_policyPagmoWrapper *)jarg1; 
  result = (bool)((pagmoWrap::s_policyPagmoWrapper const *)arg1)->is_valid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_delete_s_policyPagmoWrapper(void * jarg1) {
  pagmoWrap::s_policyPagmoWrapper *arg1 = (pagmoWrap::s_policyPagmoWrapper *) 0 ;
  
  arg1 = (pagmoWrap::s_policyPagmoWrapper *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_DoubleVector_Clear(void * jarg1) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_DoubleVector_Add(void * jarg1, double jarg2) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((double const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pagmo_DoubleVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type result;
  
  arg1 = (std::vector< double > *)jarg1; 
  result = ((std::vector< double > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pagmo_DoubleVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type result;
  
  arg1 = (std::vector< double > *)jarg1; 
  result = ((std::vector< double > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_DoubleVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (std::vector< double >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_DoubleVector__SWIG_0() {
  void * jresult ;
  std::vector< double > *result = 0 ;
  
  result = (std::vector< double > *)new std::vector< double >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_DoubleVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< double > *arg1 = 0 ;
  std::vector< double > *result = 0 ;
  
  arg1 = (std::vector< double > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > const & is null", 0);
    return 0;
  } 
  result = (std::vector< double > *)new std::vector< double >((std::vector< double > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_DoubleVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< double > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< double > *)new_std_vector_Sl_double_Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_pagmo_DoubleVector_getitemcopy(void * jarg1, int jarg2) {
  double jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  double result;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (double)std_vector_Sl_double_Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_pagmo_DoubleVector_getitem(void * jarg1, int jarg2) {
  double jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  std::vector< double >::value_type *result = 0 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< double >::value_type *) &std_vector_Sl_double_Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_DoubleVector_setitem(void * jarg1, int jarg2, double jarg3) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  double *arg3 = 0 ;
  double temp3 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (double)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_double_Sg__setitem(arg1,arg2,(double const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_DoubleVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double > *arg2 = 0 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (std::vector< double > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > const & is null", 0);
    return ;
  } 
  std_vector_Sl_double_Sg__AddRange(arg1,(std::vector< double > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_DoubleVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< double > *result = 0 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< double > *)std_vector_Sl_double_Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_DoubleVector_Insert(void * jarg1, int jarg2, double jarg3) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  double *arg3 = 0 ;
  double temp3 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (double)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_double_Sg__Insert(arg1,arg2,(double const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_DoubleVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  std::vector< double > *arg3 = 0 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< double > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_double_Sg__InsertRange(arg1,arg2,(std::vector< double > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_DoubleVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_double_Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_DoubleVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_double_Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_DoubleVector_Repeat(double jarg1, int jarg2) {
  void * jresult ;
  double *arg1 = 0 ;
  int arg2 ;
  double temp1 ;
  std::vector< double > *result = 0 ;
  
  temp1 = (double)jarg1; 
  arg1 = &temp1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< double > *)std_vector_Sl_double_Sg__Repeat((double const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_DoubleVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  std_vector_Sl_double_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_DoubleVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_double_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_DoubleVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  std::vector< double > *arg3 = 0 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< double > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_double_Sg__SetRange(arg1,arg2,(std::vector< double > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pagmo_DoubleVector_Contains(void * jarg1, double jarg2) {
  unsigned int jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  bool result;
  
  arg1 = (std::vector< double > *)jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_double_Sg__Contains(arg1,(double const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pagmo_DoubleVector_IndexOf(void * jarg1, double jarg2) {
  int jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  int result;
  
  arg1 = (std::vector< double > *)jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_double_Sg__IndexOf(arg1,(double const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pagmo_DoubleVector_LastIndexOf(void * jarg1, double jarg2) {
  int jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  int result;
  
  arg1 = (std::vector< double > *)jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_double_Sg__LastIndexOf(arg1,(double const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pagmo_DoubleVector_Remove(void * jarg1, double jarg2) {
  unsigned int jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  bool result;
  
  arg1 = (std::vector< double > *)jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_double_Sg__Remove(arg1,(double const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_delete_DoubleVector(void * jarg1) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_ULongLongVector_Clear(void * jarg1) {
  std::vector< unsigned long long > *arg1 = (std::vector< unsigned long long > *) 0 ;
  
  arg1 = (std::vector< unsigned long long > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_ULongLongVector_Add(void * jarg1, unsigned long long jarg2) {
  std::vector< unsigned long long > *arg1 = (std::vector< unsigned long long > *) 0 ;
  unsigned long long *arg2 = 0 ;
  unsigned long long temp2 ;
  
  arg1 = (std::vector< unsigned long long > *)jarg1; 
  temp2 = (unsigned long long)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((unsigned long long const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pagmo_ULongLongVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< unsigned long long > *arg1 = (std::vector< unsigned long long > *) 0 ;
  std::vector< unsigned long long >::size_type result;
  
  arg1 = (std::vector< unsigned long long > *)jarg1; 
  result = ((std::vector< unsigned long long > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pagmo_ULongLongVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< unsigned long long > *arg1 = (std::vector< unsigned long long > *) 0 ;
  std::vector< unsigned long long >::size_type result;
  
  arg1 = (std::vector< unsigned long long > *)jarg1; 
  result = ((std::vector< unsigned long long > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_ULongLongVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< unsigned long long > *arg1 = (std::vector< unsigned long long > *) 0 ;
  std::vector< unsigned long long >::size_type arg2 ;
  
  arg1 = (std::vector< unsigned long long > *)jarg1; 
  arg2 = (std::vector< unsigned long long >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_ULongLongVector__SWIG_0() {
  void * jresult ;
  std::vector< unsigned long long > *result = 0 ;
  
  result = (std::vector< unsigned long long > *)new std::vector< unsigned long long >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_ULongLongVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< unsigned long long > *arg1 = 0 ;
  std::vector< unsigned long long > *result = 0 ;
  
  arg1 = (std::vector< unsigned long long > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< unsigned long long > const & is null", 0);
    return 0;
  } 
  result = (std::vector< unsigned long long > *)new std::vector< unsigned long long >((std::vector< unsigned long long > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_ULongLongVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< unsigned long long > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< unsigned long long > *)new_std_vector_Sl_unsigned_SS_long_SS_long_Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_pagmo_ULongLongVector_getitemcopy(void * jarg1, int jarg2) {
  unsigned long long jresult ;
  std::vector< unsigned long long > *arg1 = (std::vector< unsigned long long > *) 0 ;
  int arg2 ;
  unsigned long long result;
  
  arg1 = (std::vector< unsigned long long > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (unsigned long long)std_vector_Sl_unsigned_SS_long_SS_long_Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_pagmo_ULongLongVector_getitem(void * jarg1, int jarg2) {
  unsigned long long jresult ;
  std::vector< unsigned long long > *arg1 = (std::vector< unsigned long long > *) 0 ;
  int arg2 ;
  std::vector< unsigned long long >::value_type *result = 0 ;
  
  arg1 = (std::vector< unsigned long long > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< unsigned long long >::value_type *) &std_vector_Sl_unsigned_SS_long_SS_long_Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_ULongLongVector_setitem(void * jarg1, int jarg2, unsigned long long jarg3) {
  std::vector< unsigned long long > *arg1 = (std::vector< unsigned long long > *) 0 ;
  int arg2 ;
  unsigned long long *arg3 = 0 ;
  unsigned long long temp3 ;
  
  arg1 = (std::vector< unsigned long long > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (unsigned long long)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_unsigned_SS_long_SS_long_Sg__setitem(arg1,arg2,(unsigned long long const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_ULongLongVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< unsigned long long > *arg1 = (std::vector< unsigned long long > *) 0 ;
  std::vector< unsigned long long > *arg2 = 0 ;
  
  arg1 = (std::vector< unsigned long long > *)jarg1; 
  arg2 = (std::vector< unsigned long long > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< unsigned long long > const & is null", 0);
    return ;
  } 
  std_vector_Sl_unsigned_SS_long_SS_long_Sg__AddRange(arg1,(std::vector< unsigned long long > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_ULongLongVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< unsigned long long > *arg1 = (std::vector< unsigned long long > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< unsigned long long > *result = 0 ;
  
  arg1 = (std::vector< unsigned long long > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< unsigned long long > *)std_vector_Sl_unsigned_SS_long_SS_long_Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_ULongLongVector_Insert(void * jarg1, int jarg2, unsigned long long jarg3) {
  std::vector< unsigned long long > *arg1 = (std::vector< unsigned long long > *) 0 ;
  int arg2 ;
  unsigned long long *arg3 = 0 ;
  unsigned long long temp3 ;
  
  arg1 = (std::vector< unsigned long long > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (unsigned long long)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_unsigned_SS_long_SS_long_Sg__Insert(arg1,arg2,(unsigned long long const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_ULongLongVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< unsigned long long > *arg1 = (std::vector< unsigned long long > *) 0 ;
  int arg2 ;
  std::vector< unsigned long long > *arg3 = 0 ;
  
  arg1 = (std::vector< unsigned long long > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< unsigned long long > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< unsigned long long > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_unsigned_SS_long_SS_long_Sg__InsertRange(arg1,arg2,(std::vector< unsigned long long > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_ULongLongVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< unsigned long long > *arg1 = (std::vector< unsigned long long > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< unsigned long long > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_unsigned_SS_long_SS_long_Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_ULongLongVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< unsigned long long > *arg1 = (std::vector< unsigned long long > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< unsigned long long > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_unsigned_SS_long_SS_long_Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_ULongLongVector_Repeat(unsigned long long jarg1, int jarg2) {
  void * jresult ;
  unsigned long long *arg1 = 0 ;
  int arg2 ;
  unsigned long long temp1 ;
  std::vector< unsigned long long > *result = 0 ;
  
  temp1 = (unsigned long long)jarg1; 
  arg1 = &temp1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< unsigned long long > *)std_vector_Sl_unsigned_SS_long_SS_long_Sg__Repeat((unsigned long long const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_ULongLongVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< unsigned long long > *arg1 = (std::vector< unsigned long long > *) 0 ;
  
  arg1 = (std::vector< unsigned long long > *)jarg1; 
  std_vector_Sl_unsigned_SS_long_SS_long_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_ULongLongVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< unsigned long long > *arg1 = (std::vector< unsigned long long > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< unsigned long long > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_unsigned_SS_long_SS_long_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_ULongLongVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< unsigned long long > *arg1 = (std::vector< unsigned long long > *) 0 ;
  int arg2 ;
  std::vector< unsigned long long > *arg3 = 0 ;
  
  arg1 = (std::vector< unsigned long long > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< unsigned long long > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< unsigned long long > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_unsigned_SS_long_SS_long_Sg__SetRange(arg1,arg2,(std::vector< unsigned long long > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pagmo_ULongLongVector_Contains(void * jarg1, unsigned long long jarg2) {
  unsigned int jresult ;
  std::vector< unsigned long long > *arg1 = (std::vector< unsigned long long > *) 0 ;
  unsigned long long *arg2 = 0 ;
  unsigned long long temp2 ;
  bool result;
  
  arg1 = (std::vector< unsigned long long > *)jarg1; 
  temp2 = (unsigned long long)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_unsigned_SS_long_SS_long_Sg__Contains(arg1,(unsigned long long const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pagmo_ULongLongVector_IndexOf(void * jarg1, unsigned long long jarg2) {
  int jresult ;
  std::vector< unsigned long long > *arg1 = (std::vector< unsigned long long > *) 0 ;
  unsigned long long *arg2 = 0 ;
  unsigned long long temp2 ;
  int result;
  
  arg1 = (std::vector< unsigned long long > *)jarg1; 
  temp2 = (unsigned long long)jarg2; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_unsigned_SS_long_SS_long_Sg__IndexOf(arg1,(unsigned long long const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pagmo_ULongLongVector_LastIndexOf(void * jarg1, unsigned long long jarg2) {
  int jresult ;
  std::vector< unsigned long long > *arg1 = (std::vector< unsigned long long > *) 0 ;
  unsigned long long *arg2 = 0 ;
  unsigned long long temp2 ;
  int result;
  
  arg1 = (std::vector< unsigned long long > *)jarg1; 
  temp2 = (unsigned long long)jarg2; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_unsigned_SS_long_SS_long_Sg__LastIndexOf(arg1,(unsigned long long const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pagmo_ULongLongVector_Remove(void * jarg1, unsigned long long jarg2) {
  unsigned int jresult ;
  std::vector< unsigned long long > *arg1 = (std::vector< unsigned long long > *) 0 ;
  unsigned long long *arg2 = 0 ;
  unsigned long long temp2 ;
  bool result;
  
  arg1 = (std::vector< unsigned long long > *)jarg1; 
  temp2 = (unsigned long long)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_unsigned_SS_long_SS_long_Sg__Remove(arg1,(unsigned long long const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_delete_ULongLongVector(void * jarg1) {
  std::vector< unsigned long long > *arg1 = (std::vector< unsigned long long > *) 0 ;
  
  arg1 = (std::vector< unsigned long long > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_VectorDoubleVector_Clear(void * jarg1) {
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  
  arg1 = (std::vector< std::vector< double > > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_VectorDoubleVector_Add(void * jarg1, void * jarg2) {
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< double > *arg2 = 0 ;
  
  arg1 = (std::vector< std::vector< double > > *)jarg1; 
  arg2 = (std::vector< double > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > const & is null", 0);
    return ;
  } 
  (arg1)->push_back((std::vector< double > const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pagmo_VectorDoubleVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< std::vector< double > >::size_type result;
  
  arg1 = (std::vector< std::vector< double > > *)jarg1; 
  result = ((std::vector< std::vector< double > > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pagmo_VectorDoubleVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< std::vector< double > >::size_type result;
  
  arg1 = (std::vector< std::vector< double > > *)jarg1; 
  result = ((std::vector< std::vector< double > > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_VectorDoubleVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< std::vector< double > >::size_type arg2 ;
  
  arg1 = (std::vector< std::vector< double > > *)jarg1; 
  arg2 = (std::vector< std::vector< double > >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_VectorDoubleVector__SWIG_0() {
  void * jresult ;
  std::vector< std::vector< double > > *result = 0 ;
  
  result = (std::vector< std::vector< double > > *)new std::vector< std::vector< double > >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_VectorDoubleVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< std::vector< double > > *arg1 = 0 ;
  std::vector< std::vector< double > > *result = 0 ;
  
  arg1 = (std::vector< std::vector< double > > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::vector< double > > const & is null", 0);
    return 0;
  } 
  result = (std::vector< std::vector< double > > *)new std::vector< std::vector< double > >((std::vector< std::vector< double > > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_VectorDoubleVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< std::vector< double > > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< std::vector< double > > *)new_std_vector_Sl_std_vector_Sl_double_Sg__Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_VectorDoubleVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  int arg2 ;
  std::vector< double > result;
  
  arg1 = (std::vector< std::vector< double > > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_std_vector_Sl_double_Sg__Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = new std::vector< double >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_VectorDoubleVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  int arg2 ;
  std::vector< std::vector< double > >::value_type *result = 0 ;
  
  arg1 = (std::vector< std::vector< double > > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::vector< double > >::value_type *) &std_vector_Sl_std_vector_Sl_double_Sg__Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_VectorDoubleVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  int arg2 ;
  std::vector< double > *arg3 = 0 ;
  
  arg1 = (std::vector< std::vector< double > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< double > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_std_vector_Sl_double_Sg__Sg__setitem(arg1,arg2,(std::vector< double > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_VectorDoubleVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< std::vector< double > > *arg2 = 0 ;
  
  arg1 = (std::vector< std::vector< double > > *)jarg1; 
  arg2 = (std::vector< std::vector< double > > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::vector< double > > const & is null", 0);
    return ;
  } 
  std_vector_Sl_std_vector_Sl_double_Sg__Sg__AddRange(arg1,(std::vector< std::vector< double > > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_VectorDoubleVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< std::vector< double > > *result = 0 ;
  
  arg1 = (std::vector< std::vector< double > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< std::vector< double > > *)std_vector_Sl_std_vector_Sl_double_Sg__Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_VectorDoubleVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  int arg2 ;
  std::vector< double > *arg3 = 0 ;
  
  arg1 = (std::vector< std::vector< double > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< double > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_std_vector_Sl_double_Sg__Sg__Insert(arg1,arg2,(std::vector< double > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_VectorDoubleVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  int arg2 ;
  std::vector< std::vector< double > > *arg3 = 0 ;
  
  arg1 = (std::vector< std::vector< double > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< std::vector< double > > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::vector< double > > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_std_vector_Sl_double_Sg__Sg__InsertRange(arg1,arg2,(std::vector< std::vector< double > > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_VectorDoubleVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< std::vector< double > > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_std_vector_Sl_double_Sg__Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_VectorDoubleVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< std::vector< double > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_std_vector_Sl_double_Sg__Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_VectorDoubleVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< double > *arg1 = 0 ;
  int arg2 ;
  std::vector< std::vector< double > > *result = 0 ;
  
  arg1 = (std::vector< double > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > const & is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::vector< double > > *)std_vector_Sl_std_vector_Sl_double_Sg__Sg__Repeat((std::vector< double > const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_VectorDoubleVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  
  arg1 = (std::vector< std::vector< double > > *)jarg1; 
  std_vector_Sl_std_vector_Sl_double_Sg__Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_VectorDoubleVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< std::vector< double > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_std_vector_Sl_double_Sg__Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_VectorDoubleVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  int arg2 ;
  std::vector< std::vector< double > > *arg3 = 0 ;
  
  arg1 = (std::vector< std::vector< double > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< std::vector< double > > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::vector< double > > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_std_vector_Sl_double_Sg__Sg__SetRange(arg1,arg2,(std::vector< std::vector< double > > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_delete_VectorDoubleVector(void * jarg1) {
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  
  arg1 = (std::vector< std::vector< double > > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_PairOfDoubleVectors__SWIG_0() {
  void * jresult ;
  std::pair< std::vector< double >,std::vector< double > > *result = 0 ;
  
  result = (std::pair< std::vector< double >,std::vector< double > > *)new std::pair< std::vector< double >,std::vector< double > >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_PairOfDoubleVectors__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  std::vector< double > arg1 ;
  std::vector< double > arg2 ;
  std::vector< double > *argp1 ;
  std::vector< double > *argp2 ;
  std::pair< std::vector< double >,std::vector< double > > *result = 0 ;
  
  argp1 = (std::vector< double > *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::vector< double >", 0);
    return 0;
  }
  arg1 = *argp1; 
  argp2 = (std::vector< double > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::vector< double >", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (std::pair< std::vector< double >,std::vector< double > > *)new std::pair< std::vector< double >,std::vector< double > >(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_PairOfDoubleVectors__SWIG_2(void * jarg1) {
  void * jresult ;
  std::pair< std::vector< double >,std::vector< double > > *arg1 = 0 ;
  std::pair< std::vector< double >,std::vector< double > > *result = 0 ;
  
  arg1 = (std::pair< std::vector< double >,std::vector< double > > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::pair< std::vector< double >,std::vector< double > > const & is null", 0);
    return 0;
  } 
  result = (std::pair< std::vector< double >,std::vector< double > > *)new std::pair< std::vector< double >,std::vector< double > >((std::pair< std::vector< double >,std::vector< double > > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_PairOfDoubleVectors_first_set(void * jarg1, void * jarg2) {
  std::pair< std::vector< double >,std::vector< double > > *arg1 = (std::pair< std::vector< double >,std::vector< double > > *) 0 ;
  std::vector< double > *arg2 = 0 ;
  
  arg1 = (std::pair< std::vector< double >,std::vector< double > > *)jarg1; 
  arg2 = (std::vector< double > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > const & is null", 0);
    return ;
  } 
  if (arg1) (arg1)->first = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_PairOfDoubleVectors_first_get(void * jarg1) {
  void * jresult ;
  std::pair< std::vector< double >,std::vector< double > > *arg1 = (std::pair< std::vector< double >,std::vector< double > > *) 0 ;
  std::vector< double > *result = 0 ;
  
  arg1 = (std::pair< std::vector< double >,std::vector< double > > *)jarg1; 
  result = (std::vector< double > *) & ((arg1)->first);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_PairOfDoubleVectors_second_set(void * jarg1, void * jarg2) {
  std::pair< std::vector< double >,std::vector< double > > *arg1 = (std::pair< std::vector< double >,std::vector< double > > *) 0 ;
  std::vector< double > *arg2 = 0 ;
  
  arg1 = (std::pair< std::vector< double >,std::vector< double > > *)jarg1; 
  arg2 = (std::vector< double > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > const & is null", 0);
    return ;
  } 
  if (arg1) (arg1)->second = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_PairOfDoubleVectors_second_get(void * jarg1) {
  void * jresult ;
  std::pair< std::vector< double >,std::vector< double > > *arg1 = (std::pair< std::vector< double >,std::vector< double > > *) 0 ;
  std::vector< double > *result = 0 ;
  
  arg1 = (std::pair< std::vector< double >,std::vector< double > > *)jarg1; 
  result = (std::vector< double > *) & ((arg1)->second);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_delete_PairOfDoubleVectors(void * jarg1) {
  std::pair< std::vector< double >,std::vector< double > > *arg1 = (std::pair< std::vector< double >,std::vector< double > > *) 0 ;
  
  arg1 = (std::pair< std::vector< double >,std::vector< double > > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_island() {
  void * jresult ;
  pagmo::island *result = 0 ;
  
  result = (pagmo::island *)new pagmo::island();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_delete_island(void * jarg1) {
  pagmo::island *arg1 = (pagmo::island *) 0 ;
  
  arg1 = (pagmo::island *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_population__SWIG_3(void * jarg1, unsigned long jarg2, unsigned int jarg3) {
  void * jresult ;
  pagmoWrap::problemPagomWrapper arg1 ;
  pagmo::population::size_type arg2 ;
  unsigned int arg3 ;
  pagmoWrap::problemPagomWrapper *argp1 ;
  pagmo::population *result = 0 ;
  
  argp1 = (pagmoWrap::problemPagomWrapper *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null pagmoWrap::problemPagomWrapper", 0);
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (pagmo::population::size_type)jarg2; 
  arg3 = (unsigned int)jarg3; 
  result = (pagmo::population *)new pagmo::population(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_population__SWIG_4(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  pagmoWrap::problemPagomWrapper arg1 ;
  pagmo::population::size_type arg2 ;
  pagmoWrap::problemPagomWrapper *argp1 ;
  pagmo::population *result = 0 ;
  
  argp1 = (pagmoWrap::problemPagomWrapper *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null pagmoWrap::problemPagomWrapper", 0);
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (pagmo::population::size_type)jarg2; 
  result = (pagmo::population *)new pagmo::population(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_population__SWIG_5(void * jarg1) {
  void * jresult ;
  pagmoWrap::problemPagomWrapper arg1 ;
  pagmoWrap::problemPagomWrapper *argp1 ;
  pagmo::population *result = 0 ;
  
  argp1 = (pagmoWrap::problemPagomWrapper *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null pagmoWrap::problemPagomWrapper", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = (pagmo::population *)new pagmo::population(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_population_push_back__SWIG_0(void * jarg1, void * jarg2) {
  pagmo::population *arg1 = (pagmo::population *) 0 ;
  pagmo::vector_double *arg2 = 0 ;
  
  arg1 = (pagmo::population *)jarg1; 
  arg2 = (pagmo::vector_double *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pagmo::vector_double const & is null", 0);
    return ;
  } 
  (arg1)->push_back((pagmo::vector_double const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_population_push_back__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  pagmo::population *arg1 = (pagmo::population *) 0 ;
  pagmo::vector_double *arg2 = 0 ;
  pagmo::vector_double *arg3 = 0 ;
  
  arg1 = (pagmo::population *)jarg1; 
  arg2 = (pagmo::vector_double *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pagmo::vector_double const & is null", 0);
    return ;
  } 
  arg3 = (pagmo::vector_double *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pagmo::vector_double const & is null", 0);
    return ;
  } 
  (arg1)->push_back((pagmo::vector_double const &)*arg2,(pagmo::vector_double const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_population_random_decision_vector(void * jarg1) {
  void * jresult ;
  pagmo::population *arg1 = (pagmo::population *) 0 ;
  pagmo::vector_double result;
  
  arg1 = (pagmo::population *)jarg1; 
  result = ((pagmo::population const *)arg1)->random_decision_vector();
  jresult = new pagmo::vector_double(result); 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pagmo_population_best_idx__SWIG_0(void * jarg1) {
  unsigned long jresult ;
  pagmo::population *arg1 = (pagmo::population *) 0 ;
  pagmo::population::size_type result;
  
  arg1 = (pagmo::population *)jarg1; 
  result = ((pagmo::population const *)arg1)->best_idx();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pagmo_population_best_idx__SWIG_1(void * jarg1, void * jarg2) {
  unsigned long jresult ;
  pagmo::population *arg1 = (pagmo::population *) 0 ;
  pagmo::vector_double *arg2 = 0 ;
  pagmo::population::size_type result;
  
  arg1 = (pagmo::population *)jarg1; 
  arg2 = (pagmo::vector_double *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pagmo::vector_double const & is null", 0);
    return 0;
  } 
  result = ((pagmo::population const *)arg1)->best_idx((pagmo::vector_double const &)*arg2);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pagmo_population_best_idx__SWIG_2(void * jarg1, double jarg2) {
  unsigned long jresult ;
  pagmo::population *arg1 = (pagmo::population *) 0 ;
  double arg2 ;
  pagmo::population::size_type result;
  
  arg1 = (pagmo::population *)jarg1; 
  arg2 = (double)jarg2; 
  result = ((pagmo::population const *)arg1)->best_idx(arg2);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pagmo_population_worst_idx__SWIG_0(void * jarg1) {
  unsigned long jresult ;
  pagmo::population *arg1 = (pagmo::population *) 0 ;
  pagmo::population::size_type result;
  
  arg1 = (pagmo::population *)jarg1; 
  result = ((pagmo::population const *)arg1)->worst_idx();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pagmo_population_worst_idx__SWIG_1(void * jarg1, void * jarg2) {
  unsigned long jresult ;
  pagmo::population *arg1 = (pagmo::population *) 0 ;
  pagmo::vector_double *arg2 = 0 ;
  pagmo::population::size_type result;
  
  arg1 = (pagmo::population *)jarg1; 
  arg2 = (pagmo::vector_double *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pagmo::vector_double const & is null", 0);
    return 0;
  } 
  result = ((pagmo::population const *)arg1)->worst_idx((pagmo::vector_double const &)*arg2);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pagmo_population_worst_idx__SWIG_2(void * jarg1, double jarg2) {
  unsigned long jresult ;
  pagmo::population *arg1 = (pagmo::population *) 0 ;
  double arg2 ;
  pagmo::population::size_type result;
  
  arg1 = (pagmo::population *)jarg1; 
  arg2 = (double)jarg2; 
  result = ((pagmo::population const *)arg1)->worst_idx(arg2);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_population_champion_x(void * jarg1) {
  void * jresult ;
  pagmo::population *arg1 = (pagmo::population *) 0 ;
  pagmo::vector_double result;
  
  arg1 = (pagmo::population *)jarg1; 
  result = ((pagmo::population const *)arg1)->champion_x();
  jresult = new pagmo::vector_double(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_population_champion_f(void * jarg1) {
  void * jresult ;
  pagmo::population *arg1 = (pagmo::population *) 0 ;
  pagmo::vector_double result;
  
  arg1 = (pagmo::population *)jarg1; 
  result = ((pagmo::population const *)arg1)->champion_f();
  jresult = new pagmo::vector_double(result); 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pagmo_population_size(void * jarg1) {
  unsigned long jresult ;
  pagmo::population *arg1 = (pagmo::population *) 0 ;
  pagmo::population::size_type result;
  
  arg1 = (pagmo::population *)jarg1; 
  result = ((pagmo::population const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_population_set_xf(void * jarg1, unsigned long jarg2, void * jarg3, void * jarg4) {
  pagmo::population *arg1 = (pagmo::population *) 0 ;
  pagmo::population::size_type arg2 ;
  pagmo::vector_double *arg3 = 0 ;
  pagmo::vector_double *arg4 = 0 ;
  
  arg1 = (pagmo::population *)jarg1; 
  arg2 = (pagmo::population::size_type)jarg2; 
  arg3 = (pagmo::vector_double *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pagmo::vector_double const & is null", 0);
    return ;
  } 
  arg4 = (pagmo::vector_double *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pagmo::vector_double const & is null", 0);
    return ;
  } 
  (arg1)->set_xf(arg2,(pagmo::vector_double const &)*arg3,(pagmo::vector_double const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_population_set_x(void * jarg1, unsigned long jarg2, void * jarg3) {
  pagmo::population *arg1 = (pagmo::population *) 0 ;
  pagmo::population::size_type arg2 ;
  pagmo::vector_double *arg3 = 0 ;
  
  arg1 = (pagmo::population *)jarg1; 
  arg2 = (pagmo::population::size_type)jarg2; 
  arg3 = (pagmo::vector_double *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pagmo::vector_double const & is null", 0);
    return ;
  } 
  (arg1)->set_x(arg2,(pagmo::vector_double const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_population_get_problem(void * jarg1) {
  void * jresult ;
  pagmo::population *arg1 = (pagmo::population *) 0 ;
  pagmoWrap::problemPagomWrapper *result = 0 ;
  
  arg1 = (pagmo::population *)jarg1; 
  result = (pagmoWrap::problemPagomWrapper *) &((pagmo::population const *)arg1)->get_problem();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_population_get_f(void * jarg1) {
  void * jresult ;
  pagmo::population *arg1 = (pagmo::population *) 0 ;
  std::vector< pagmo::vector_double > *result = 0 ;
  
  arg1 = (pagmo::population *)jarg1; 
  result = (std::vector< pagmo::vector_double > *) &((pagmo::population const *)arg1)->get_f();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_population_get_x(void * jarg1) {
  void * jresult ;
  pagmo::population *arg1 = (pagmo::population *) 0 ;
  std::vector< pagmo::vector_double > *result = 0 ;
  
  arg1 = (pagmo::population *)jarg1; 
  result = (std::vector< pagmo::vector_double > *) &((pagmo::population const *)arg1)->get_x();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_population_get_ID(void * jarg1) {
  void * jresult ;
  pagmo::population *arg1 = (pagmo::population *) 0 ;
  std::vector< unsigned long long > *result = 0 ;
  
  arg1 = (pagmo::population *)jarg1; 
  result = (std::vector< unsigned long long > *) &((pagmo::population const *)arg1)->get_ID();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pagmo_population_get_seed(void * jarg1) {
  unsigned int jresult ;
  pagmo::population *arg1 = (pagmo::population *) 0 ;
  unsigned int result;
  
  arg1 = (pagmo::population *)jarg1; 
  result = (unsigned int)((pagmo::population const *)arg1)->get_seed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_delete_population(void * jarg1) {
  pagmo::population *arg1 = (pagmo::population *) 0 ;
  
  arg1 = (pagmo::population *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_algorithm__SWIG_0() {
  void * jresult ;
  pagmo::algorithm *result = 0 ;
  
  result = (pagmo::algorithm *)new pagmo::algorithm();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_algorithm__SWIG_1(void * jarg1) {
  void * jresult ;
  pagmo::algorithm *arg1 = 0 ;
  pagmo::algorithm *result = 0 ;
  
  arg1 = (pagmo::algorithm *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pagmo::algorithm const & is null", 0);
    return 0;
  } 
  result = (pagmo::algorithm *)new pagmo::algorithm((pagmo::algorithm const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pagmo_algorithm_has_set_seed(void * jarg1) {
  unsigned int jresult ;
  pagmo::algorithm *arg1 = (pagmo::algorithm *) 0 ;
  bool result;
  
  arg1 = (pagmo::algorithm *)jarg1; 
  result = (bool)((pagmo::algorithm const *)arg1)->has_set_seed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pagmo_algorithm_is_stochastic(void * jarg1) {
  unsigned int jresult ;
  pagmo::algorithm *arg1 = (pagmo::algorithm *) 0 ;
  bool result;
  
  arg1 = (pagmo::algorithm *)jarg1; 
  result = (bool)((pagmo::algorithm const *)arg1)->is_stochastic();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_algorithm_set_verbosity(void * jarg1, unsigned int jarg2) {
  pagmo::algorithm *arg1 = (pagmo::algorithm *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pagmo::algorithm *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->set_verbosity(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pagmo_algorithm_has_set_verbosity(void * jarg1) {
  unsigned int jresult ;
  pagmo::algorithm *arg1 = (pagmo::algorithm *) 0 ;
  bool result;
  
  arg1 = (pagmo::algorithm *)jarg1; 
  result = (bool)((pagmo::algorithm const *)arg1)->has_set_verbosity();
  jresult = result; 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_pagmo_algorithm_get_name(void * jarg1) {
  const char * jresult ;
  pagmo::algorithm *arg1 = (pagmo::algorithm *) 0 ;
  std::string result;
  
  arg1 = (pagmo::algorithm *)jarg1; 
  result = ((pagmo::algorithm const *)arg1)->get_name();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_pagmo_algorithm_get_extra_info(void * jarg1) {
  const char * jresult ;
  pagmo::algorithm *arg1 = (pagmo::algorithm *) 0 ;
  std::string result;
  
  arg1 = (pagmo::algorithm *)jarg1; 
  result = ((pagmo::algorithm const *)arg1)->get_extra_info();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pagmo_algorithm_get_thread_safety(void * jarg1) {
  int jresult ;
  pagmo::algorithm *arg1 = (pagmo::algorithm *) 0 ;
  pagmo::thread_safety result;
  
  arg1 = (pagmo::algorithm *)jarg1; 
  result = (pagmo::thread_safety)((pagmo::algorithm const *)arg1)->get_thread_safety();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pagmo_algorithm_is_valid(void * jarg1) {
  unsigned int jresult ;
  pagmo::algorithm *arg1 = (pagmo::algorithm *) 0 ;
  bool result;
  
  arg1 = (pagmo::algorithm *)jarg1; 
  result = (bool)((pagmo::algorithm const *)arg1)->is_valid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_algorithm_get_ptr__SWIG_0(void * jarg1) {
  void * jresult ;
  pagmo::algorithm *arg1 = (pagmo::algorithm *) 0 ;
  void *result = 0 ;
  
  arg1 = (pagmo::algorithm *)jarg1; 
  result = (void *)((pagmo::algorithm const *)arg1)->get_ptr();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_delete_algorithm(void * jarg1) {
  pagmo::algorithm *arg1 = (pagmo::algorithm *) 0 ;
  
  arg1 = (pagmo::algorithm *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_archipelago__SWIG_0() {
  void * jresult ;
  pagmo::archipelago *result = 0 ;
  
  result = (pagmo::archipelago *)new pagmo::archipelago();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_archipelago__SWIG_1(void * jarg1) {
  void * jresult ;
  pagmo::archipelago *arg1 = 0 ;
  pagmo::archipelago *result = 0 ;
  
  arg1 = (pagmo::archipelago *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pagmo::archipelago const & is null", 0);
    return 0;
  } 
  result = (pagmo::archipelago *)new pagmo::archipelago((pagmo::archipelago const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_archipelago_size(void * jarg1) {
  void * jresult ;
  pagmo::archipelago *arg1 = (pagmo::archipelago *) 0 ;
  SwigValueWrapper< std::vector< std::unique_ptr< pagmo::island > >::size_type > result;
  
  arg1 = (pagmo::archipelago *)jarg1; 
  result = ((pagmo::archipelago const *)arg1)->size();
  jresult = new pagmo::archipelago::size_type(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_archipelago_evolve__SWIG_0(void * jarg1, unsigned int jarg2) {
  pagmo::archipelago *arg1 = (pagmo::archipelago *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pagmo::archipelago *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->evolve(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_archipelago_evolve__SWIG_1(void * jarg1) {
  pagmo::archipelago *arg1 = (pagmo::archipelago *) 0 ;
  
  arg1 = (pagmo::archipelago *)jarg1; 
  (arg1)->evolve();
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_archipelago_wait(void * jarg1) {
  pagmo::archipelago *arg1 = (pagmo::archipelago *) 0 ;
  
  arg1 = (pagmo::archipelago *)jarg1; 
  (arg1)->wait();
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_archipelago_wait_check(void * jarg1) {
  pagmo::archipelago *arg1 = (pagmo::archipelago *) 0 ;
  
  arg1 = (pagmo::archipelago *)jarg1; 
  (arg1)->wait_check();
}


SWIGEXPORT int SWIGSTDCALL CSharp_pagmo_archipelago_status(void * jarg1) {
  int jresult ;
  pagmo::archipelago *arg1 = (pagmo::archipelago *) 0 ;
  pagmo::evolve_status result;
  
  arg1 = (pagmo::archipelago *)jarg1; 
  result = (pagmo::evolve_status)((pagmo::archipelago const *)arg1)->status();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_archipelago_begin__SWIG_0(void * jarg1) {
  void * jresult ;
  pagmo::archipelago *arg1 = (pagmo::archipelago *) 0 ;
  pagmo::archipelago::iterator result;
  
  arg1 = (pagmo::archipelago *)jarg1; 
  result = (arg1)->begin();
  jresult = new pagmo::archipelago::iterator(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_archipelago_end__SWIG_0(void * jarg1) {
  void * jresult ;
  pagmo::archipelago *arg1 = (pagmo::archipelago *) 0 ;
  pagmo::archipelago::iterator result;
  
  arg1 = (pagmo::archipelago *)jarg1; 
  result = (arg1)->end();
  jresult = new pagmo::archipelago::iterator(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_archipelago_get_champions_f(void * jarg1) {
  void * jresult ;
  pagmo::archipelago *arg1 = (pagmo::archipelago *) 0 ;
  std::vector< pagmo::vector_double > result;
  
  arg1 = (pagmo::archipelago *)jarg1; 
  result = ((pagmo::archipelago const *)arg1)->get_champions_f();
  jresult = new std::vector< pagmo::vector_double >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_archipelago_get_champions_x(void * jarg1) {
  void * jresult ;
  pagmo::archipelago *arg1 = (pagmo::archipelago *) 0 ;
  std::vector< pagmo::vector_double > result;
  
  arg1 = (pagmo::archipelago *)jarg1; 
  result = ((pagmo::archipelago const *)arg1)->get_champions_x();
  jresult = new std::vector< pagmo::vector_double >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_archipelago_get_migrants_db(void * jarg1) {
  void * jresult ;
  pagmo::archipelago *arg1 = (pagmo::archipelago *) 0 ;
  SwigValueWrapper< std::vector< std::tuple< std::vector< unsigned long long >,std::vector< std::vector< double > >,std::vector< std::vector< double > > > > > result;
  
  arg1 = (pagmo::archipelago *)jarg1; 
  result = ((pagmo::archipelago const *)arg1)->get_migrants_db();
  jresult = new pagmo::archipelago::migrants_db_t(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_archipelago_set_migrants_db(void * jarg1, void * jarg2) {
  pagmo::archipelago *arg1 = (pagmo::archipelago *) 0 ;
  SwigValueWrapper< std::vector< std::tuple< std::vector< unsigned long long >,std::vector< std::vector< double > >,std::vector< std::vector< double > > > > > arg2 ;
  pagmo::archipelago::migrants_db_t *argp2 ;
  
  arg1 = (pagmo::archipelago *)jarg1; 
  argp2 = (pagmo::archipelago::migrants_db_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null pagmo::archipelago::migrants_db_t", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->set_migrants_db(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_archipelago_get_topology(void * jarg1) {
  void * jresult ;
  pagmo::archipelago *arg1 = (pagmo::archipelago *) 0 ;
  pagmo::topology result;
  
  arg1 = (pagmo::archipelago *)jarg1; 
  result = ((pagmo::archipelago const *)arg1)->get_topology();
  jresult = new pagmo::topology(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_archipelago_set_topology(void * jarg1, void * jarg2) {
  pagmo::archipelago *arg1 = (pagmo::archipelago *) 0 ;
  pagmo::topology arg2 ;
  pagmo::topology *argp2 ;
  
  arg1 = (pagmo::archipelago *)jarg1; 
  argp2 = (pagmo::topology *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null pagmo::topology", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->set_topology(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_pagmo_archipelago_get_migration_type(void * jarg1) {
  int jresult ;
  pagmo::archipelago *arg1 = (pagmo::archipelago *) 0 ;
  pagmo::migration_type result;
  
  arg1 = (pagmo::archipelago *)jarg1; 
  result = (pagmo::migration_type)((pagmo::archipelago const *)arg1)->get_migration_type();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_archipelago_set_migration_type(void * jarg1, int jarg2) {
  pagmo::archipelago *arg1 = (pagmo::archipelago *) 0 ;
  pagmo::migration_type arg2 ;
  
  arg1 = (pagmo::archipelago *)jarg1; 
  arg2 = (pagmo::migration_type)jarg2; 
  (arg1)->set_migration_type(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_pagmo_archipelago_get_migrant_handling(void * jarg1) {
  int jresult ;
  pagmo::archipelago *arg1 = (pagmo::archipelago *) 0 ;
  pagmo::migrant_handling result;
  
  arg1 = (pagmo::archipelago *)jarg1; 
  result = (pagmo::migrant_handling)((pagmo::archipelago const *)arg1)->get_migrant_handling();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_archipelago_set_migrant_handling(void * jarg1, int jarg2) {
  pagmo::archipelago *arg1 = (pagmo::archipelago *) 0 ;
  pagmo::migrant_handling arg2 ;
  
  arg1 = (pagmo::archipelago *)jarg1; 
  arg2 = (pagmo::migrant_handling)jarg2; 
  (arg1)->set_migrant_handling(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_delete_archipelago(void * jarg1) {
  pagmo::archipelago *arg1 = (pagmo::archipelago *) 0 ;
  
  arg1 = (pagmo::archipelago *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_delete_bfe(void * jarg1) {
  pagmo::bfe *arg1 = (pagmo::bfe *) 0 ;
  
  arg1 = (pagmo::bfe *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_stream_impl(void * jarg1, unsigned int jarg2) {
  std::ostream *arg1 = 0 ;
  bool *arg2 = 0 ;
  bool temp2 ;
  
  arg1 = (std::ostream *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::ostream & is null", 0);
    return ;
  } 
  temp2 = jarg2 ? true : false; 
  arg2 = &temp2; 
  pagmo::detail::stream_impl(*arg1,(bool const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pagmo_max_stream_output_length() {
  unsigned int jresult ;
  unsigned int result;
  
  result = (unsigned int)pagmo::detail::max_stream_output_length();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pagmo_random_device_next(void * jarg1) {
  unsigned int jresult ;
  pagmo::random_device *arg1 = (pagmo::random_device *) 0 ;
  unsigned int result;
  
  arg1 = (pagmo::random_device *)jarg1; 
  result = (unsigned int)(arg1)->next();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_random_device_set_seed(void * jarg1, unsigned int jarg2) {
  pagmo::random_device *arg1 = (pagmo::random_device *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pagmo::random_device *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->set_seed(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_random_device() {
  void * jresult ;
  pagmo::random_device *result = 0 ;
  
  result = (pagmo::random_device *)new pagmo::random_device();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_delete_random_device(void * jarg1) {
  pagmo::random_device *arg1 = (pagmo::random_device *) 0 ;
  
  arg1 = (pagmo::random_device *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_bee_colony__SWIG_0(unsigned int jarg1, unsigned int jarg2, unsigned int jarg3) {
  void * jresult ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  pagmo::bee_colony *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  result = (pagmo::bee_colony *)new pagmo::bee_colony(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_bee_colony__SWIG_1(unsigned int jarg1, unsigned int jarg2) {
  void * jresult ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  pagmo::bee_colony *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (pagmo::bee_colony *)new pagmo::bee_colony(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_bee_colony__SWIG_2(unsigned int jarg1) {
  void * jresult ;
  unsigned int arg1 ;
  pagmo::bee_colony *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  result = (pagmo::bee_colony *)new pagmo::bee_colony(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_bee_colony__SWIG_3() {
  void * jresult ;
  pagmo::bee_colony *result = 0 ;
  
  result = (pagmo::bee_colony *)new pagmo::bee_colony();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_bee_colony_evolve(void * jarg1, void * jarg2) {
  void * jresult ;
  pagmo::bee_colony *arg1 = (pagmo::bee_colony *) 0 ;
  SwigValueWrapper< pagmo::population > arg2 ;
  pagmo::population *argp2 ;
  SwigValueWrapper< pagmo::population > result;
  
  arg1 = (pagmo::bee_colony *)jarg1; 
  argp2 = (pagmo::population *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null pagmo::population", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = ((pagmo::bee_colony const *)arg1)->evolve(arg2);
  jresult = new pagmo::population(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_bee_colony_set_seed(void * jarg1, unsigned int jarg2) {
  pagmo::bee_colony *arg1 = (pagmo::bee_colony *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pagmo::bee_colony *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->set_seed(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pagmo_bee_colony_get_seed(void * jarg1) {
  unsigned int jresult ;
  pagmo::bee_colony *arg1 = (pagmo::bee_colony *) 0 ;
  unsigned int result;
  
  arg1 = (pagmo::bee_colony *)jarg1; 
  result = (unsigned int)((pagmo::bee_colony const *)arg1)->get_seed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_bee_colony_set_verbosity(void * jarg1, unsigned int jarg2) {
  pagmo::bee_colony *arg1 = (pagmo::bee_colony *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pagmo::bee_colony *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->set_verbosity(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pagmo_bee_colony_get_verbosity(void * jarg1) {
  unsigned int jresult ;
  pagmo::bee_colony *arg1 = (pagmo::bee_colony *) 0 ;
  unsigned int result;
  
  arg1 = (pagmo::bee_colony *)jarg1; 
  result = (unsigned int)((pagmo::bee_colony const *)arg1)->get_verbosity();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pagmo_bee_colony_get_gen(void * jarg1) {
  unsigned int jresult ;
  pagmo::bee_colony *arg1 = (pagmo::bee_colony *) 0 ;
  unsigned int result;
  
  arg1 = (pagmo::bee_colony *)jarg1; 
  result = (unsigned int)((pagmo::bee_colony const *)arg1)->get_gen();
  jresult = result; 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_pagmo_bee_colony_get_name(void * jarg1) {
  const char * jresult ;
  pagmo::bee_colony *arg1 = (pagmo::bee_colony *) 0 ;
  std::string result;
  
  arg1 = (pagmo::bee_colony *)jarg1; 
  result = ((pagmo::bee_colony const *)arg1)->get_name();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_pagmo_bee_colony_get_extra_info(void * jarg1) {
  const char * jresult ;
  pagmo::bee_colony *arg1 = (pagmo::bee_colony *) 0 ;
  std::string result;
  
  arg1 = (pagmo::bee_colony *)jarg1; 
  result = ((pagmo::bee_colony const *)arg1)->get_extra_info();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_bee_colony_get_log(void * jarg1) {
  void * jresult ;
  pagmo::bee_colony *arg1 = (pagmo::bee_colony *) 0 ;
  pagmo::bee_colony::log_type *result = 0 ;
  
  arg1 = (pagmo::bee_colony *)jarg1; 
  result = (pagmo::bee_colony::log_type *) &((pagmo::bee_colony const *)arg1)->get_log();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_delete_bee_colony(void * jarg1) {
  pagmo::bee_colony *arg1 = (pagmo::bee_colony *) 0 ;
  
  arg1 = (pagmo::bee_colony *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_cmaes__SWIG_0(unsigned int jarg1, double jarg2, double jarg3, double jarg4, double jarg5, double jarg6, double jarg7, double jarg8, unsigned int jarg9, unsigned int jarg10, unsigned int jarg11) {
  void * jresult ;
  unsigned int arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  bool arg9 ;
  bool arg10 ;
  unsigned int arg11 ;
  pagmo::cmaes *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  arg8 = (double)jarg8; 
  arg9 = jarg9 ? true : false; 
  arg10 = jarg10 ? true : false; 
  arg11 = (unsigned int)jarg11; 
  result = (pagmo::cmaes *)new pagmo::cmaes(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_cmaes__SWIG_1(unsigned int jarg1, double jarg2, double jarg3, double jarg4, double jarg5, double jarg6, double jarg7, double jarg8, unsigned int jarg9, unsigned int jarg10) {
  void * jresult ;
  unsigned int arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  bool arg9 ;
  bool arg10 ;
  pagmo::cmaes *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  arg8 = (double)jarg8; 
  arg9 = jarg9 ? true : false; 
  arg10 = jarg10 ? true : false; 
  result = (pagmo::cmaes *)new pagmo::cmaes(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_cmaes__SWIG_2(unsigned int jarg1, double jarg2, double jarg3, double jarg4, double jarg5, double jarg6, double jarg7, double jarg8, unsigned int jarg9) {
  void * jresult ;
  unsigned int arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  bool arg9 ;
  pagmo::cmaes *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  arg8 = (double)jarg8; 
  arg9 = jarg9 ? true : false; 
  result = (pagmo::cmaes *)new pagmo::cmaes(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_cmaes__SWIG_3(unsigned int jarg1, double jarg2, double jarg3, double jarg4, double jarg5, double jarg6, double jarg7, double jarg8) {
  void * jresult ;
  unsigned int arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  pagmo::cmaes *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  arg8 = (double)jarg8; 
  result = (pagmo::cmaes *)new pagmo::cmaes(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_cmaes__SWIG_4(unsigned int jarg1, double jarg2, double jarg3, double jarg4, double jarg5, double jarg6, double jarg7) {
  void * jresult ;
  unsigned int arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  pagmo::cmaes *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  result = (pagmo::cmaes *)new pagmo::cmaes(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_cmaes__SWIG_5(unsigned int jarg1, double jarg2, double jarg3, double jarg4, double jarg5, double jarg6) {
  void * jresult ;
  unsigned int arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  pagmo::cmaes *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  result = (pagmo::cmaes *)new pagmo::cmaes(arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_cmaes__SWIG_6(unsigned int jarg1, double jarg2, double jarg3, double jarg4, double jarg5) {
  void * jresult ;
  unsigned int arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  pagmo::cmaes *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  result = (pagmo::cmaes *)new pagmo::cmaes(arg1,arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_cmaes__SWIG_7(unsigned int jarg1, double jarg2, double jarg3, double jarg4) {
  void * jresult ;
  unsigned int arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  pagmo::cmaes *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  result = (pagmo::cmaes *)new pagmo::cmaes(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_cmaes__SWIG_8(unsigned int jarg1, double jarg2, double jarg3) {
  void * jresult ;
  unsigned int arg1 ;
  double arg2 ;
  double arg3 ;
  pagmo::cmaes *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (pagmo::cmaes *)new pagmo::cmaes(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_cmaes__SWIG_9(unsigned int jarg1, double jarg2) {
  void * jresult ;
  unsigned int arg1 ;
  double arg2 ;
  pagmo::cmaes *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (double)jarg2; 
  result = (pagmo::cmaes *)new pagmo::cmaes(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_cmaes__SWIG_10(unsigned int jarg1) {
  void * jresult ;
  unsigned int arg1 ;
  pagmo::cmaes *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  result = (pagmo::cmaes *)new pagmo::cmaes(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_cmaes__SWIG_11() {
  void * jresult ;
  pagmo::cmaes *result = 0 ;
  
  result = (pagmo::cmaes *)new pagmo::cmaes();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_cmaes_evolve(void * jarg1, void * jarg2) {
  void * jresult ;
  pagmo::cmaes *arg1 = (pagmo::cmaes *) 0 ;
  SwigValueWrapper< pagmo::population > arg2 ;
  pagmo::population *argp2 ;
  SwigValueWrapper< pagmo::population > result;
  
  arg1 = (pagmo::cmaes *)jarg1; 
  argp2 = (pagmo::population *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null pagmo::population", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = ((pagmo::cmaes const *)arg1)->evolve(arg2);
  jresult = new pagmo::population(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_cmaes_set_seed(void * jarg1, unsigned int jarg2) {
  pagmo::cmaes *arg1 = (pagmo::cmaes *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pagmo::cmaes *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->set_seed(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pagmo_cmaes_get_seed(void * jarg1) {
  unsigned int jresult ;
  pagmo::cmaes *arg1 = (pagmo::cmaes *) 0 ;
  unsigned int result;
  
  arg1 = (pagmo::cmaes *)jarg1; 
  result = (unsigned int)((pagmo::cmaes const *)arg1)->get_seed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_cmaes_set_verbosity(void * jarg1, unsigned int jarg2) {
  pagmo::cmaes *arg1 = (pagmo::cmaes *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pagmo::cmaes *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->set_verbosity(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pagmo_cmaes_get_verbosity(void * jarg1) {
  unsigned int jresult ;
  pagmo::cmaes *arg1 = (pagmo::cmaes *) 0 ;
  unsigned int result;
  
  arg1 = (pagmo::cmaes *)jarg1; 
  result = (unsigned int)((pagmo::cmaes const *)arg1)->get_verbosity();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pagmo_cmaes_get_gen(void * jarg1) {
  unsigned int jresult ;
  pagmo::cmaes *arg1 = (pagmo::cmaes *) 0 ;
  unsigned int result;
  
  arg1 = (pagmo::cmaes *)jarg1; 
  result = (unsigned int)((pagmo::cmaes const *)arg1)->get_gen();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_cmaes_set_bfe(void * jarg1, void * jarg2) {
  pagmo::cmaes *arg1 = (pagmo::cmaes *) 0 ;
  pagmo::bfe *arg2 = 0 ;
  
  arg1 = (pagmo::cmaes *)jarg1; 
  arg2 = (pagmo::bfe *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pagmo::bfe const & is null", 0);
    return ;
  } 
  (arg1)->set_bfe((pagmo::bfe const &)*arg2);
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_pagmo_cmaes_get_name(void * jarg1) {
  const char * jresult ;
  pagmo::cmaes *arg1 = (pagmo::cmaes *) 0 ;
  std::string result;
  
  arg1 = (pagmo::cmaes *)jarg1; 
  result = ((pagmo::cmaes const *)arg1)->get_name();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_pagmo_cmaes_get_extra_info(void * jarg1) {
  const char * jresult ;
  pagmo::cmaes *arg1 = (pagmo::cmaes *) 0 ;
  std::string result;
  
  arg1 = (pagmo::cmaes *)jarg1; 
  result = ((pagmo::cmaes const *)arg1)->get_extra_info();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_cmaes_get_log(void * jarg1) {
  void * jresult ;
  pagmo::cmaes *arg1 = (pagmo::cmaes *) 0 ;
  pagmo::cmaes::log_type *result = 0 ;
  
  arg1 = (pagmo::cmaes *)jarg1; 
  result = (pagmo::cmaes::log_type *) &((pagmo::cmaes const *)arg1)->get_log();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_delete_cmaes(void * jarg1) {
  pagmo::cmaes *arg1 = (pagmo::cmaes *) 0 ;
  
  arg1 = (pagmo::cmaes *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_compass_search__SWIG_0(unsigned int jarg1, double jarg2, double jarg3, double jarg4) {
  void * jresult ;
  unsigned int arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  pagmo::compass_search *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  result = (pagmo::compass_search *)new pagmo::compass_search(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_compass_search__SWIG_1(unsigned int jarg1, double jarg2, double jarg3) {
  void * jresult ;
  unsigned int arg1 ;
  double arg2 ;
  double arg3 ;
  pagmo::compass_search *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (pagmo::compass_search *)new pagmo::compass_search(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_compass_search__SWIG_2(unsigned int jarg1, double jarg2) {
  void * jresult ;
  unsigned int arg1 ;
  double arg2 ;
  pagmo::compass_search *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (double)jarg2; 
  result = (pagmo::compass_search *)new pagmo::compass_search(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_compass_search__SWIG_3(unsigned int jarg1) {
  void * jresult ;
  unsigned int arg1 ;
  pagmo::compass_search *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  result = (pagmo::compass_search *)new pagmo::compass_search(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_compass_search__SWIG_4() {
  void * jresult ;
  pagmo::compass_search *result = 0 ;
  
  result = (pagmo::compass_search *)new pagmo::compass_search();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_compass_search_evolve(void * jarg1, void * jarg2) {
  void * jresult ;
  pagmo::compass_search *arg1 = (pagmo::compass_search *) 0 ;
  SwigValueWrapper< pagmo::population > arg2 ;
  pagmo::population *argp2 ;
  SwigValueWrapper< pagmo::population > result;
  
  arg1 = (pagmo::compass_search *)jarg1; 
  argp2 = (pagmo::population *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null pagmo::population", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = ((pagmo::compass_search const *)arg1)->evolve(arg2);
  jresult = new pagmo::population(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_compass_search_set_verbosity(void * jarg1, unsigned int jarg2) {
  pagmo::compass_search *arg1 = (pagmo::compass_search *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pagmo::compass_search *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->set_verbosity(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pagmo_compass_search_get_verbosity(void * jarg1) {
  unsigned int jresult ;
  pagmo::compass_search *arg1 = (pagmo::compass_search *) 0 ;
  unsigned int result;
  
  arg1 = (pagmo::compass_search *)jarg1; 
  result = (unsigned int)((pagmo::compass_search const *)arg1)->get_verbosity();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_pagmo_compass_search_get_max_fevals(void * jarg1) {
  double jresult ;
  pagmo::compass_search *arg1 = (pagmo::compass_search *) 0 ;
  double result;
  
  arg1 = (pagmo::compass_search *)jarg1; 
  result = (double)((pagmo::compass_search const *)arg1)->get_max_fevals();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_pagmo_compass_search_get_stop_range(void * jarg1) {
  double jresult ;
  pagmo::compass_search *arg1 = (pagmo::compass_search *) 0 ;
  double result;
  
  arg1 = (pagmo::compass_search *)jarg1; 
  result = (double)((pagmo::compass_search const *)arg1)->get_stop_range();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_pagmo_compass_search_get_start_range(void * jarg1) {
  double jresult ;
  pagmo::compass_search *arg1 = (pagmo::compass_search *) 0 ;
  double result;
  
  arg1 = (pagmo::compass_search *)jarg1; 
  result = (double)((pagmo::compass_search const *)arg1)->get_start_range();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_pagmo_compass_search_get_reduction_coeff(void * jarg1) {
  double jresult ;
  pagmo::compass_search *arg1 = (pagmo::compass_search *) 0 ;
  double result;
  
  arg1 = (pagmo::compass_search *)jarg1; 
  result = (double)((pagmo::compass_search const *)arg1)->get_reduction_coeff();
  jresult = result; 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_pagmo_compass_search_get_name(void * jarg1) {
  const char * jresult ;
  pagmo::compass_search *arg1 = (pagmo::compass_search *) 0 ;
  std::string result;
  
  arg1 = (pagmo::compass_search *)jarg1; 
  result = ((pagmo::compass_search const *)arg1)->get_name();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_pagmo_compass_search_get_extra_info(void * jarg1) {
  const char * jresult ;
  pagmo::compass_search *arg1 = (pagmo::compass_search *) 0 ;
  std::string result;
  
  arg1 = (pagmo::compass_search *)jarg1; 
  result = ((pagmo::compass_search const *)arg1)->get_extra_info();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_compass_search_get_log(void * jarg1) {
  void * jresult ;
  pagmo::compass_search *arg1 = (pagmo::compass_search *) 0 ;
  pagmo::compass_search::log_type *result = 0 ;
  
  arg1 = (pagmo::compass_search *)jarg1; 
  result = (pagmo::compass_search::log_type *) &((pagmo::compass_search const *)arg1)->get_log();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_compass_search_set_seed(void * jarg1, unsigned int jarg2) {
  pagmo::compass_search *arg1 = (pagmo::compass_search *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pagmo::compass_search *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  pagmo_compass_search_set_seed((pagmo::compass_search const *)arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pagmo_compass_search_get_seed(void * jarg1) {
  unsigned int jresult ;
  pagmo::compass_search *arg1 = (pagmo::compass_search *) 0 ;
  unsigned int result;
  
  arg1 = (pagmo::compass_search *)jarg1; 
  result = (unsigned int)pagmo_compass_search_get_seed((pagmo::compass_search const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pagmo_compass_search_get_gen(void * jarg1) {
  unsigned int jresult ;
  pagmo::compass_search *arg1 = (pagmo::compass_search *) 0 ;
  unsigned int result;
  
  arg1 = (pagmo::compass_search *)jarg1; 
  result = (unsigned int)pagmo_compass_search_get_gen((pagmo::compass_search const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_delete_compass_search(void * jarg1) {
  pagmo::compass_search *arg1 = (pagmo::compass_search *) 0 ;
  
  arg1 = (pagmo::compass_search *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_de__SWIG_0(unsigned int jarg1, double jarg2, double jarg3, unsigned int jarg4, double jarg5, double jarg6, unsigned int jarg7) {
  void * jresult ;
  unsigned int arg1 ;
  double arg2 ;
  double arg3 ;
  unsigned int arg4 ;
  double arg5 ;
  double arg6 ;
  unsigned int arg7 ;
  pagmo::de *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (unsigned int)jarg7; 
  result = (pagmo::de *)new pagmo::de(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_de__SWIG_1(unsigned int jarg1, double jarg2, double jarg3, unsigned int jarg4, double jarg5, double jarg6) {
  void * jresult ;
  unsigned int arg1 ;
  double arg2 ;
  double arg3 ;
  unsigned int arg4 ;
  double arg5 ;
  double arg6 ;
  pagmo::de *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  result = (pagmo::de *)new pagmo::de(arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_de__SWIG_2(unsigned int jarg1, double jarg2, double jarg3, unsigned int jarg4, double jarg5) {
  void * jresult ;
  unsigned int arg1 ;
  double arg2 ;
  double arg3 ;
  unsigned int arg4 ;
  double arg5 ;
  pagmo::de *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (double)jarg5; 
  result = (pagmo::de *)new pagmo::de(arg1,arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_de__SWIG_3(unsigned int jarg1, double jarg2, double jarg3, unsigned int jarg4) {
  void * jresult ;
  unsigned int arg1 ;
  double arg2 ;
  double arg3 ;
  unsigned int arg4 ;
  pagmo::de *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (unsigned int)jarg4; 
  result = (pagmo::de *)new pagmo::de(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_de__SWIG_4(unsigned int jarg1, double jarg2, double jarg3) {
  void * jresult ;
  unsigned int arg1 ;
  double arg2 ;
  double arg3 ;
  pagmo::de *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (pagmo::de *)new pagmo::de(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_de__SWIG_5(unsigned int jarg1, double jarg2) {
  void * jresult ;
  unsigned int arg1 ;
  double arg2 ;
  pagmo::de *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (double)jarg2; 
  result = (pagmo::de *)new pagmo::de(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_de__SWIG_6(unsigned int jarg1) {
  void * jresult ;
  unsigned int arg1 ;
  pagmo::de *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  result = (pagmo::de *)new pagmo::de(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_de__SWIG_7() {
  void * jresult ;
  pagmo::de *result = 0 ;
  
  result = (pagmo::de *)new pagmo::de();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_de_evolve(void * jarg1, void * jarg2) {
  void * jresult ;
  pagmo::de *arg1 = (pagmo::de *) 0 ;
  SwigValueWrapper< pagmo::population > arg2 ;
  pagmo::population *argp2 ;
  SwigValueWrapper< pagmo::population > result;
  
  arg1 = (pagmo::de *)jarg1; 
  argp2 = (pagmo::population *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null pagmo::population", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = ((pagmo::de const *)arg1)->evolve(arg2);
  jresult = new pagmo::population(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_de_set_seed(void * jarg1, unsigned int jarg2) {
  pagmo::de *arg1 = (pagmo::de *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pagmo::de *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->set_seed(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pagmo_de_get_seed(void * jarg1) {
  unsigned int jresult ;
  pagmo::de *arg1 = (pagmo::de *) 0 ;
  unsigned int result;
  
  arg1 = (pagmo::de *)jarg1; 
  result = (unsigned int)((pagmo::de const *)arg1)->get_seed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_de_set_verbosity(void * jarg1, unsigned int jarg2) {
  pagmo::de *arg1 = (pagmo::de *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pagmo::de *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->set_verbosity(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pagmo_de_get_verbosity(void * jarg1) {
  unsigned int jresult ;
  pagmo::de *arg1 = (pagmo::de *) 0 ;
  unsigned int result;
  
  arg1 = (pagmo::de *)jarg1; 
  result = (unsigned int)((pagmo::de const *)arg1)->get_verbosity();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pagmo_de_get_gen(void * jarg1) {
  unsigned int jresult ;
  pagmo::de *arg1 = (pagmo::de *) 0 ;
  unsigned int result;
  
  arg1 = (pagmo::de *)jarg1; 
  result = (unsigned int)((pagmo::de const *)arg1)->get_gen();
  jresult = result; 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_pagmo_de_get_name(void * jarg1) {
  const char * jresult ;
  pagmo::de *arg1 = (pagmo::de *) 0 ;
  std::string result;
  
  arg1 = (pagmo::de *)jarg1; 
  result = ((pagmo::de const *)arg1)->get_name();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_pagmo_de_get_extra_info(void * jarg1) {
  const char * jresult ;
  pagmo::de *arg1 = (pagmo::de *) 0 ;
  std::string result;
  
  arg1 = (pagmo::de *)jarg1; 
  result = ((pagmo::de const *)arg1)->get_extra_info();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_de_get_log(void * jarg1) {
  void * jresult ;
  pagmo::de *arg1 = (pagmo::de *) 0 ;
  pagmo::de::log_type *result = 0 ;
  
  arg1 = (pagmo::de *)jarg1; 
  result = (pagmo::de::log_type *) &((pagmo::de const *)arg1)->get_log();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_delete_de(void * jarg1) {
  pagmo::de *arg1 = (pagmo::de *) 0 ;
  
  arg1 = (pagmo::de *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_de1220__SWIG_0(unsigned int jarg1, void * jarg2, unsigned int jarg3, double jarg4, double jarg5, unsigned int jarg6, unsigned int jarg7) {
  void * jresult ;
  unsigned int arg1 ;
  std::vector< unsigned int > arg2 ;
  unsigned int arg3 ;
  double arg4 ;
  double arg5 ;
  bool arg6 ;
  unsigned int arg7 ;
  std::vector< unsigned int > *argp2 ;
  pagmo::de1220 *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  argp2 = (std::vector< unsigned int > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::vector< unsigned int >", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = jarg6 ? true : false; 
  arg7 = (unsigned int)jarg7; 
  result = (pagmo::de1220 *)new pagmo::de1220(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_de1220__SWIG_1(unsigned int jarg1, void * jarg2, unsigned int jarg3, double jarg4, double jarg5, unsigned int jarg6) {
  void * jresult ;
  unsigned int arg1 ;
  std::vector< unsigned int > arg2 ;
  unsigned int arg3 ;
  double arg4 ;
  double arg5 ;
  bool arg6 ;
  std::vector< unsigned int > *argp2 ;
  pagmo::de1220 *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  argp2 = (std::vector< unsigned int > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::vector< unsigned int >", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = jarg6 ? true : false; 
  result = (pagmo::de1220 *)new pagmo::de1220(arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_de1220__SWIG_2(unsigned int jarg1, void * jarg2, unsigned int jarg3, double jarg4, double jarg5) {
  void * jresult ;
  unsigned int arg1 ;
  std::vector< unsigned int > arg2 ;
  unsigned int arg3 ;
  double arg4 ;
  double arg5 ;
  std::vector< unsigned int > *argp2 ;
  pagmo::de1220 *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  argp2 = (std::vector< unsigned int > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::vector< unsigned int >", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  result = (pagmo::de1220 *)new pagmo::de1220(arg1,arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_de1220__SWIG_3(unsigned int jarg1, void * jarg2, unsigned int jarg3, double jarg4) {
  void * jresult ;
  unsigned int arg1 ;
  std::vector< unsigned int > arg2 ;
  unsigned int arg3 ;
  double arg4 ;
  std::vector< unsigned int > *argp2 ;
  pagmo::de1220 *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  argp2 = (std::vector< unsigned int > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::vector< unsigned int >", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (double)jarg4; 
  result = (pagmo::de1220 *)new pagmo::de1220(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_de1220__SWIG_4(unsigned int jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  unsigned int arg1 ;
  std::vector< unsigned int > arg2 ;
  unsigned int arg3 ;
  std::vector< unsigned int > *argp2 ;
  pagmo::de1220 *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  argp2 = (std::vector< unsigned int > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::vector< unsigned int >", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (unsigned int)jarg3; 
  result = (pagmo::de1220 *)new pagmo::de1220(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_de1220__SWIG_5(unsigned int jarg1, void * jarg2) {
  void * jresult ;
  unsigned int arg1 ;
  std::vector< unsigned int > arg2 ;
  std::vector< unsigned int > *argp2 ;
  pagmo::de1220 *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  argp2 = (std::vector< unsigned int > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::vector< unsigned int >", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (pagmo::de1220 *)new pagmo::de1220(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_de1220__SWIG_6(unsigned int jarg1) {
  void * jresult ;
  unsigned int arg1 ;
  pagmo::de1220 *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  result = (pagmo::de1220 *)new pagmo::de1220(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_de1220__SWIG_7() {
  void * jresult ;
  pagmo::de1220 *result = 0 ;
  
  result = (pagmo::de1220 *)new pagmo::de1220();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_de1220_evolve(void * jarg1, void * jarg2) {
  void * jresult ;
  pagmo::de1220 *arg1 = (pagmo::de1220 *) 0 ;
  SwigValueWrapper< pagmo::population > arg2 ;
  pagmo::population *argp2 ;
  SwigValueWrapper< pagmo::population > result;
  
  arg1 = (pagmo::de1220 *)jarg1; 
  argp2 = (pagmo::population *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null pagmo::population", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = ((pagmo::de1220 const *)arg1)->evolve(arg2);
  jresult = new pagmo::population(result); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_pagmo_de1220_get_name(void * jarg1) {
  const char * jresult ;
  pagmo::de1220 *arg1 = (pagmo::de1220 *) 0 ;
  std::string result;
  
  arg1 = (pagmo::de1220 *)jarg1; 
  result = ((pagmo::de1220 const *)arg1)->get_name();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_de1220_set_seed(void * jarg1, unsigned int jarg2) {
  pagmo::de1220 *arg1 = (pagmo::de1220 *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pagmo::de1220 *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->set_seed(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pagmo_de1220_get_gen(void * jarg1) {
  unsigned int jresult ;
  pagmo::de1220 *arg1 = (pagmo::de1220 *) 0 ;
  unsigned int result;
  
  arg1 = (pagmo::de1220 *)jarg1; 
  result = (unsigned int)((pagmo::de1220 const *)arg1)->get_gen();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pagmo_de1220_get_seed(void * jarg1) {
  unsigned int jresult ;
  pagmo::de1220 *arg1 = (pagmo::de1220 *) 0 ;
  unsigned int result;
  
  arg1 = (pagmo::de1220 *)jarg1; 
  result = (unsigned int)((pagmo::de1220 const *)arg1)->get_seed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pagmo_de1220_get_verbosity(void * jarg1) {
  unsigned int jresult ;
  pagmo::de1220 *arg1 = (pagmo::de1220 *) 0 ;
  unsigned int result;
  
  arg1 = (pagmo::de1220 *)jarg1; 
  result = (unsigned int)((pagmo::de1220 const *)arg1)->get_verbosity();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_de1220_set_verbosity(void * jarg1, unsigned int jarg2) {
  pagmo::de1220 *arg1 = (pagmo::de1220 *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pagmo::de1220 *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->set_verbosity(arg2);
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_pagmo_de1220_get_extra_info(void * jarg1) {
  const char * jresult ;
  pagmo::de1220 *arg1 = (pagmo::de1220 *) 0 ;
  std::string result;
  
  arg1 = (pagmo::de1220 *)jarg1; 
  result = ((pagmo::de1220 const *)arg1)->get_extra_info();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_de1220_get_log(void * jarg1) {
  void * jresult ;
  pagmo::de1220 *arg1 = (pagmo::de1220 *) 0 ;
  pagmo::de1220::log_type *result = 0 ;
  
  arg1 = (pagmo::de1220 *)jarg1; 
  result = (pagmo::de1220::log_type *) &((pagmo::de1220 const *)arg1)->get_log();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_delete_de1220(void * jarg1) {
  pagmo::de1220 *arg1 = (pagmo::de1220 *) 0 ;
  
  arg1 = (pagmo::de1220 *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_gaco__SWIG_0(unsigned int jarg1, unsigned int jarg2, double jarg3, double jarg4, double jarg5, unsigned int jarg6, unsigned int jarg7, unsigned int jarg8, unsigned int jarg9, double jarg10, unsigned int jarg11, unsigned int jarg12) {
  void * jresult ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  unsigned int arg6 ;
  unsigned int arg7 ;
  unsigned int arg8 ;
  unsigned int arg9 ;
  double arg10 ;
  bool arg11 ;
  unsigned int arg12 ;
  pagmo::gaco *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (unsigned int)jarg6; 
  arg7 = (unsigned int)jarg7; 
  arg8 = (unsigned int)jarg8; 
  arg9 = (unsigned int)jarg9; 
  arg10 = (double)jarg10; 
  arg11 = jarg11 ? true : false; 
  arg12 = (unsigned int)jarg12; 
  result = (pagmo::gaco *)new pagmo::gaco(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_gaco__SWIG_1(unsigned int jarg1, unsigned int jarg2, double jarg3, double jarg4, double jarg5, unsigned int jarg6, unsigned int jarg7, unsigned int jarg8, unsigned int jarg9, double jarg10, unsigned int jarg11) {
  void * jresult ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  unsigned int arg6 ;
  unsigned int arg7 ;
  unsigned int arg8 ;
  unsigned int arg9 ;
  double arg10 ;
  bool arg11 ;
  pagmo::gaco *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (unsigned int)jarg6; 
  arg7 = (unsigned int)jarg7; 
  arg8 = (unsigned int)jarg8; 
  arg9 = (unsigned int)jarg9; 
  arg10 = (double)jarg10; 
  arg11 = jarg11 ? true : false; 
  result = (pagmo::gaco *)new pagmo::gaco(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_gaco__SWIG_2(unsigned int jarg1, unsigned int jarg2, double jarg3, double jarg4, double jarg5, unsigned int jarg6, unsigned int jarg7, unsigned int jarg8, unsigned int jarg9, double jarg10) {
  void * jresult ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  unsigned int arg6 ;
  unsigned int arg7 ;
  unsigned int arg8 ;
  unsigned int arg9 ;
  double arg10 ;
  pagmo::gaco *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (unsigned int)jarg6; 
  arg7 = (unsigned int)jarg7; 
  arg8 = (unsigned int)jarg8; 
  arg9 = (unsigned int)jarg9; 
  arg10 = (double)jarg10; 
  result = (pagmo::gaco *)new pagmo::gaco(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_gaco__SWIG_3(unsigned int jarg1, unsigned int jarg2, double jarg3, double jarg4, double jarg5, unsigned int jarg6, unsigned int jarg7, unsigned int jarg8, unsigned int jarg9) {
  void * jresult ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  unsigned int arg6 ;
  unsigned int arg7 ;
  unsigned int arg8 ;
  unsigned int arg9 ;
  pagmo::gaco *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (unsigned int)jarg6; 
  arg7 = (unsigned int)jarg7; 
  arg8 = (unsigned int)jarg8; 
  arg9 = (unsigned int)jarg9; 
  result = (pagmo::gaco *)new pagmo::gaco(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_gaco__SWIG_4(unsigned int jarg1, unsigned int jarg2, double jarg3, double jarg4, double jarg5, unsigned int jarg6, unsigned int jarg7, unsigned int jarg8) {
  void * jresult ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  unsigned int arg6 ;
  unsigned int arg7 ;
  unsigned int arg8 ;
  pagmo::gaco *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (unsigned int)jarg6; 
  arg7 = (unsigned int)jarg7; 
  arg8 = (unsigned int)jarg8; 
  result = (pagmo::gaco *)new pagmo::gaco(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_gaco__SWIG_5(unsigned int jarg1, unsigned int jarg2, double jarg3, double jarg4, double jarg5, unsigned int jarg6, unsigned int jarg7) {
  void * jresult ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  unsigned int arg6 ;
  unsigned int arg7 ;
  pagmo::gaco *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (unsigned int)jarg6; 
  arg7 = (unsigned int)jarg7; 
  result = (pagmo::gaco *)new pagmo::gaco(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_gaco__SWIG_6(unsigned int jarg1, unsigned int jarg2, double jarg3, double jarg4, double jarg5, unsigned int jarg6) {
  void * jresult ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  unsigned int arg6 ;
  pagmo::gaco *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (unsigned int)jarg6; 
  result = (pagmo::gaco *)new pagmo::gaco(arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_gaco__SWIG_7(unsigned int jarg1, unsigned int jarg2, double jarg3, double jarg4, double jarg5) {
  void * jresult ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  pagmo::gaco *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  result = (pagmo::gaco *)new pagmo::gaco(arg1,arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_gaco__SWIG_8(unsigned int jarg1, unsigned int jarg2, double jarg3, double jarg4) {
  void * jresult ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  double arg3 ;
  double arg4 ;
  pagmo::gaco *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  result = (pagmo::gaco *)new pagmo::gaco(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_gaco__SWIG_9(unsigned int jarg1, unsigned int jarg2, double jarg3) {
  void * jresult ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  double arg3 ;
  pagmo::gaco *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (double)jarg3; 
  result = (pagmo::gaco *)new pagmo::gaco(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_gaco__SWIG_10(unsigned int jarg1, unsigned int jarg2) {
  void * jresult ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  pagmo::gaco *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (pagmo::gaco *)new pagmo::gaco(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_gaco__SWIG_11(unsigned int jarg1) {
  void * jresult ;
  unsigned int arg1 ;
  pagmo::gaco *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  result = (pagmo::gaco *)new pagmo::gaco(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_gaco__SWIG_12() {
  void * jresult ;
  pagmo::gaco *result = 0 ;
  
  result = (pagmo::gaco *)new pagmo::gaco();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pagmo_gaco_get_gen(void * jarg1) {
  unsigned int jresult ;
  pagmo::gaco *arg1 = (pagmo::gaco *) 0 ;
  unsigned int result;
  
  arg1 = (pagmo::gaco *)jarg1; 
  result = (unsigned int)((pagmo::gaco const *)arg1)->get_gen();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_gaco_evolve(void * jarg1, void * jarg2) {
  void * jresult ;
  pagmo::gaco *arg1 = (pagmo::gaco *) 0 ;
  SwigValueWrapper< pagmo::population > arg2 ;
  pagmo::population *argp2 ;
  SwigValueWrapper< pagmo::population > result;
  
  arg1 = (pagmo::gaco *)jarg1; 
  argp2 = (pagmo::population *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null pagmo::population", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = ((pagmo::gaco const *)arg1)->evolve(arg2);
  jresult = new pagmo::population(result); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_pagmo_gaco_get_name(void * jarg1) {
  const char * jresult ;
  pagmo::gaco *arg1 = (pagmo::gaco *) 0 ;
  std::string result;
  
  arg1 = (pagmo::gaco *)jarg1; 
  result = ((pagmo::gaco const *)arg1)->get_name();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_gaco_set_seed(void * jarg1, unsigned int jarg2) {
  pagmo::gaco *arg1 = (pagmo::gaco *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pagmo::gaco *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->set_seed(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pagmo_gaco_get_seed(void * jarg1) {
  unsigned int jresult ;
  pagmo::gaco *arg1 = (pagmo::gaco *) 0 ;
  unsigned int result;
  
  arg1 = (pagmo::gaco *)jarg1; 
  result = (unsigned int)((pagmo::gaco const *)arg1)->get_seed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pagmo_gaco_get_verbosity(void * jarg1) {
  unsigned int jresult ;
  pagmo::gaco *arg1 = (pagmo::gaco *) 0 ;
  unsigned int result;
  
  arg1 = (pagmo::gaco *)jarg1; 
  result = (unsigned int)((pagmo::gaco const *)arg1)->get_verbosity();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_gaco_set_verbosity(void * jarg1, unsigned int jarg2) {
  pagmo::gaco *arg1 = (pagmo::gaco *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pagmo::gaco *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->set_verbosity(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_gaco_set_bfe(void * jarg1, void * jarg2) {
  pagmo::gaco *arg1 = (pagmo::gaco *) 0 ;
  pagmo::bfe *arg2 = 0 ;
  
  arg1 = (pagmo::gaco *)jarg1; 
  arg2 = (pagmo::bfe *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pagmo::bfe const & is null", 0);
    return ;
  } 
  (arg1)->set_bfe((pagmo::bfe const &)*arg2);
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_pagmo_gaco_get_extra_info(void * jarg1) {
  const char * jresult ;
  pagmo::gaco *arg1 = (pagmo::gaco *) 0 ;
  std::string result;
  
  arg1 = (pagmo::gaco *)jarg1; 
  result = ((pagmo::gaco const *)arg1)->get_extra_info();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_gaco_get_log(void * jarg1) {
  void * jresult ;
  pagmo::gaco *arg1 = (pagmo::gaco *) 0 ;
  pagmo::gaco::log_type *result = 0 ;
  
  arg1 = (pagmo::gaco *)jarg1; 
  result = (pagmo::gaco::log_type *) &((pagmo::gaco const *)arg1)->get_log();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_delete_gaco(void * jarg1) {
  pagmo::gaco *arg1 = (pagmo::gaco *) 0 ;
  
  arg1 = (pagmo::gaco *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_gwo__SWIG_0(unsigned int jarg1, unsigned int jarg2) {
  void * jresult ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  pagmo::gwo *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (pagmo::gwo *)new pagmo::gwo(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_gwo__SWIG_1(unsigned int jarg1) {
  void * jresult ;
  unsigned int arg1 ;
  pagmo::gwo *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  result = (pagmo::gwo *)new pagmo::gwo(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_gwo__SWIG_2() {
  void * jresult ;
  pagmo::gwo *result = 0 ;
  
  result = (pagmo::gwo *)new pagmo::gwo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_gwo_evolve(void * jarg1, void * jarg2) {
  void * jresult ;
  pagmo::gwo *arg1 = (pagmo::gwo *) 0 ;
  SwigValueWrapper< pagmo::population > arg2 ;
  pagmo::population *argp2 ;
  SwigValueWrapper< pagmo::population > result;
  
  arg1 = (pagmo::gwo *)jarg1; 
  argp2 = (pagmo::population *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null pagmo::population", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = ((pagmo::gwo const *)arg1)->evolve(arg2);
  jresult = new pagmo::population(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_gwo_set_seed(void * jarg1, unsigned int jarg2) {
  pagmo::gwo *arg1 = (pagmo::gwo *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pagmo::gwo *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->set_seed(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pagmo_gwo_get_seed(void * jarg1) {
  unsigned int jresult ;
  pagmo::gwo *arg1 = (pagmo::gwo *) 0 ;
  unsigned int result;
  
  arg1 = (pagmo::gwo *)jarg1; 
  result = (unsigned int)((pagmo::gwo const *)arg1)->get_seed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_gwo_set_verbosity(void * jarg1, unsigned int jarg2) {
  pagmo::gwo *arg1 = (pagmo::gwo *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pagmo::gwo *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->set_verbosity(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pagmo_gwo_get_verbosity(void * jarg1) {
  unsigned int jresult ;
  pagmo::gwo *arg1 = (pagmo::gwo *) 0 ;
  unsigned int result;
  
  arg1 = (pagmo::gwo *)jarg1; 
  result = (unsigned int)((pagmo::gwo const *)arg1)->get_verbosity();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pagmo_gwo_get_gen(void * jarg1) {
  unsigned int jresult ;
  pagmo::gwo *arg1 = (pagmo::gwo *) 0 ;
  unsigned int result;
  
  arg1 = (pagmo::gwo *)jarg1; 
  result = (unsigned int)((pagmo::gwo const *)arg1)->get_gen();
  jresult = result; 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_pagmo_gwo_get_name(void * jarg1) {
  const char * jresult ;
  pagmo::gwo *arg1 = (pagmo::gwo *) 0 ;
  std::string result;
  
  arg1 = (pagmo::gwo *)jarg1; 
  result = ((pagmo::gwo const *)arg1)->get_name();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_pagmo_gwo_get_extra_info(void * jarg1) {
  const char * jresult ;
  pagmo::gwo *arg1 = (pagmo::gwo *) 0 ;
  std::string result;
  
  arg1 = (pagmo::gwo *)jarg1; 
  result = ((pagmo::gwo const *)arg1)->get_extra_info();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_gwo_get_log(void * jarg1) {
  void * jresult ;
  pagmo::gwo *arg1 = (pagmo::gwo *) 0 ;
  pagmo::gwo::log_type *result = 0 ;
  
  arg1 = (pagmo::gwo *)jarg1; 
  result = (pagmo::gwo::log_type *) &((pagmo::gwo const *)arg1)->get_log();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_delete_gwo(void * jarg1) {
  pagmo::gwo *arg1 = (pagmo::gwo *) 0 ;
  
  arg1 = (pagmo::gwo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_nlopt__SWIG_0() {
  void * jresult ;
  pagmo::nlopt *result = 0 ;
  
  result = (pagmo::nlopt *)new pagmo::nlopt();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_nlopt__SWIG_1(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  pagmo::nlopt *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (pagmo::nlopt *)new pagmo::nlopt((std::string const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_nlopt__SWIG_2(void * jarg1) {
  void * jresult ;
  pagmo::nlopt *arg1 = 0 ;
  pagmo::nlopt *result = 0 ;
  
  arg1 = (pagmo::nlopt *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pagmo::nlopt const & is null", 0);
    return 0;
  } 
  result = (pagmo::nlopt *)new pagmo::nlopt((pagmo::nlopt const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_nlopt_evolve(void * jarg1, void * jarg2) {
  void * jresult ;
  pagmo::nlopt *arg1 = (pagmo::nlopt *) 0 ;
  SwigValueWrapper< pagmo::population > arg2 ;
  pagmo::population *argp2 ;
  SwigValueWrapper< pagmo::population > result;
  
  arg1 = (pagmo::nlopt *)jarg1; 
  argp2 = (pagmo::population *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null pagmo::population", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = ((pagmo::nlopt const *)arg1)->evolve(arg2);
  jresult = new pagmo::population(result); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_pagmo_nlopt_get_name(void * jarg1) {
  const char * jresult ;
  pagmo::nlopt *arg1 = (pagmo::nlopt *) 0 ;
  std::string result;
  
  arg1 = (pagmo::nlopt *)jarg1; 
  result = ((pagmo::nlopt const *)arg1)->get_name();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_nlopt_set_verbosity(void * jarg1, unsigned int jarg2) {
  pagmo::nlopt *arg1 = (pagmo::nlopt *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pagmo::nlopt *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->set_verbosity(arg2);
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_pagmo_nlopt_get_extra_info(void * jarg1) {
  const char * jresult ;
  pagmo::nlopt *arg1 = (pagmo::nlopt *) 0 ;
  std::string result;
  
  arg1 = (pagmo::nlopt *)jarg1; 
  result = ((pagmo::nlopt const *)arg1)->get_extra_info();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_nlopt_get_log(void * jarg1) {
  void * jresult ;
  pagmo::nlopt *arg1 = (pagmo::nlopt *) 0 ;
  pagmo::nlopt::log_type *result = 0 ;
  
  arg1 = (pagmo::nlopt *)jarg1; 
  result = (pagmo::nlopt::log_type *) &((pagmo::nlopt const *)arg1)->get_log();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_pagmo_nlopt_get_solver_name(void * jarg1) {
  const char * jresult ;
  pagmo::nlopt *arg1 = (pagmo::nlopt *) 0 ;
  std::string result;
  
  arg1 = (pagmo::nlopt *)jarg1; 
  result = ((pagmo::nlopt const *)arg1)->get_solver_name();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_nlopt_get_last_opt_result(void * jarg1) {
  void * jresult ;
  pagmo::nlopt *arg1 = (pagmo::nlopt *) 0 ;
  ::nlopt_result result;
  
  arg1 = (pagmo::nlopt *)jarg1; 
  result = ((pagmo::nlopt const *)arg1)->get_last_opt_result();
  jresult = new ::nlopt_result(result); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_pagmo_nlopt_get_stopval(void * jarg1) {
  double jresult ;
  pagmo::nlopt *arg1 = (pagmo::nlopt *) 0 ;
  double result;
  
  arg1 = (pagmo::nlopt *)jarg1; 
  result = (double)((pagmo::nlopt const *)arg1)->get_stopval();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_nlopt_set_stopval(void * jarg1, double jarg2) {
  pagmo::nlopt *arg1 = (pagmo::nlopt *) 0 ;
  double arg2 ;
  
  arg1 = (pagmo::nlopt *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->set_stopval(arg2);
}


SWIGEXPORT double SWIGSTDCALL CSharp_pagmo_nlopt_get_ftol_rel(void * jarg1) {
  double jresult ;
  pagmo::nlopt *arg1 = (pagmo::nlopt *) 0 ;
  double result;
  
  arg1 = (pagmo::nlopt *)jarg1; 
  result = (double)((pagmo::nlopt const *)arg1)->get_ftol_rel();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_nlopt_set_ftol_rel(void * jarg1, double jarg2) {
  pagmo::nlopt *arg1 = (pagmo::nlopt *) 0 ;
  double arg2 ;
  
  arg1 = (pagmo::nlopt *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->set_ftol_rel(arg2);
}


SWIGEXPORT double SWIGSTDCALL CSharp_pagmo_nlopt_get_ftol_abs(void * jarg1) {
  double jresult ;
  pagmo::nlopt *arg1 = (pagmo::nlopt *) 0 ;
  double result;
  
  arg1 = (pagmo::nlopt *)jarg1; 
  result = (double)((pagmo::nlopt const *)arg1)->get_ftol_abs();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_nlopt_set_ftol_abs(void * jarg1, double jarg2) {
  pagmo::nlopt *arg1 = (pagmo::nlopt *) 0 ;
  double arg2 ;
  
  arg1 = (pagmo::nlopt *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->set_ftol_abs(arg2);
}


SWIGEXPORT double SWIGSTDCALL CSharp_pagmo_nlopt_get_xtol_rel(void * jarg1) {
  double jresult ;
  pagmo::nlopt *arg1 = (pagmo::nlopt *) 0 ;
  double result;
  
  arg1 = (pagmo::nlopt *)jarg1; 
  result = (double)((pagmo::nlopt const *)arg1)->get_xtol_rel();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_nlopt_set_xtol_rel(void * jarg1, double jarg2) {
  pagmo::nlopt *arg1 = (pagmo::nlopt *) 0 ;
  double arg2 ;
  
  arg1 = (pagmo::nlopt *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->set_xtol_rel(arg2);
}


SWIGEXPORT double SWIGSTDCALL CSharp_pagmo_nlopt_get_xtol_abs(void * jarg1) {
  double jresult ;
  pagmo::nlopt *arg1 = (pagmo::nlopt *) 0 ;
  double result;
  
  arg1 = (pagmo::nlopt *)jarg1; 
  result = (double)((pagmo::nlopt const *)arg1)->get_xtol_abs();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_nlopt_set_xtol_abs(void * jarg1, double jarg2) {
  pagmo::nlopt *arg1 = (pagmo::nlopt *) 0 ;
  double arg2 ;
  
  arg1 = (pagmo::nlopt *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->set_xtol_abs(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_pagmo_nlopt_get_maxeval(void * jarg1) {
  int jresult ;
  pagmo::nlopt *arg1 = (pagmo::nlopt *) 0 ;
  int result;
  
  arg1 = (pagmo::nlopt *)jarg1; 
  result = (int)((pagmo::nlopt const *)arg1)->get_maxeval();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_nlopt_set_maxeval(void * jarg1, int jarg2) {
  pagmo::nlopt *arg1 = (pagmo::nlopt *) 0 ;
  int arg2 ;
  
  arg1 = (pagmo::nlopt *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->set_maxeval(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_pagmo_nlopt_get_maxtime(void * jarg1) {
  int jresult ;
  pagmo::nlopt *arg1 = (pagmo::nlopt *) 0 ;
  int result;
  
  arg1 = (pagmo::nlopt *)jarg1; 
  result = (int)((pagmo::nlopt const *)arg1)->get_maxtime();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_nlopt_set_maxtime(void * jarg1, int jarg2) {
  pagmo::nlopt *arg1 = (pagmo::nlopt *) 0 ;
  int arg2 ;
  
  arg1 = (pagmo::nlopt *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->set_maxtime(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_nlopt_get_local_optimizer__SWIG_0(void * jarg1) {
  void * jresult ;
  pagmo::nlopt *arg1 = (pagmo::nlopt *) 0 ;
  pagmo::nlopt *result = 0 ;
  
  arg1 = (pagmo::nlopt *)jarg1; 
  result = (pagmo::nlopt *)((pagmo::nlopt const *)arg1)->get_local_optimizer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_nlopt_unset_local_optimizer(void * jarg1) {
  pagmo::nlopt *arg1 = (pagmo::nlopt *) 0 ;
  
  arg1 = (pagmo::nlopt *)jarg1; 
  (arg1)->unset_local_optimizer();
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_delete_nlopt(void * jarg1) {
  pagmo::nlopt *arg1 = (pagmo::nlopt *) 0 ;
  
  arg1 = (pagmo::nlopt *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_nspso__SWIG_0(unsigned int jarg1, double jarg2, double jarg3, double jarg4, double jarg5, double jarg6, unsigned int jarg7, const char * jarg8, unsigned int jarg9, unsigned int jarg10) {
  void * jresult ;
  unsigned int arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  unsigned int arg7 ;
  std::string arg8 ;
  bool arg9 ;
  unsigned int arg10 ;
  pagmo::nspso *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (unsigned int)jarg7; 
  if (!jarg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg8)->assign(jarg8); 
  arg9 = jarg9 ? true : false; 
  arg10 = (unsigned int)jarg10; 
  result = (pagmo::nspso *)new pagmo::nspso(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_nspso__SWIG_1(unsigned int jarg1, double jarg2, double jarg3, double jarg4, double jarg5, double jarg6, unsigned int jarg7, const char * jarg8, unsigned int jarg9) {
  void * jresult ;
  unsigned int arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  unsigned int arg7 ;
  std::string arg8 ;
  bool arg9 ;
  pagmo::nspso *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (unsigned int)jarg7; 
  if (!jarg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg8)->assign(jarg8); 
  arg9 = jarg9 ? true : false; 
  result = (pagmo::nspso *)new pagmo::nspso(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_nspso__SWIG_2(unsigned int jarg1, double jarg2, double jarg3, double jarg4, double jarg5, double jarg6, unsigned int jarg7, const char * jarg8) {
  void * jresult ;
  unsigned int arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  unsigned int arg7 ;
  std::string arg8 ;
  pagmo::nspso *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (unsigned int)jarg7; 
  if (!jarg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg8)->assign(jarg8); 
  result = (pagmo::nspso *)new pagmo::nspso(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_nspso__SWIG_3(unsigned int jarg1, double jarg2, double jarg3, double jarg4, double jarg5, double jarg6, unsigned int jarg7) {
  void * jresult ;
  unsigned int arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  unsigned int arg7 ;
  pagmo::nspso *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (unsigned int)jarg7; 
  result = (pagmo::nspso *)new pagmo::nspso(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_nspso__SWIG_4(unsigned int jarg1, double jarg2, double jarg3, double jarg4, double jarg5, double jarg6) {
  void * jresult ;
  unsigned int arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  pagmo::nspso *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  result = (pagmo::nspso *)new pagmo::nspso(arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_nspso__SWIG_5(unsigned int jarg1, double jarg2, double jarg3, double jarg4, double jarg5) {
  void * jresult ;
  unsigned int arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  pagmo::nspso *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  result = (pagmo::nspso *)new pagmo::nspso(arg1,arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_nspso__SWIG_6(unsigned int jarg1, double jarg2, double jarg3, double jarg4) {
  void * jresult ;
  unsigned int arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  pagmo::nspso *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  result = (pagmo::nspso *)new pagmo::nspso(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_nspso__SWIG_7(unsigned int jarg1, double jarg2, double jarg3) {
  void * jresult ;
  unsigned int arg1 ;
  double arg2 ;
  double arg3 ;
  pagmo::nspso *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (pagmo::nspso *)new pagmo::nspso(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_nspso__SWIG_8(unsigned int jarg1, double jarg2) {
  void * jresult ;
  unsigned int arg1 ;
  double arg2 ;
  pagmo::nspso *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (double)jarg2; 
  result = (pagmo::nspso *)new pagmo::nspso(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_nspso__SWIG_9(unsigned int jarg1) {
  void * jresult ;
  unsigned int arg1 ;
  pagmo::nspso *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  result = (pagmo::nspso *)new pagmo::nspso(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_nspso__SWIG_10() {
  void * jresult ;
  pagmo::nspso *result = 0 ;
  
  result = (pagmo::nspso *)new pagmo::nspso();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_nspso_evolve(void * jarg1, void * jarg2) {
  void * jresult ;
  pagmo::nspso *arg1 = (pagmo::nspso *) 0 ;
  SwigValueWrapper< pagmo::population > arg2 ;
  pagmo::population *argp2 ;
  SwigValueWrapper< pagmo::population > result;
  
  arg1 = (pagmo::nspso *)jarg1; 
  argp2 = (pagmo::population *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null pagmo::population", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = ((pagmo::nspso const *)arg1)->evolve(arg2);
  jresult = new pagmo::population(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_nspso_set_seed(void * jarg1, unsigned int jarg2) {
  pagmo::nspso *arg1 = (pagmo::nspso *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pagmo::nspso *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->set_seed(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pagmo_nspso_get_seed(void * jarg1) {
  unsigned int jresult ;
  pagmo::nspso *arg1 = (pagmo::nspso *) 0 ;
  unsigned int result;
  
  arg1 = (pagmo::nspso *)jarg1; 
  result = (unsigned int)((pagmo::nspso const *)arg1)->get_seed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_nspso_set_verbosity(void * jarg1, unsigned int jarg2) {
  pagmo::nspso *arg1 = (pagmo::nspso *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pagmo::nspso *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->set_verbosity(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pagmo_nspso_get_verbosity(void * jarg1) {
  unsigned int jresult ;
  pagmo::nspso *arg1 = (pagmo::nspso *) 0 ;
  unsigned int result;
  
  arg1 = (pagmo::nspso *)jarg1; 
  result = (unsigned int)((pagmo::nspso const *)arg1)->get_verbosity();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pagmo_nspso_get_gen(void * jarg1) {
  unsigned int jresult ;
  pagmo::nspso *arg1 = (pagmo::nspso *) 0 ;
  unsigned int result;
  
  arg1 = (pagmo::nspso *)jarg1; 
  result = (unsigned int)((pagmo::nspso const *)arg1)->get_gen();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_nspso_set_bfe(void * jarg1, void * jarg2) {
  pagmo::nspso *arg1 = (pagmo::nspso *) 0 ;
  pagmo::bfe *arg2 = 0 ;
  
  arg1 = (pagmo::nspso *)jarg1; 
  arg2 = (pagmo::bfe *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pagmo::bfe const & is null", 0);
    return ;
  } 
  (arg1)->set_bfe((pagmo::bfe const &)*arg2);
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_pagmo_nspso_get_name(void * jarg1) {
  const char * jresult ;
  pagmo::nspso *arg1 = (pagmo::nspso *) 0 ;
  std::string result;
  
  arg1 = (pagmo::nspso *)jarg1; 
  result = ((pagmo::nspso const *)arg1)->get_name();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_pagmo_nspso_get_extra_info(void * jarg1) {
  const char * jresult ;
  pagmo::nspso *arg1 = (pagmo::nspso *) 0 ;
  std::string result;
  
  arg1 = (pagmo::nspso *)jarg1; 
  result = ((pagmo::nspso const *)arg1)->get_extra_info();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_nspso_get_log(void * jarg1) {
  void * jresult ;
  pagmo::nspso *arg1 = (pagmo::nspso *) 0 ;
  pagmo::nspso::log_type *result = 0 ;
  
  arg1 = (pagmo::nspso *)jarg1; 
  result = (pagmo::nspso::log_type *) &((pagmo::nspso const *)arg1)->get_log();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_delete_nspso(void * jarg1) {
  pagmo::nspso *arg1 = (pagmo::nspso *) 0 ;
  
  arg1 = (pagmo::nspso *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_pso__SWIG_0(unsigned int jarg1, double jarg2, double jarg3, double jarg4, double jarg5, unsigned int jarg6, unsigned int jarg7, unsigned int jarg8, unsigned int jarg9, unsigned int jarg10) {
  void * jresult ;
  unsigned int arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  unsigned int arg6 ;
  unsigned int arg7 ;
  unsigned int arg8 ;
  bool arg9 ;
  unsigned int arg10 ;
  pagmo::pso *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (unsigned int)jarg6; 
  arg7 = (unsigned int)jarg7; 
  arg8 = (unsigned int)jarg8; 
  arg9 = jarg9 ? true : false; 
  arg10 = (unsigned int)jarg10; 
  result = (pagmo::pso *)new pagmo::pso(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_pso__SWIG_1(unsigned int jarg1, double jarg2, double jarg3, double jarg4, double jarg5, unsigned int jarg6, unsigned int jarg7, unsigned int jarg8, unsigned int jarg9) {
  void * jresult ;
  unsigned int arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  unsigned int arg6 ;
  unsigned int arg7 ;
  unsigned int arg8 ;
  bool arg9 ;
  pagmo::pso *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (unsigned int)jarg6; 
  arg7 = (unsigned int)jarg7; 
  arg8 = (unsigned int)jarg8; 
  arg9 = jarg9 ? true : false; 
  result = (pagmo::pso *)new pagmo::pso(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_pso__SWIG_2(unsigned int jarg1, double jarg2, double jarg3, double jarg4, double jarg5, unsigned int jarg6, unsigned int jarg7, unsigned int jarg8) {
  void * jresult ;
  unsigned int arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  unsigned int arg6 ;
  unsigned int arg7 ;
  unsigned int arg8 ;
  pagmo::pso *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (unsigned int)jarg6; 
  arg7 = (unsigned int)jarg7; 
  arg8 = (unsigned int)jarg8; 
  result = (pagmo::pso *)new pagmo::pso(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_pso__SWIG_3(unsigned int jarg1, double jarg2, double jarg3, double jarg4, double jarg5, unsigned int jarg6, unsigned int jarg7) {
  void * jresult ;
  unsigned int arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  unsigned int arg6 ;
  unsigned int arg7 ;
  pagmo::pso *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (unsigned int)jarg6; 
  arg7 = (unsigned int)jarg7; 
  result = (pagmo::pso *)new pagmo::pso(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_pso__SWIG_4(unsigned int jarg1, double jarg2, double jarg3, double jarg4, double jarg5, unsigned int jarg6) {
  void * jresult ;
  unsigned int arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  unsigned int arg6 ;
  pagmo::pso *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (unsigned int)jarg6; 
  result = (pagmo::pso *)new pagmo::pso(arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_pso__SWIG_5(unsigned int jarg1, double jarg2, double jarg3, double jarg4, double jarg5) {
  void * jresult ;
  unsigned int arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  pagmo::pso *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  result = (pagmo::pso *)new pagmo::pso(arg1,arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_pso__SWIG_6(unsigned int jarg1, double jarg2, double jarg3, double jarg4) {
  void * jresult ;
  unsigned int arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  pagmo::pso *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  result = (pagmo::pso *)new pagmo::pso(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_pso__SWIG_7(unsigned int jarg1, double jarg2, double jarg3) {
  void * jresult ;
  unsigned int arg1 ;
  double arg2 ;
  double arg3 ;
  pagmo::pso *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (pagmo::pso *)new pagmo::pso(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_pso__SWIG_8(unsigned int jarg1, double jarg2) {
  void * jresult ;
  unsigned int arg1 ;
  double arg2 ;
  pagmo::pso *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (double)jarg2; 
  result = (pagmo::pso *)new pagmo::pso(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_pso__SWIG_9(unsigned int jarg1) {
  void * jresult ;
  unsigned int arg1 ;
  pagmo::pso *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  result = (pagmo::pso *)new pagmo::pso(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_pso__SWIG_10() {
  void * jresult ;
  pagmo::pso *result = 0 ;
  
  result = (pagmo::pso *)new pagmo::pso();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_pso_evolve(void * jarg1, void * jarg2) {
  void * jresult ;
  pagmo::pso *arg1 = (pagmo::pso *) 0 ;
  SwigValueWrapper< pagmo::population > arg2 ;
  pagmo::population *argp2 ;
  SwigValueWrapper< pagmo::population > result;
  
  arg1 = (pagmo::pso *)jarg1; 
  argp2 = (pagmo::population *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null pagmo::population", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = ((pagmo::pso const *)arg1)->evolve(arg2);
  jresult = new pagmo::population(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_pso_set_verbosity(void * jarg1, unsigned int jarg2) {
  pagmo::pso *arg1 = (pagmo::pso *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pagmo::pso *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->set_verbosity(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pagmo_pso_get_verbosity(void * jarg1) {
  unsigned int jresult ;
  pagmo::pso *arg1 = (pagmo::pso *) 0 ;
  unsigned int result;
  
  arg1 = (pagmo::pso *)jarg1; 
  result = (unsigned int)((pagmo::pso const *)arg1)->get_verbosity();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_pso_set_seed(void * jarg1, unsigned int jarg2) {
  pagmo::pso *arg1 = (pagmo::pso *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pagmo::pso *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->set_seed(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pagmo_pso_get_seed(void * jarg1) {
  unsigned int jresult ;
  pagmo::pso *arg1 = (pagmo::pso *) 0 ;
  unsigned int result;
  
  arg1 = (pagmo::pso *)jarg1; 
  result = (unsigned int)((pagmo::pso const *)arg1)->get_seed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_pagmo_pso_get_name(void * jarg1) {
  const char * jresult ;
  pagmo::pso *arg1 = (pagmo::pso *) 0 ;
  std::string result;
  
  arg1 = (pagmo::pso *)jarg1; 
  result = ((pagmo::pso const *)arg1)->get_name();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_pagmo_pso_get_extra_info(void * jarg1) {
  const char * jresult ;
  pagmo::pso *arg1 = (pagmo::pso *) 0 ;
  std::string result;
  
  arg1 = (pagmo::pso *)jarg1; 
  result = ((pagmo::pso const *)arg1)->get_extra_info();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_pso_get_log(void * jarg1) {
  void * jresult ;
  pagmo::pso *arg1 = (pagmo::pso *) 0 ;
  pagmo::pso::log_type *result = 0 ;
  
  arg1 = (pagmo::pso *)jarg1; 
  result = (pagmo::pso::log_type *) &((pagmo::pso const *)arg1)->get_log();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_delete_pso(void * jarg1) {
  pagmo::pso *arg1 = (pagmo::pso *) 0 ;
  
  arg1 = (pagmo::pso *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_pso_gen__SWIG_0(unsigned int jarg1, double jarg2, double jarg3, double jarg4, double jarg5, unsigned int jarg6, unsigned int jarg7, unsigned int jarg8, unsigned int jarg9, unsigned int jarg10) {
  void * jresult ;
  unsigned int arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  unsigned int arg6 ;
  unsigned int arg7 ;
  unsigned int arg8 ;
  bool arg9 ;
  unsigned int arg10 ;
  pagmo::pso_gen *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (unsigned int)jarg6; 
  arg7 = (unsigned int)jarg7; 
  arg8 = (unsigned int)jarg8; 
  arg9 = jarg9 ? true : false; 
  arg10 = (unsigned int)jarg10; 
  result = (pagmo::pso_gen *)new pagmo::pso_gen(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_pso_gen__SWIG_1(unsigned int jarg1, double jarg2, double jarg3, double jarg4, double jarg5, unsigned int jarg6, unsigned int jarg7, unsigned int jarg8, unsigned int jarg9) {
  void * jresult ;
  unsigned int arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  unsigned int arg6 ;
  unsigned int arg7 ;
  unsigned int arg8 ;
  bool arg9 ;
  pagmo::pso_gen *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (unsigned int)jarg6; 
  arg7 = (unsigned int)jarg7; 
  arg8 = (unsigned int)jarg8; 
  arg9 = jarg9 ? true : false; 
  result = (pagmo::pso_gen *)new pagmo::pso_gen(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_pso_gen__SWIG_2(unsigned int jarg1, double jarg2, double jarg3, double jarg4, double jarg5, unsigned int jarg6, unsigned int jarg7, unsigned int jarg8) {
  void * jresult ;
  unsigned int arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  unsigned int arg6 ;
  unsigned int arg7 ;
  unsigned int arg8 ;
  pagmo::pso_gen *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (unsigned int)jarg6; 
  arg7 = (unsigned int)jarg7; 
  arg8 = (unsigned int)jarg8; 
  result = (pagmo::pso_gen *)new pagmo::pso_gen(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_pso_gen__SWIG_3(unsigned int jarg1, double jarg2, double jarg3, double jarg4, double jarg5, unsigned int jarg6, unsigned int jarg7) {
  void * jresult ;
  unsigned int arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  unsigned int arg6 ;
  unsigned int arg7 ;
  pagmo::pso_gen *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (unsigned int)jarg6; 
  arg7 = (unsigned int)jarg7; 
  result = (pagmo::pso_gen *)new pagmo::pso_gen(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_pso_gen__SWIG_4(unsigned int jarg1, double jarg2, double jarg3, double jarg4, double jarg5, unsigned int jarg6) {
  void * jresult ;
  unsigned int arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  unsigned int arg6 ;
  pagmo::pso_gen *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (unsigned int)jarg6; 
  result = (pagmo::pso_gen *)new pagmo::pso_gen(arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_pso_gen__SWIG_5(unsigned int jarg1, double jarg2, double jarg3, double jarg4, double jarg5) {
  void * jresult ;
  unsigned int arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  pagmo::pso_gen *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  result = (pagmo::pso_gen *)new pagmo::pso_gen(arg1,arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_pso_gen__SWIG_6(unsigned int jarg1, double jarg2, double jarg3, double jarg4) {
  void * jresult ;
  unsigned int arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  pagmo::pso_gen *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  result = (pagmo::pso_gen *)new pagmo::pso_gen(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_pso_gen__SWIG_7(unsigned int jarg1, double jarg2, double jarg3) {
  void * jresult ;
  unsigned int arg1 ;
  double arg2 ;
  double arg3 ;
  pagmo::pso_gen *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (pagmo::pso_gen *)new pagmo::pso_gen(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_pso_gen__SWIG_8(unsigned int jarg1, double jarg2) {
  void * jresult ;
  unsigned int arg1 ;
  double arg2 ;
  pagmo::pso_gen *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (double)jarg2; 
  result = (pagmo::pso_gen *)new pagmo::pso_gen(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_pso_gen__SWIG_9(unsigned int jarg1) {
  void * jresult ;
  unsigned int arg1 ;
  pagmo::pso_gen *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  result = (pagmo::pso_gen *)new pagmo::pso_gen(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_pso_gen__SWIG_10() {
  void * jresult ;
  pagmo::pso_gen *result = 0 ;
  
  result = (pagmo::pso_gen *)new pagmo::pso_gen();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_pso_gen_evolve(void * jarg1, void * jarg2) {
  void * jresult ;
  pagmo::pso_gen *arg1 = (pagmo::pso_gen *) 0 ;
  SwigValueWrapper< pagmo::population > arg2 ;
  pagmo::population *argp2 ;
  SwigValueWrapper< pagmo::population > result;
  
  arg1 = (pagmo::pso_gen *)jarg1; 
  argp2 = (pagmo::population *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null pagmo::population", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = ((pagmo::pso_gen const *)arg1)->evolve(arg2);
  jresult = new pagmo::population(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_pso_gen_set_verbosity(void * jarg1, unsigned int jarg2) {
  pagmo::pso_gen *arg1 = (pagmo::pso_gen *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pagmo::pso_gen *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->set_verbosity(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pagmo_pso_gen_get_verbosity(void * jarg1) {
  unsigned int jresult ;
  pagmo::pso_gen *arg1 = (pagmo::pso_gen *) 0 ;
  unsigned int result;
  
  arg1 = (pagmo::pso_gen *)jarg1; 
  result = (unsigned int)((pagmo::pso_gen const *)arg1)->get_verbosity();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_pso_gen_set_bfe(void * jarg1, void * jarg2) {
  pagmo::pso_gen *arg1 = (pagmo::pso_gen *) 0 ;
  pagmo::bfe *arg2 = 0 ;
  
  arg1 = (pagmo::pso_gen *)jarg1; 
  arg2 = (pagmo::bfe *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pagmo::bfe const & is null", 0);
    return ;
  } 
  (arg1)->set_bfe((pagmo::bfe const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_pso_gen_set_seed(void * jarg1, unsigned int jarg2) {
  pagmo::pso_gen *arg1 = (pagmo::pso_gen *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pagmo::pso_gen *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->set_seed(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pagmo_pso_gen_get_seed(void * jarg1) {
  unsigned int jresult ;
  pagmo::pso_gen *arg1 = (pagmo::pso_gen *) 0 ;
  unsigned int result;
  
  arg1 = (pagmo::pso_gen *)jarg1; 
  result = (unsigned int)((pagmo::pso_gen const *)arg1)->get_seed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_pagmo_pso_gen_get_name(void * jarg1) {
  const char * jresult ;
  pagmo::pso_gen *arg1 = (pagmo::pso_gen *) 0 ;
  std::string result;
  
  arg1 = (pagmo::pso_gen *)jarg1; 
  result = ((pagmo::pso_gen const *)arg1)->get_name();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_pagmo_pso_gen_get_extra_info(void * jarg1) {
  const char * jresult ;
  pagmo::pso_gen *arg1 = (pagmo::pso_gen *) 0 ;
  std::string result;
  
  arg1 = (pagmo::pso_gen *)jarg1; 
  result = ((pagmo::pso_gen const *)arg1)->get_extra_info();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_pso_gen_get_log(void * jarg1) {
  void * jresult ;
  pagmo::pso_gen *arg1 = (pagmo::pso_gen *) 0 ;
  pagmo::pso_gen::log_type *result = 0 ;
  
  arg1 = (pagmo::pso_gen *)jarg1; 
  result = (pagmo::pso_gen::log_type *) &((pagmo::pso_gen const *)arg1)->get_log();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_delete_pso_gen(void * jarg1) {
  pagmo::pso_gen *arg1 = (pagmo::pso_gen *) 0 ;
  
  arg1 = (pagmo::pso_gen *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_sea__SWIG_0(unsigned int jarg1, unsigned int jarg2) {
  void * jresult ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  pagmo::sea *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (pagmo::sea *)new pagmo::sea(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_sea__SWIG_1(unsigned int jarg1) {
  void * jresult ;
  unsigned int arg1 ;
  pagmo::sea *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  result = (pagmo::sea *)new pagmo::sea(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_sea__SWIG_2() {
  void * jresult ;
  pagmo::sea *result = 0 ;
  
  result = (pagmo::sea *)new pagmo::sea();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_sea_evolve(void * jarg1, void * jarg2) {
  void * jresult ;
  pagmo::sea *arg1 = (pagmo::sea *) 0 ;
  SwigValueWrapper< pagmo::population > arg2 ;
  pagmo::population *argp2 ;
  SwigValueWrapper< pagmo::population > result;
  
  arg1 = (pagmo::sea *)jarg1; 
  argp2 = (pagmo::population *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null pagmo::population", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = ((pagmo::sea const *)arg1)->evolve(arg2);
  jresult = new pagmo::population(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_sea_set_verbosity(void * jarg1, unsigned int jarg2) {
  pagmo::sea *arg1 = (pagmo::sea *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pagmo::sea *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->set_verbosity(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pagmo_sea_get_verbosity(void * jarg1) {
  unsigned int jresult ;
  pagmo::sea *arg1 = (pagmo::sea *) 0 ;
  unsigned int result;
  
  arg1 = (pagmo::sea *)jarg1; 
  result = (unsigned int)((pagmo::sea const *)arg1)->get_verbosity();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_sea_set_seed(void * jarg1, unsigned int jarg2) {
  pagmo::sea *arg1 = (pagmo::sea *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pagmo::sea *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->set_seed(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pagmo_sea_get_seed(void * jarg1) {
  unsigned int jresult ;
  pagmo::sea *arg1 = (pagmo::sea *) 0 ;
  unsigned int result;
  
  arg1 = (pagmo::sea *)jarg1; 
  result = (unsigned int)((pagmo::sea const *)arg1)->get_seed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_pagmo_sea_get_name(void * jarg1) {
  const char * jresult ;
  pagmo::sea *arg1 = (pagmo::sea *) 0 ;
  std::string result;
  
  arg1 = (pagmo::sea *)jarg1; 
  result = ((pagmo::sea const *)arg1)->get_name();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_pagmo_sea_get_extra_info(void * jarg1) {
  const char * jresult ;
  pagmo::sea *arg1 = (pagmo::sea *) 0 ;
  std::string result;
  
  arg1 = (pagmo::sea *)jarg1; 
  result = ((pagmo::sea const *)arg1)->get_extra_info();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_sea_get_log(void * jarg1) {
  void * jresult ;
  pagmo::sea *arg1 = (pagmo::sea *) 0 ;
  pagmo::sea::log_type *result = 0 ;
  
  arg1 = (pagmo::sea *)jarg1; 
  result = (pagmo::sea::log_type *) &((pagmo::sea const *)arg1)->get_log();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_delete_sea(void * jarg1) {
  pagmo::sea *arg1 = (pagmo::sea *) 0 ;
  
  arg1 = (pagmo::sea *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_simulated_annealing__SWIG_0(double jarg1, double jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5, double jarg6, unsigned int jarg7) {
  void * jresult ;
  double arg1 ;
  double arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  double arg6 ;
  unsigned int arg7 ;
  pagmo::simulated_annealing *result = 0 ;
  
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (unsigned int)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (unsigned int)jarg7; 
  result = (pagmo::simulated_annealing *)new pagmo::simulated_annealing(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_simulated_annealing__SWIG_1(double jarg1, double jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5, double jarg6) {
  void * jresult ;
  double arg1 ;
  double arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  double arg6 ;
  pagmo::simulated_annealing *result = 0 ;
  
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (unsigned int)jarg5; 
  arg6 = (double)jarg6; 
  result = (pagmo::simulated_annealing *)new pagmo::simulated_annealing(arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_simulated_annealing__SWIG_2(double jarg1, double jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5) {
  void * jresult ;
  double arg1 ;
  double arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  pagmo::simulated_annealing *result = 0 ;
  
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (unsigned int)jarg5; 
  result = (pagmo::simulated_annealing *)new pagmo::simulated_annealing(arg1,arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_simulated_annealing__SWIG_3(double jarg1, double jarg2, unsigned int jarg3, unsigned int jarg4) {
  void * jresult ;
  double arg1 ;
  double arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  pagmo::simulated_annealing *result = 0 ;
  
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  result = (pagmo::simulated_annealing *)new pagmo::simulated_annealing(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_simulated_annealing__SWIG_4(double jarg1, double jarg2, unsigned int jarg3) {
  void * jresult ;
  double arg1 ;
  double arg2 ;
  unsigned int arg3 ;
  pagmo::simulated_annealing *result = 0 ;
  
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (unsigned int)jarg3; 
  result = (pagmo::simulated_annealing *)new pagmo::simulated_annealing(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_simulated_annealing__SWIG_5(double jarg1, double jarg2) {
  void * jresult ;
  double arg1 ;
  double arg2 ;
  pagmo::simulated_annealing *result = 0 ;
  
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  result = (pagmo::simulated_annealing *)new pagmo::simulated_annealing(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_simulated_annealing__SWIG_6(double jarg1) {
  void * jresult ;
  double arg1 ;
  pagmo::simulated_annealing *result = 0 ;
  
  arg1 = (double)jarg1; 
  result = (pagmo::simulated_annealing *)new pagmo::simulated_annealing(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_simulated_annealing__SWIG_7() {
  void * jresult ;
  pagmo::simulated_annealing *result = 0 ;
  
  result = (pagmo::simulated_annealing *)new pagmo::simulated_annealing();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_simulated_annealing_evolve(void * jarg1, void * jarg2) {
  void * jresult ;
  pagmo::simulated_annealing *arg1 = (pagmo::simulated_annealing *) 0 ;
  SwigValueWrapper< pagmo::population > arg2 ;
  pagmo::population *argp2 ;
  SwigValueWrapper< pagmo::population > result;
  
  arg1 = (pagmo::simulated_annealing *)jarg1; 
  argp2 = (pagmo::population *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null pagmo::population", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = ((pagmo::simulated_annealing const *)arg1)->evolve(arg2);
  jresult = new pagmo::population(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_simulated_annealing_set_verbosity(void * jarg1, unsigned int jarg2) {
  pagmo::simulated_annealing *arg1 = (pagmo::simulated_annealing *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pagmo::simulated_annealing *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->set_verbosity(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pagmo_simulated_annealing_get_verbosity(void * jarg1) {
  unsigned int jresult ;
  pagmo::simulated_annealing *arg1 = (pagmo::simulated_annealing *) 0 ;
  unsigned int result;
  
  arg1 = (pagmo::simulated_annealing *)jarg1; 
  result = (unsigned int)((pagmo::simulated_annealing const *)arg1)->get_verbosity();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_simulated_annealing_set_seed(void * jarg1, unsigned int jarg2) {
  pagmo::simulated_annealing *arg1 = (pagmo::simulated_annealing *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pagmo::simulated_annealing *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->set_seed(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pagmo_simulated_annealing_get_seed(void * jarg1) {
  unsigned int jresult ;
  pagmo::simulated_annealing *arg1 = (pagmo::simulated_annealing *) 0 ;
  unsigned int result;
  
  arg1 = (pagmo::simulated_annealing *)jarg1; 
  result = (unsigned int)((pagmo::simulated_annealing const *)arg1)->get_seed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_pagmo_simulated_annealing_get_name(void * jarg1) {
  const char * jresult ;
  pagmo::simulated_annealing *arg1 = (pagmo::simulated_annealing *) 0 ;
  std::string result;
  
  arg1 = (pagmo::simulated_annealing *)jarg1; 
  result = ((pagmo::simulated_annealing const *)arg1)->get_name();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_pagmo_simulated_annealing_get_extra_info(void * jarg1) {
  const char * jresult ;
  pagmo::simulated_annealing *arg1 = (pagmo::simulated_annealing *) 0 ;
  std::string result;
  
  arg1 = (pagmo::simulated_annealing *)jarg1; 
  result = ((pagmo::simulated_annealing const *)arg1)->get_extra_info();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_simulated_annealing_get_log(void * jarg1) {
  void * jresult ;
  pagmo::simulated_annealing *arg1 = (pagmo::simulated_annealing *) 0 ;
  pagmo::simulated_annealing::log_type *result = 0 ;
  
  arg1 = (pagmo::simulated_annealing *)jarg1; 
  result = (pagmo::simulated_annealing::log_type *) &((pagmo::simulated_annealing const *)arg1)->get_log();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_delete_simulated_annealing(void * jarg1) {
  pagmo::simulated_annealing *arg1 = (pagmo::simulated_annealing *) 0 ;
  
  arg1 = (pagmo::simulated_annealing *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_sade__SWIG_0(unsigned int jarg1, unsigned int jarg2, unsigned int jarg3, double jarg4, double jarg5, unsigned int jarg6, unsigned int jarg7) {
  void * jresult ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  double arg4 ;
  double arg5 ;
  bool arg6 ;
  unsigned int arg7 ;
  pagmo::sade *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = jarg6 ? true : false; 
  arg7 = (unsigned int)jarg7; 
  result = (pagmo::sade *)new pagmo::sade(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_sade__SWIG_1(unsigned int jarg1, unsigned int jarg2, unsigned int jarg3, double jarg4, double jarg5, unsigned int jarg6) {
  void * jresult ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  double arg4 ;
  double arg5 ;
  bool arg6 ;
  pagmo::sade *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = jarg6 ? true : false; 
  result = (pagmo::sade *)new pagmo::sade(arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_sade__SWIG_2(unsigned int jarg1, unsigned int jarg2, unsigned int jarg3, double jarg4, double jarg5) {
  void * jresult ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  double arg4 ;
  double arg5 ;
  pagmo::sade *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  result = (pagmo::sade *)new pagmo::sade(arg1,arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_sade__SWIG_3(unsigned int jarg1, unsigned int jarg2, unsigned int jarg3, double jarg4) {
  void * jresult ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  double arg4 ;
  pagmo::sade *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (double)jarg4; 
  result = (pagmo::sade *)new pagmo::sade(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_sade__SWIG_4(unsigned int jarg1, unsigned int jarg2, unsigned int jarg3) {
  void * jresult ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  pagmo::sade *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  result = (pagmo::sade *)new pagmo::sade(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_sade__SWIG_5(unsigned int jarg1, unsigned int jarg2) {
  void * jresult ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  pagmo::sade *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (pagmo::sade *)new pagmo::sade(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_sade__SWIG_6(unsigned int jarg1) {
  void * jresult ;
  unsigned int arg1 ;
  pagmo::sade *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  result = (pagmo::sade *)new pagmo::sade(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_sade__SWIG_7() {
  void * jresult ;
  pagmo::sade *result = 0 ;
  
  result = (pagmo::sade *)new pagmo::sade();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_sade_evolve(void * jarg1, void * jarg2) {
  void * jresult ;
  pagmo::sade *arg1 = (pagmo::sade *) 0 ;
  SwigValueWrapper< pagmo::population > arg2 ;
  pagmo::population *argp2 ;
  SwigValueWrapper< pagmo::population > result;
  
  arg1 = (pagmo::sade *)jarg1; 
  argp2 = (pagmo::population *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null pagmo::population", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = ((pagmo::sade const *)arg1)->evolve(arg2);
  jresult = new pagmo::population(result); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_pagmo_sade_get_name(void * jarg1) {
  const char * jresult ;
  pagmo::sade *arg1 = (pagmo::sade *) 0 ;
  std::string result;
  
  arg1 = (pagmo::sade *)jarg1; 
  result = ((pagmo::sade const *)arg1)->get_name();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_sade_set_seed(void * jarg1, unsigned int jarg2) {
  pagmo::sade *arg1 = (pagmo::sade *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pagmo::sade *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->set_seed(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pagmo_sade_get_seed(void * jarg1) {
  unsigned int jresult ;
  pagmo::sade *arg1 = (pagmo::sade *) 0 ;
  unsigned int result;
  
  arg1 = (pagmo::sade *)jarg1; 
  result = (unsigned int)((pagmo::sade const *)arg1)->get_seed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pagmo_sade_get_verbosity(void * jarg1) {
  unsigned int jresult ;
  pagmo::sade *arg1 = (pagmo::sade *) 0 ;
  unsigned int result;
  
  arg1 = (pagmo::sade *)jarg1; 
  result = (unsigned int)((pagmo::sade const *)arg1)->get_verbosity();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_sade_set_verbosity(void * jarg1, unsigned int jarg2) {
  pagmo::sade *arg1 = (pagmo::sade *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pagmo::sade *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->set_verbosity(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pagmo_sade_get_gen(void * jarg1) {
  unsigned int jresult ;
  pagmo::sade *arg1 = (pagmo::sade *) 0 ;
  unsigned int result;
  
  arg1 = (pagmo::sade *)jarg1; 
  result = (unsigned int)((pagmo::sade const *)arg1)->get_gen();
  jresult = result; 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_pagmo_sade_get_extra_info(void * jarg1) {
  const char * jresult ;
  pagmo::sade *arg1 = (pagmo::sade *) 0 ;
  std::string result;
  
  arg1 = (pagmo::sade *)jarg1; 
  result = ((pagmo::sade const *)arg1)->get_extra_info();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_sade_get_log(void * jarg1) {
  void * jresult ;
  pagmo::sade *arg1 = (pagmo::sade *) 0 ;
  pagmo::sade::log_type *result = 0 ;
  
  arg1 = (pagmo::sade *)jarg1; 
  result = (pagmo::sade::log_type *) &((pagmo::sade const *)arg1)->get_log();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_delete_sade(void * jarg1) {
  pagmo::sade *arg1 = (pagmo::sade *) 0 ;
  
  arg1 = (pagmo::sade *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_sga__SWIG_0(unsigned int jarg1, double jarg2, double jarg3, double jarg4, double jarg5, unsigned int jarg6, const char * jarg7, const char * jarg8, const char * jarg9, unsigned int jarg10) {
  void * jresult ;
  unsigned int arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  unsigned int arg6 ;
  std::string arg7 ;
  std::string arg8 ;
  std::string arg9 ;
  unsigned int arg10 ;
  pagmo::sga *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (unsigned int)jarg6; 
  if (!jarg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg7)->assign(jarg7); 
  if (!jarg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg8)->assign(jarg8); 
  if (!jarg9) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg9)->assign(jarg9); 
  arg10 = (unsigned int)jarg10; 
  result = (pagmo::sga *)new pagmo::sga(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_sga__SWIG_1(unsigned int jarg1, double jarg2, double jarg3, double jarg4, double jarg5, unsigned int jarg6, const char * jarg7, const char * jarg8, const char * jarg9) {
  void * jresult ;
  unsigned int arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  unsigned int arg6 ;
  std::string arg7 ;
  std::string arg8 ;
  std::string arg9 ;
  pagmo::sga *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (unsigned int)jarg6; 
  if (!jarg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg7)->assign(jarg7); 
  if (!jarg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg8)->assign(jarg8); 
  if (!jarg9) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg9)->assign(jarg9); 
  result = (pagmo::sga *)new pagmo::sga(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_sga__SWIG_2(unsigned int jarg1, double jarg2, double jarg3, double jarg4, double jarg5, unsigned int jarg6, const char * jarg7, const char * jarg8) {
  void * jresult ;
  unsigned int arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  unsigned int arg6 ;
  std::string arg7 ;
  std::string arg8 ;
  pagmo::sga *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (unsigned int)jarg6; 
  if (!jarg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg7)->assign(jarg7); 
  if (!jarg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg8)->assign(jarg8); 
  result = (pagmo::sga *)new pagmo::sga(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_sga__SWIG_3(unsigned int jarg1, double jarg2, double jarg3, double jarg4, double jarg5, unsigned int jarg6, const char * jarg7) {
  void * jresult ;
  unsigned int arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  unsigned int arg6 ;
  std::string arg7 ;
  pagmo::sga *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (unsigned int)jarg6; 
  if (!jarg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg7)->assign(jarg7); 
  result = (pagmo::sga *)new pagmo::sga(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_sga__SWIG_4(unsigned int jarg1, double jarg2, double jarg3, double jarg4, double jarg5, unsigned int jarg6) {
  void * jresult ;
  unsigned int arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  unsigned int arg6 ;
  pagmo::sga *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (unsigned int)jarg6; 
  result = (pagmo::sga *)new pagmo::sga(arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_sga__SWIG_5(unsigned int jarg1, double jarg2, double jarg3, double jarg4, double jarg5) {
  void * jresult ;
  unsigned int arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  pagmo::sga *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  result = (pagmo::sga *)new pagmo::sga(arg1,arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_sga__SWIG_6(unsigned int jarg1, double jarg2, double jarg3, double jarg4) {
  void * jresult ;
  unsigned int arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  pagmo::sga *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  result = (pagmo::sga *)new pagmo::sga(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_sga__SWIG_7(unsigned int jarg1, double jarg2, double jarg3) {
  void * jresult ;
  unsigned int arg1 ;
  double arg2 ;
  double arg3 ;
  pagmo::sga *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (pagmo::sga *)new pagmo::sga(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_sga__SWIG_8(unsigned int jarg1, double jarg2) {
  void * jresult ;
  unsigned int arg1 ;
  double arg2 ;
  pagmo::sga *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (double)jarg2; 
  result = (pagmo::sga *)new pagmo::sga(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_sga__SWIG_9(unsigned int jarg1) {
  void * jresult ;
  unsigned int arg1 ;
  pagmo::sga *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  result = (pagmo::sga *)new pagmo::sga(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_sga__SWIG_10() {
  void * jresult ;
  pagmo::sga *result = 0 ;
  
  result = (pagmo::sga *)new pagmo::sga();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_sga_evolve(void * jarg1, void * jarg2) {
  void * jresult ;
  pagmo::sga *arg1 = (pagmo::sga *) 0 ;
  SwigValueWrapper< pagmo::population > arg2 ;
  pagmo::population *argp2 ;
  SwigValueWrapper< pagmo::population > result;
  
  arg1 = (pagmo::sga *)jarg1; 
  argp2 = (pagmo::population *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null pagmo::population", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = ((pagmo::sga const *)arg1)->evolve(arg2);
  jresult = new pagmo::population(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_sga_set_seed(void * jarg1, unsigned int jarg2) {
  pagmo::sga *arg1 = (pagmo::sga *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pagmo::sga *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->set_seed(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pagmo_sga_get_seed(void * jarg1) {
  unsigned int jresult ;
  pagmo::sga *arg1 = (pagmo::sga *) 0 ;
  unsigned int result;
  
  arg1 = (pagmo::sga *)jarg1; 
  result = (unsigned int)((pagmo::sga const *)arg1)->get_seed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_sga_set_verbosity(void * jarg1, unsigned int jarg2) {
  pagmo::sga *arg1 = (pagmo::sga *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pagmo::sga *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->set_verbosity(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pagmo_sga_get_verbosity(void * jarg1) {
  unsigned int jresult ;
  pagmo::sga *arg1 = (pagmo::sga *) 0 ;
  unsigned int result;
  
  arg1 = (pagmo::sga *)jarg1; 
  result = (unsigned int)((pagmo::sga const *)arg1)->get_verbosity();
  jresult = result; 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_pagmo_sga_get_name(void * jarg1) {
  const char * jresult ;
  pagmo::sga *arg1 = (pagmo::sga *) 0 ;
  std::string result;
  
  arg1 = (pagmo::sga *)jarg1; 
  result = ((pagmo::sga const *)arg1)->get_name();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_pagmo_sga_get_extra_info(void * jarg1) {
  const char * jresult ;
  pagmo::sga *arg1 = (pagmo::sga *) 0 ;
  std::string result;
  
  arg1 = (pagmo::sga *)jarg1; 
  result = ((pagmo::sga const *)arg1)->get_extra_info();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_sga_get_log(void * jarg1) {
  void * jresult ;
  pagmo::sga *arg1 = (pagmo::sga *) 0 ;
  pagmo::sga::log_type *result = 0 ;
  
  arg1 = (pagmo::sga *)jarg1; 
  result = (pagmo::sga::log_type *) &((pagmo::sga const *)arg1)->get_log();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_delete_sga(void * jarg1) {
  pagmo::sga *arg1 = (pagmo::sga *) 0 ;
  
  arg1 = (pagmo::sga *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_xnes__SWIG_0(unsigned int jarg1, double jarg2, double jarg3, double jarg4, double jarg5, double jarg6, double jarg7, unsigned int jarg8, unsigned int jarg9, unsigned int jarg10) {
  void * jresult ;
  unsigned int arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  bool arg8 ;
  bool arg9 ;
  unsigned int arg10 ;
  pagmo::xnes *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  arg8 = jarg8 ? true : false; 
  arg9 = jarg9 ? true : false; 
  arg10 = (unsigned int)jarg10; 
  result = (pagmo::xnes *)new pagmo::xnes(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_xnes__SWIG_1(unsigned int jarg1, double jarg2, double jarg3, double jarg4, double jarg5, double jarg6, double jarg7, unsigned int jarg8, unsigned int jarg9) {
  void * jresult ;
  unsigned int arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  bool arg8 ;
  bool arg9 ;
  pagmo::xnes *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  arg8 = jarg8 ? true : false; 
  arg9 = jarg9 ? true : false; 
  result = (pagmo::xnes *)new pagmo::xnes(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_xnes__SWIG_2(unsigned int jarg1, double jarg2, double jarg3, double jarg4, double jarg5, double jarg6, double jarg7, unsigned int jarg8) {
  void * jresult ;
  unsigned int arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  bool arg8 ;
  pagmo::xnes *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  arg8 = jarg8 ? true : false; 
  result = (pagmo::xnes *)new pagmo::xnes(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_xnes__SWIG_3(unsigned int jarg1, double jarg2, double jarg3, double jarg4, double jarg5, double jarg6, double jarg7) {
  void * jresult ;
  unsigned int arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  pagmo::xnes *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  result = (pagmo::xnes *)new pagmo::xnes(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_xnes__SWIG_4(unsigned int jarg1, double jarg2, double jarg3, double jarg4, double jarg5, double jarg6) {
  void * jresult ;
  unsigned int arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  pagmo::xnes *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  result = (pagmo::xnes *)new pagmo::xnes(arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_xnes__SWIG_5(unsigned int jarg1, double jarg2, double jarg3, double jarg4, double jarg5) {
  void * jresult ;
  unsigned int arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  pagmo::xnes *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  result = (pagmo::xnes *)new pagmo::xnes(arg1,arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_xnes__SWIG_6(unsigned int jarg1, double jarg2, double jarg3, double jarg4) {
  void * jresult ;
  unsigned int arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  pagmo::xnes *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  result = (pagmo::xnes *)new pagmo::xnes(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_xnes__SWIG_7(unsigned int jarg1, double jarg2, double jarg3) {
  void * jresult ;
  unsigned int arg1 ;
  double arg2 ;
  double arg3 ;
  pagmo::xnes *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (pagmo::xnes *)new pagmo::xnes(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_xnes__SWIG_8(unsigned int jarg1, double jarg2) {
  void * jresult ;
  unsigned int arg1 ;
  double arg2 ;
  pagmo::xnes *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (double)jarg2; 
  result = (pagmo::xnes *)new pagmo::xnes(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_xnes__SWIG_9(unsigned int jarg1) {
  void * jresult ;
  unsigned int arg1 ;
  pagmo::xnes *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  result = (pagmo::xnes *)new pagmo::xnes(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_xnes__SWIG_10() {
  void * jresult ;
  pagmo::xnes *result = 0 ;
  
  result = (pagmo::xnes *)new pagmo::xnes();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_xnes_evolve(void * jarg1, void * jarg2) {
  void * jresult ;
  pagmo::xnes *arg1 = (pagmo::xnes *) 0 ;
  SwigValueWrapper< pagmo::population > arg2 ;
  pagmo::population *argp2 ;
  SwigValueWrapper< pagmo::population > result;
  
  arg1 = (pagmo::xnes *)jarg1; 
  argp2 = (pagmo::population *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null pagmo::population", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = ((pagmo::xnes const *)arg1)->evolve(arg2);
  jresult = new pagmo::population(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_xnes_set_seed(void * jarg1, unsigned int jarg2) {
  pagmo::xnes *arg1 = (pagmo::xnes *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pagmo::xnes *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->set_seed(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pagmo_xnes_get_seed(void * jarg1) {
  unsigned int jresult ;
  pagmo::xnes *arg1 = (pagmo::xnes *) 0 ;
  unsigned int result;
  
  arg1 = (pagmo::xnes *)jarg1; 
  result = (unsigned int)((pagmo::xnes const *)arg1)->get_seed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_xnes_set_verbosity(void * jarg1, unsigned int jarg2) {
  pagmo::xnes *arg1 = (pagmo::xnes *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pagmo::xnes *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->set_verbosity(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pagmo_xnes_get_verbosity(void * jarg1) {
  unsigned int jresult ;
  pagmo::xnes *arg1 = (pagmo::xnes *) 0 ;
  unsigned int result;
  
  arg1 = (pagmo::xnes *)jarg1; 
  result = (unsigned int)((pagmo::xnes const *)arg1)->get_verbosity();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pagmo_xnes_get_gen(void * jarg1) {
  unsigned int jresult ;
  pagmo::xnes *arg1 = (pagmo::xnes *) 0 ;
  unsigned int result;
  
  arg1 = (pagmo::xnes *)jarg1; 
  result = (unsigned int)((pagmo::xnes const *)arg1)->get_gen();
  jresult = result; 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_pagmo_xnes_get_name(void * jarg1) {
  const char * jresult ;
  pagmo::xnes *arg1 = (pagmo::xnes *) 0 ;
  std::string result;
  
  arg1 = (pagmo::xnes *)jarg1; 
  result = ((pagmo::xnes const *)arg1)->get_name();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_pagmo_xnes_get_extra_info(void * jarg1) {
  const char * jresult ;
  pagmo::xnes *arg1 = (pagmo::xnes *) 0 ;
  std::string result;
  
  arg1 = (pagmo::xnes *)jarg1; 
  result = ((pagmo::xnes const *)arg1)->get_extra_info();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_xnes_get_log(void * jarg1) {
  void * jresult ;
  pagmo::xnes *arg1 = (pagmo::xnes *) 0 ;
  pagmo::xnes::log_type *result = 0 ;
  
  arg1 = (pagmo::xnes *)jarg1; 
  result = (pagmo::xnes::log_type *) &((pagmo::xnes const *)arg1)->get_log();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_delete_xnes(void * jarg1) {
  pagmo::xnes *arg1 = (pagmo::xnes *) 0 ;
  
  arg1 = (pagmo::xnes *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_default_bfe__SWIG_0() {
  void * jresult ;
  pagmo::default_bfe *result = 0 ;
  
  result = (pagmo::default_bfe *)new pagmo::default_bfe();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_default_bfe__SWIG_1(void * jarg1) {
  void * jresult ;
  pagmo::default_bfe *arg1 = 0 ;
  pagmo::default_bfe *result = 0 ;
  
  arg1 = (pagmo::default_bfe *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pagmo::default_bfe const & is null", 0);
    return 0;
  } 
  result = (pagmo::default_bfe *)new pagmo::default_bfe((pagmo::default_bfe const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_pagmo_default_bfe_get_name(void * jarg1) {
  const char * jresult ;
  pagmo::default_bfe *arg1 = (pagmo::default_bfe *) 0 ;
  std::string result;
  
  arg1 = (pagmo::default_bfe *)jarg1; 
  result = ((pagmo::default_bfe const *)arg1)->get_name();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_default_bfe_Operator(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  pagmo::default_bfe *arg1 = (pagmo::default_bfe *) 0 ;
  pagmoWrap::problemPagomWrapper *arg2 = 0 ;
  pagmo::vector_double *arg3 = 0 ;
  pagmo::vector_double result;
  
  arg1 = (pagmo::default_bfe *)jarg1; 
  arg2 = (pagmoWrap::problemPagomWrapper *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pagmoWrap::problemPagomWrapper const & is null", 0);
    return 0;
  } 
  arg3 = (pagmo::vector_double *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pagmo::vector_double const & is null", 0);
    return 0;
  } 
  result = pagmo_default_bfe_Operator((pagmo::default_bfe const *)arg1,(pagmoWrap::problemPagomWrapper const &)*arg2,(std::vector< double > const &)*arg3);
  jresult = new pagmo::vector_double(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_delete_default_bfe(void * jarg1) {
  pagmo::default_bfe *arg1 = (pagmo::default_bfe *) 0 ;
  
  arg1 = (pagmo::default_bfe *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_member_bfe__SWIG_0() {
  void * jresult ;
  pagmo::member_bfe *result = 0 ;
  
  result = (pagmo::member_bfe *)new pagmo::member_bfe();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_member_bfe__SWIG_1(void * jarg1) {
  void * jresult ;
  pagmo::member_bfe *arg1 = 0 ;
  pagmo::member_bfe *result = 0 ;
  
  arg1 = (pagmo::member_bfe *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pagmo::member_bfe const & is null", 0);
    return 0;
  } 
  result = (pagmo::member_bfe *)new pagmo::member_bfe((pagmo::member_bfe const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_pagmo_member_bfe_get_name(void * jarg1) {
  const char * jresult ;
  pagmo::member_bfe *arg1 = (pagmo::member_bfe *) 0 ;
  std::string result;
  
  arg1 = (pagmo::member_bfe *)jarg1; 
  result = ((pagmo::member_bfe const *)arg1)->get_name();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_member_bfe_Operator(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  pagmo::member_bfe *arg1 = (pagmo::member_bfe *) 0 ;
  pagmoWrap::problemPagomWrapper *arg2 = 0 ;
  pagmo::vector_double *arg3 = 0 ;
  pagmo::vector_double result;
  
  arg1 = (pagmo::member_bfe *)jarg1; 
  arg2 = (pagmoWrap::problemPagomWrapper *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pagmoWrap::problemPagomWrapper const & is null", 0);
    return 0;
  } 
  arg3 = (pagmo::vector_double *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pagmo::vector_double const & is null", 0);
    return 0;
  } 
  result = pagmo_member_bfe_Operator((pagmo::member_bfe const *)arg1,(pagmoWrap::problemPagomWrapper const &)*arg2,(std::vector< double > const &)*arg3);
  jresult = new pagmo::vector_double(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_delete_member_bfe(void * jarg1) {
  pagmo::member_bfe *arg1 = (pagmo::member_bfe *) 0 ;
  
  arg1 = (pagmo::member_bfe *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_thread_bfe__SWIG_0() {
  void * jresult ;
  pagmo::thread_bfe *result = 0 ;
  
  result = (pagmo::thread_bfe *)new pagmo::thread_bfe();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_thread_bfe__SWIG_1(void * jarg1) {
  void * jresult ;
  pagmo::thread_bfe *arg1 = 0 ;
  pagmo::thread_bfe *result = 0 ;
  
  arg1 = (pagmo::thread_bfe *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pagmo::thread_bfe const & is null", 0);
    return 0;
  } 
  result = (pagmo::thread_bfe *)new pagmo::thread_bfe((pagmo::thread_bfe const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_pagmo_thread_bfe_get_name(void * jarg1) {
  const char * jresult ;
  pagmo::thread_bfe *arg1 = (pagmo::thread_bfe *) 0 ;
  std::string result;
  
  arg1 = (pagmo::thread_bfe *)jarg1; 
  result = ((pagmo::thread_bfe const *)arg1)->get_name();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_thread_bfe_Operator(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  pagmo::thread_bfe *arg1 = (pagmo::thread_bfe *) 0 ;
  pagmoWrap::problemPagomWrapper *arg2 = 0 ;
  pagmo::vector_double *arg3 = 0 ;
  pagmo::vector_double result;
  
  arg1 = (pagmo::thread_bfe *)jarg1; 
  arg2 = (pagmoWrap::problemPagomWrapper *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pagmoWrap::problemPagomWrapper const & is null", 0);
    return 0;
  } 
  arg3 = (pagmo::vector_double *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pagmo::vector_double const & is null", 0);
    return 0;
  } 
  result = pagmo_thread_bfe_Operator((pagmo::thread_bfe const *)arg1,(pagmoWrap::problemPagomWrapper const &)*arg2,(std::vector< double > const &)*arg3);
  jresult = new pagmo::vector_double(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_delete_thread_bfe(void * jarg1) {
  pagmo::thread_bfe *arg1 = (pagmo::thread_bfe *) 0 ;
  
  arg1 = (pagmo::thread_bfe *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_thread_island() {
  void * jresult ;
  pagmo::thread_island *result = 0 ;
  
  result = (pagmo::thread_island *)new pagmo::thread_island();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_pagmo_thread_island_get_name(void * jarg1) {
  const char * jresult ;
  pagmo::thread_island *arg1 = (pagmo::thread_island *) 0 ;
  std::string result;
  
  arg1 = (pagmo::thread_island *)jarg1; 
  result = ((pagmo::thread_island const *)arg1)->get_name();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_pagmo_thread_island_get_extra_info(void * jarg1) {
  const char * jresult ;
  pagmo::thread_island *arg1 = (pagmo::thread_island *) 0 ;
  std::string result;
  
  arg1 = (pagmo::thread_island *)jarg1; 
  result = ((pagmo::thread_island const *)arg1)->get_extra_info();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_thread_island_run_evolve(void * jarg1, void * jarg2) {
  pagmo::thread_island *arg1 = (pagmo::thread_island *) 0 ;
  pagmo::island *arg2 = 0 ;
  
  arg1 = (pagmo::thread_island *)jarg1; 
  arg2 = (pagmo::island *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pagmo::island & is null", 0);
    return ;
  } 
  ((pagmo::thread_island const *)arg1)->run_evolve(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_delete_thread_island(void * jarg1) {
  pagmo::thread_island *arg1 = (pagmo::thread_island *) 0 ;
  
  arg1 = (pagmo::thread_island *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_ackley__SWIG_0(unsigned int jarg1) {
  void * jresult ;
  unsigned int arg1 ;
  pagmo::ackley *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  result = (pagmo::ackley *)new pagmo::ackley(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_ackley__SWIG_1() {
  void * jresult ;
  pagmo::ackley *result = 0 ;
  
  result = (pagmo::ackley *)new pagmo::ackley();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_ackley_fitness(void * jarg1, void * jarg2) {
  void * jresult ;
  pagmo::ackley *arg1 = (pagmo::ackley *) 0 ;
  pagmo::vector_double *arg2 = 0 ;
  pagmo::vector_double result;
  
  arg1 = (pagmo::ackley *)jarg1; 
  arg2 = (pagmo::vector_double *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pagmo::vector_double const & is null", 0);
    return 0;
  } 
  result = ((pagmo::ackley const *)arg1)->fitness((pagmo::vector_double const &)*arg2);
  jresult = new pagmo::vector_double(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_ackley_get_bounds(void * jarg1) {
  void * jresult ;
  pagmo::ackley *arg1 = (pagmo::ackley *) 0 ;
  std::pair< pagmo::vector_double,pagmo::vector_double > result;
  
  arg1 = (pagmo::ackley *)jarg1; 
  result = ((pagmo::ackley const *)arg1)->get_bounds();
  jresult = new std::pair< pagmo::vector_double,pagmo::vector_double >(result); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_pagmo_ackley_get_name(void * jarg1) {
  const char * jresult ;
  pagmo::ackley *arg1 = (pagmo::ackley *) 0 ;
  std::string result;
  
  arg1 = (pagmo::ackley *)jarg1; 
  result = ((pagmo::ackley const *)arg1)->get_name();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_ackley_best_known(void * jarg1) {
  void * jresult ;
  pagmo::ackley *arg1 = (pagmo::ackley *) 0 ;
  pagmo::vector_double result;
  
  arg1 = (pagmo::ackley *)jarg1; 
  result = ((pagmo::ackley const *)arg1)->best_known();
  jresult = new pagmo::vector_double(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_ackley_m_dim_set(void * jarg1, unsigned int jarg2) {
  pagmo::ackley *arg1 = (pagmo::ackley *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pagmo::ackley *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->m_dim = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pagmo_ackley_m_dim_get(void * jarg1) {
  unsigned int jresult ;
  pagmo::ackley *arg1 = (pagmo::ackley *) 0 ;
  unsigned int result;
  
  arg1 = (pagmo::ackley *)jarg1; 
  result = (unsigned int) ((arg1)->m_dim);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pagmo_ackley_get_nic(void * jarg1) {
  unsigned long jresult ;
  pagmo::ackley *arg1 = (pagmo::ackley *) 0 ;
  pagmo::vector_double::size_type result;
  
  arg1 = (pagmo::ackley *)jarg1; 
  result = pagmo_ackley_get_nic((pagmo::ackley const *)arg1);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pagmo_ackley_get_nec(void * jarg1) {
  unsigned long jresult ;
  pagmo::ackley *arg1 = (pagmo::ackley *) 0 ;
  pagmo::vector_double::size_type result;
  
  arg1 = (pagmo::ackley *)jarg1; 
  result = pagmo_ackley_get_nec((pagmo::ackley const *)arg1);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pagmo_ackley_get_nix(void * jarg1) {
  unsigned long jresult ;
  pagmo::ackley *arg1 = (pagmo::ackley *) 0 ;
  pagmo::vector_double::size_type result;
  
  arg1 = (pagmo::ackley *)jarg1; 
  result = pagmo_ackley_get_nix((pagmo::ackley const *)arg1);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pagmo_ackley_get_nobj(void * jarg1) {
  unsigned long jresult ;
  pagmo::ackley *arg1 = (pagmo::ackley *) 0 ;
  pagmo::vector_double::size_type result;
  
  arg1 = (pagmo::ackley *)jarg1; 
  result = pagmo_ackley_get_nobj((pagmo::ackley const *)arg1);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pagmo_ackley_has_batch_fitness(void * jarg1) {
  unsigned int jresult ;
  pagmo::ackley *arg1 = (pagmo::ackley *) 0 ;
  bool result;
  
  arg1 = (pagmo::ackley *)jarg1; 
  result = (bool)pagmo_ackley_has_batch_fitness((pagmo::ackley const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pagmo_ackley_get_thread_safety(void * jarg1) {
  int jresult ;
  pagmo::ackley *arg1 = (pagmo::ackley *) 0 ;
  pagmo::thread_safety result;
  
  arg1 = (pagmo::ackley *)jarg1; 
  result = (pagmo::thread_safety)pagmo_ackley_get_thread_safety((pagmo::ackley const *)arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_delete_ackley(void * jarg1) {
  pagmo::ackley *arg1 = (pagmo::ackley *) 0 ;
  
  arg1 = (pagmo::ackley *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_cec2006__SWIG_0(unsigned int jarg1) {
  void * jresult ;
  unsigned int arg1 ;
  pagmo::cec2006 *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  result = (pagmo::cec2006 *)new pagmo::cec2006(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_cec2006__SWIG_1() {
  void * jresult ;
  pagmo::cec2006 *result = 0 ;
  
  result = (pagmo::cec2006 *)new pagmo::cec2006();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pagmo_cec2006_get_nec(void * jarg1) {
  unsigned long jresult ;
  pagmo::cec2006 *arg1 = (pagmo::cec2006 *) 0 ;
  pagmo::vector_double::size_type result;
  
  arg1 = (pagmo::cec2006 *)jarg1; 
  result = ((pagmo::cec2006 const *)arg1)->get_nec();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pagmo_cec2006_get_nic(void * jarg1) {
  unsigned long jresult ;
  pagmo::cec2006 *arg1 = (pagmo::cec2006 *) 0 ;
  pagmo::vector_double::size_type result;
  
  arg1 = (pagmo::cec2006 *)jarg1; 
  result = ((pagmo::cec2006 const *)arg1)->get_nic();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_cec2006_get_bounds(void * jarg1) {
  void * jresult ;
  pagmo::cec2006 *arg1 = (pagmo::cec2006 *) 0 ;
  std::pair< pagmo::vector_double,pagmo::vector_double > result;
  
  arg1 = (pagmo::cec2006 *)jarg1; 
  result = ((pagmo::cec2006 const *)arg1)->get_bounds();
  jresult = new std::pair< pagmo::vector_double,pagmo::vector_double >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_cec2006_fitness(void * jarg1, void * jarg2) {
  void * jresult ;
  pagmo::cec2006 *arg1 = (pagmo::cec2006 *) 0 ;
  pagmo::vector_double *arg2 = 0 ;
  pagmo::vector_double result;
  
  arg1 = (pagmo::cec2006 *)jarg1; 
  arg2 = (pagmo::vector_double *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pagmo::vector_double const & is null", 0);
    return 0;
  } 
  result = ((pagmo::cec2006 const *)arg1)->fitness((pagmo::vector_double const &)*arg2);
  jresult = new pagmo::vector_double(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_cec2006_best_known(void * jarg1) {
  void * jresult ;
  pagmo::cec2006 *arg1 = (pagmo::cec2006 *) 0 ;
  pagmo::vector_double result;
  
  arg1 = (pagmo::cec2006 *)jarg1; 
  result = ((pagmo::cec2006 const *)arg1)->best_known();
  jresult = new pagmo::vector_double(result); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_pagmo_cec2006_get_name(void * jarg1) {
  const char * jresult ;
  pagmo::cec2006 *arg1 = (pagmo::cec2006 *) 0 ;
  std::string result;
  
  arg1 = (pagmo::cec2006 *)jarg1; 
  result = ((pagmo::cec2006 const *)arg1)->get_name();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pagmo_cec2006_get_nix(void * jarg1) {
  unsigned long jresult ;
  pagmo::cec2006 *arg1 = (pagmo::cec2006 *) 0 ;
  pagmo::vector_double::size_type result;
  
  arg1 = (pagmo::cec2006 *)jarg1; 
  result = pagmo_cec2006_get_nix((pagmo::cec2006 const *)arg1);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pagmo_cec2006_get_nobj(void * jarg1) {
  unsigned long jresult ;
  pagmo::cec2006 *arg1 = (pagmo::cec2006 *) 0 ;
  pagmo::vector_double::size_type result;
  
  arg1 = (pagmo::cec2006 *)jarg1; 
  result = pagmo_cec2006_get_nobj((pagmo::cec2006 const *)arg1);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pagmo_cec2006_get_thread_safety(void * jarg1) {
  int jresult ;
  pagmo::cec2006 *arg1 = (pagmo::cec2006 *) 0 ;
  pagmo::thread_safety result;
  
  arg1 = (pagmo::cec2006 *)jarg1; 
  result = (pagmo::thread_safety)pagmo_cec2006_get_thread_safety((pagmo::cec2006 const *)arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pagmo_cec2006_has_batch_fitness(void * jarg1) {
  unsigned int jresult ;
  pagmo::cec2006 *arg1 = (pagmo::cec2006 *) 0 ;
  bool result;
  
  arg1 = (pagmo::cec2006 *)jarg1; 
  result = (bool)pagmo_cec2006_has_batch_fitness((pagmo::cec2006 const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_delete_cec2006(void * jarg1) {
  pagmo::cec2006 *arg1 = (pagmo::cec2006 *) 0 ;
  
  arg1 = (pagmo::cec2006 *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_golomb_ruler__SWIG_0(unsigned int jarg1, unsigned int jarg2) {
  void * jresult ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  pagmo::golomb_ruler *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (pagmo::golomb_ruler *)new pagmo::golomb_ruler(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_golomb_ruler__SWIG_1(unsigned int jarg1) {
  void * jresult ;
  unsigned int arg1 ;
  pagmo::golomb_ruler *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  result = (pagmo::golomb_ruler *)new pagmo::golomb_ruler(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_golomb_ruler__SWIG_2() {
  void * jresult ;
  pagmo::golomb_ruler *result = 0 ;
  
  result = (pagmo::golomb_ruler *)new pagmo::golomb_ruler();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_golomb_ruler_fitness(void * jarg1, void * jarg2) {
  void * jresult ;
  pagmo::golomb_ruler *arg1 = (pagmo::golomb_ruler *) 0 ;
  pagmo::vector_double *arg2 = 0 ;
  pagmo::vector_double result;
  
  arg1 = (pagmo::golomb_ruler *)jarg1; 
  arg2 = (pagmo::vector_double *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pagmo::vector_double const & is null", 0);
    return 0;
  } 
  result = ((pagmo::golomb_ruler const *)arg1)->fitness((pagmo::vector_double const &)*arg2);
  jresult = new pagmo::vector_double(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_golomb_ruler_get_bounds(void * jarg1) {
  void * jresult ;
  pagmo::golomb_ruler *arg1 = (pagmo::golomb_ruler *) 0 ;
  std::pair< pagmo::vector_double,pagmo::vector_double > result;
  
  arg1 = (pagmo::golomb_ruler *)jarg1; 
  result = ((pagmo::golomb_ruler const *)arg1)->get_bounds();
  jresult = new std::pair< pagmo::vector_double,pagmo::vector_double >(result); 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pagmo_golomb_ruler_get_nix(void * jarg1) {
  unsigned long jresult ;
  pagmo::golomb_ruler *arg1 = (pagmo::golomb_ruler *) 0 ;
  pagmo::vector_double::size_type result;
  
  arg1 = (pagmo::golomb_ruler *)jarg1; 
  result = ((pagmo::golomb_ruler const *)arg1)->get_nix();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pagmo_golomb_ruler_get_nec(void * jarg1) {
  unsigned long jresult ;
  pagmo::golomb_ruler *arg1 = (pagmo::golomb_ruler *) 0 ;
  pagmo::vector_double::size_type result;
  
  arg1 = (pagmo::golomb_ruler *)jarg1; 
  result = ((pagmo::golomb_ruler const *)arg1)->get_nec();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_pagmo_golomb_ruler_get_name(void * jarg1) {
  const char * jresult ;
  pagmo::golomb_ruler *arg1 = (pagmo::golomb_ruler *) 0 ;
  std::string result;
  
  arg1 = (pagmo::golomb_ruler *)jarg1; 
  result = ((pagmo::golomb_ruler const *)arg1)->get_name();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pagmo_golomb_ruler_get_nic(void * jarg1) {
  unsigned long jresult ;
  pagmo::golomb_ruler *arg1 = (pagmo::golomb_ruler *) 0 ;
  pagmo::vector_double::size_type result;
  
  arg1 = (pagmo::golomb_ruler *)jarg1; 
  result = pagmo_golomb_ruler_get_nic((pagmo::golomb_ruler const *)arg1);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pagmo_golomb_ruler_get_nobj(void * jarg1) {
  unsigned long jresult ;
  pagmo::golomb_ruler *arg1 = (pagmo::golomb_ruler *) 0 ;
  pagmo::vector_double::size_type result;
  
  arg1 = (pagmo::golomb_ruler *)jarg1; 
  result = pagmo_golomb_ruler_get_nobj((pagmo::golomb_ruler const *)arg1);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pagmo_golomb_ruler_has_batch_fitness(void * jarg1) {
  unsigned int jresult ;
  pagmo::golomb_ruler *arg1 = (pagmo::golomb_ruler *) 0 ;
  bool result;
  
  arg1 = (pagmo::golomb_ruler *)jarg1; 
  result = (bool)pagmo_golomb_ruler_has_batch_fitness((pagmo::golomb_ruler const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pagmo_golomb_ruler_get_thread_safety(void * jarg1) {
  int jresult ;
  pagmo::golomb_ruler *arg1 = (pagmo::golomb_ruler *) 0 ;
  pagmo::thread_safety result;
  
  arg1 = (pagmo::golomb_ruler *)jarg1; 
  result = (pagmo::thread_safety)pagmo_golomb_ruler_get_thread_safety((pagmo::golomb_ruler const *)arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_delete_golomb_ruler(void * jarg1) {
  pagmo::golomb_ruler *arg1 = (pagmo::golomb_ruler *) 0 ;
  
  arg1 = (pagmo::golomb_ruler *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_inventory__SWIG_0(unsigned int jarg1, unsigned int jarg2, unsigned int jarg3) {
  void * jresult ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  pagmo::inventory *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  result = (pagmo::inventory *)new pagmo::inventory(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_inventory__SWIG_1(unsigned int jarg1, unsigned int jarg2) {
  void * jresult ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  pagmo::inventory *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (pagmo::inventory *)new pagmo::inventory(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_inventory__SWIG_2(unsigned int jarg1) {
  void * jresult ;
  unsigned int arg1 ;
  pagmo::inventory *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  result = (pagmo::inventory *)new pagmo::inventory(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_inventory__SWIG_3() {
  void * jresult ;
  pagmo::inventory *result = 0 ;
  
  result = (pagmo::inventory *)new pagmo::inventory();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_inventory_fitness(void * jarg1, void * jarg2) {
  void * jresult ;
  pagmo::inventory *arg1 = (pagmo::inventory *) 0 ;
  pagmo::vector_double *arg2 = 0 ;
  pagmo::vector_double result;
  
  arg1 = (pagmo::inventory *)jarg1; 
  arg2 = (pagmo::vector_double *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pagmo::vector_double const & is null", 0);
    return 0;
  } 
  result = ((pagmo::inventory const *)arg1)->fitness((pagmo::vector_double const &)*arg2);
  jresult = new pagmo::vector_double(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_inventory_get_bounds(void * jarg1) {
  void * jresult ;
  pagmo::inventory *arg1 = (pagmo::inventory *) 0 ;
  std::pair< pagmo::vector_double,pagmo::vector_double > result;
  
  arg1 = (pagmo::inventory *)jarg1; 
  result = ((pagmo::inventory const *)arg1)->get_bounds();
  jresult = new std::pair< pagmo::vector_double,pagmo::vector_double >(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_inventory_set_seed(void * jarg1, unsigned int jarg2) {
  pagmo::inventory *arg1 = (pagmo::inventory *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pagmo::inventory *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->set_seed(arg2);
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_pagmo_inventory_get_name(void * jarg1) {
  const char * jresult ;
  pagmo::inventory *arg1 = (pagmo::inventory *) 0 ;
  std::string result;
  
  arg1 = (pagmo::inventory *)jarg1; 
  result = ((pagmo::inventory const *)arg1)->get_name();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_pagmo_inventory_get_extra_info(void * jarg1) {
  const char * jresult ;
  pagmo::inventory *arg1 = (pagmo::inventory *) 0 ;
  std::string result;
  
  arg1 = (pagmo::inventory *)jarg1; 
  result = ((pagmo::inventory const *)arg1)->get_extra_info();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pagmo_inventory_get_nic(void * jarg1) {
  unsigned long jresult ;
  pagmo::inventory *arg1 = (pagmo::inventory *) 0 ;
  pagmo::vector_double::size_type result;
  
  arg1 = (pagmo::inventory *)jarg1; 
  result = pagmo_inventory_get_nic((pagmo::inventory const *)arg1);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pagmo_inventory_get_nec(void * jarg1) {
  unsigned long jresult ;
  pagmo::inventory *arg1 = (pagmo::inventory *) 0 ;
  pagmo::vector_double::size_type result;
  
  arg1 = (pagmo::inventory *)jarg1; 
  result = pagmo_inventory_get_nec((pagmo::inventory const *)arg1);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pagmo_inventory_get_nix(void * jarg1) {
  unsigned long jresult ;
  pagmo::inventory *arg1 = (pagmo::inventory *) 0 ;
  pagmo::vector_double::size_type result;
  
  arg1 = (pagmo::inventory *)jarg1; 
  result = pagmo_inventory_get_nix((pagmo::inventory const *)arg1);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pagmo_inventory_get_nobj(void * jarg1) {
  unsigned long jresult ;
  pagmo::inventory *arg1 = (pagmo::inventory *) 0 ;
  pagmo::vector_double::size_type result;
  
  arg1 = (pagmo::inventory *)jarg1; 
  result = pagmo_inventory_get_nobj((pagmo::inventory const *)arg1);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pagmo_inventory_has_batch_fitness(void * jarg1) {
  unsigned int jresult ;
  pagmo::inventory *arg1 = (pagmo::inventory *) 0 ;
  bool result;
  
  arg1 = (pagmo::inventory *)jarg1; 
  result = (bool)pagmo_inventory_has_batch_fitness((pagmo::inventory const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pagmo_inventory_get_thread_safety(void * jarg1) {
  int jresult ;
  pagmo::inventory *arg1 = (pagmo::inventory *) 0 ;
  pagmo::thread_safety result;
  
  arg1 = (pagmo::inventory *)jarg1; 
  result = (pagmo::thread_safety)pagmo_inventory_get_thread_safety((pagmo::inventory const *)arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_delete_inventory(void * jarg1) {
  pagmo::inventory *arg1 = (pagmo::inventory *) 0 ;
  
  arg1 = (pagmo::inventory *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_minlp_rastrigin__SWIG_0(unsigned int jarg1, unsigned int jarg2) {
  void * jresult ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  pagmo::minlp_rastrigin *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (pagmo::minlp_rastrigin *)new pagmo::minlp_rastrigin(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_minlp_rastrigin__SWIG_1(unsigned int jarg1) {
  void * jresult ;
  unsigned int arg1 ;
  pagmo::minlp_rastrigin *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  result = (pagmo::minlp_rastrigin *)new pagmo::minlp_rastrigin(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_minlp_rastrigin__SWIG_2() {
  void * jresult ;
  pagmo::minlp_rastrigin *result = 0 ;
  
  result = (pagmo::minlp_rastrigin *)new pagmo::minlp_rastrigin();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_minlp_rastrigin_fitness(void * jarg1, void * jarg2) {
  void * jresult ;
  pagmo::minlp_rastrigin *arg1 = (pagmo::minlp_rastrigin *) 0 ;
  pagmo::vector_double *arg2 = 0 ;
  pagmo::vector_double result;
  
  arg1 = (pagmo::minlp_rastrigin *)jarg1; 
  arg2 = (pagmo::vector_double *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pagmo::vector_double const & is null", 0);
    return 0;
  } 
  result = ((pagmo::minlp_rastrigin const *)arg1)->fitness((pagmo::vector_double const &)*arg2);
  jresult = new pagmo::vector_double(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_minlp_rastrigin_get_bounds(void * jarg1) {
  void * jresult ;
  pagmo::minlp_rastrigin *arg1 = (pagmo::minlp_rastrigin *) 0 ;
  std::pair< pagmo::vector_double,pagmo::vector_double > result;
  
  arg1 = (pagmo::minlp_rastrigin *)jarg1; 
  result = ((pagmo::minlp_rastrigin const *)arg1)->get_bounds();
  jresult = new std::pair< pagmo::vector_double,pagmo::vector_double >(result); 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pagmo_minlp_rastrigin_get_nix(void * jarg1) {
  unsigned long jresult ;
  pagmo::minlp_rastrigin *arg1 = (pagmo::minlp_rastrigin *) 0 ;
  pagmo::vector_double::size_type result;
  
  arg1 = (pagmo::minlp_rastrigin *)jarg1; 
  result = ((pagmo::minlp_rastrigin const *)arg1)->get_nix();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_minlp_rastrigin_gradient(void * jarg1, void * jarg2) {
  void * jresult ;
  pagmo::minlp_rastrigin *arg1 = (pagmo::minlp_rastrigin *) 0 ;
  pagmo::vector_double *arg2 = 0 ;
  pagmo::vector_double result;
  
  arg1 = (pagmo::minlp_rastrigin *)jarg1; 
  arg2 = (pagmo::vector_double *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pagmo::vector_double const & is null", 0);
    return 0;
  } 
  result = ((pagmo::minlp_rastrigin const *)arg1)->gradient((pagmo::vector_double const &)*arg2);
  jresult = new pagmo::vector_double(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_minlp_rastrigin_hessians(void * jarg1, void * jarg2) {
  void * jresult ;
  pagmo::minlp_rastrigin *arg1 = (pagmo::minlp_rastrigin *) 0 ;
  pagmo::vector_double *arg2 = 0 ;
  std::vector< pagmo::vector_double > result;
  
  arg1 = (pagmo::minlp_rastrigin *)jarg1; 
  arg2 = (pagmo::vector_double *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pagmo::vector_double const & is null", 0);
    return 0;
  } 
  result = ((pagmo::minlp_rastrigin const *)arg1)->hessians((pagmo::vector_double const &)*arg2);
  jresult = new std::vector< pagmo::vector_double >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_minlp_rastrigin_hessians_sparsity(void * jarg1) {
  void * jresult ;
  pagmo::minlp_rastrigin *arg1 = (pagmo::minlp_rastrigin *) 0 ;
  SwigValueWrapper< std::vector< std::vector< std::pair< size_t,size_t > > > > result;
  
  arg1 = (pagmo::minlp_rastrigin *)jarg1; 
  result = ((pagmo::minlp_rastrigin const *)arg1)->hessians_sparsity();
  jresult = new std::vector< pagmo::sparsity_pattern >(result); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_pagmo_minlp_rastrigin_get_name(void * jarg1) {
  const char * jresult ;
  pagmo::minlp_rastrigin *arg1 = (pagmo::minlp_rastrigin *) 0 ;
  std::string result;
  
  arg1 = (pagmo::minlp_rastrigin *)jarg1; 
  result = ((pagmo::minlp_rastrigin const *)arg1)->get_name();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_pagmo_minlp_rastrigin_get_extra_info(void * jarg1) {
  const char * jresult ;
  pagmo::minlp_rastrigin *arg1 = (pagmo::minlp_rastrigin *) 0 ;
  std::string result;
  
  arg1 = (pagmo::minlp_rastrigin *)jarg1; 
  result = ((pagmo::minlp_rastrigin const *)arg1)->get_extra_info();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pagmo_minlp_rastrigin_get_nic(void * jarg1) {
  unsigned long jresult ;
  pagmo::minlp_rastrigin *arg1 = (pagmo::minlp_rastrigin *) 0 ;
  pagmo::vector_double::size_type result;
  
  arg1 = (pagmo::minlp_rastrigin *)jarg1; 
  result = pagmo_minlp_rastrigin_get_nic((pagmo::minlp_rastrigin const *)arg1);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pagmo_minlp_rastrigin_get_nec(void * jarg1) {
  unsigned long jresult ;
  pagmo::minlp_rastrigin *arg1 = (pagmo::minlp_rastrigin *) 0 ;
  pagmo::vector_double::size_type result;
  
  arg1 = (pagmo::minlp_rastrigin *)jarg1; 
  result = pagmo_minlp_rastrigin_get_nec((pagmo::minlp_rastrigin const *)arg1);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pagmo_minlp_rastrigin_get_nobj(void * jarg1) {
  unsigned long jresult ;
  pagmo::minlp_rastrigin *arg1 = (pagmo::minlp_rastrigin *) 0 ;
  pagmo::vector_double::size_type result;
  
  arg1 = (pagmo::minlp_rastrigin *)jarg1; 
  result = pagmo_minlp_rastrigin_get_nobj((pagmo::minlp_rastrigin const *)arg1);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pagmo_minlp_rastrigin_has_batch_fitness(void * jarg1) {
  unsigned int jresult ;
  pagmo::minlp_rastrigin *arg1 = (pagmo::minlp_rastrigin *) 0 ;
  bool result;
  
  arg1 = (pagmo::minlp_rastrigin *)jarg1; 
  result = (bool)pagmo_minlp_rastrigin_has_batch_fitness((pagmo::minlp_rastrigin const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pagmo_minlp_rastrigin_get_thread_safety(void * jarg1) {
  int jresult ;
  pagmo::minlp_rastrigin *arg1 = (pagmo::minlp_rastrigin *) 0 ;
  pagmo::thread_safety result;
  
  arg1 = (pagmo::minlp_rastrigin *)jarg1; 
  result = (pagmo::thread_safety)pagmo_minlp_rastrigin_get_thread_safety((pagmo::minlp_rastrigin const *)arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_delete_minlp_rastrigin(void * jarg1) {
  pagmo::minlp_rastrigin *arg1 = (pagmo::minlp_rastrigin *) 0 ;
  
  arg1 = (pagmo::minlp_rastrigin *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_zdt__SWIG_0(unsigned int jarg1, unsigned int jarg2) {
  void * jresult ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  pagmo::zdt *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (pagmo::zdt *)new pagmo::zdt(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_zdt__SWIG_1(unsigned int jarg1) {
  void * jresult ;
  unsigned int arg1 ;
  pagmo::zdt *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  result = (pagmo::zdt *)new pagmo::zdt(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_zdt__SWIG_2() {
  void * jresult ;
  pagmo::zdt *result = 0 ;
  
  result = (pagmo::zdt *)new pagmo::zdt();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_zdt_fitness(void * jarg1, void * jarg2) {
  void * jresult ;
  pagmo::zdt *arg1 = (pagmo::zdt *) 0 ;
  pagmo::vector_double *arg2 = 0 ;
  pagmo::vector_double result;
  
  arg1 = (pagmo::zdt *)jarg1; 
  arg2 = (pagmo::vector_double *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pagmo::vector_double const & is null", 0);
    return 0;
  } 
  result = ((pagmo::zdt const *)arg1)->fitness((pagmo::vector_double const &)*arg2);
  jresult = new pagmo::vector_double(result); 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pagmo_zdt_get_nobj(void * jarg1) {
  unsigned long jresult ;
  pagmo::zdt *arg1 = (pagmo::zdt *) 0 ;
  pagmo::vector_double::size_type result;
  
  arg1 = (pagmo::zdt *)jarg1; 
  result = ((pagmo::zdt const *)arg1)->get_nobj();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_zdt_get_bounds(void * jarg1) {
  void * jresult ;
  pagmo::zdt *arg1 = (pagmo::zdt *) 0 ;
  std::pair< pagmo::vector_double,pagmo::vector_double > result;
  
  arg1 = (pagmo::zdt *)jarg1; 
  result = ((pagmo::zdt const *)arg1)->get_bounds();
  jresult = new std::pair< pagmo::vector_double,pagmo::vector_double >(result); 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pagmo_zdt_get_nix(void * jarg1) {
  unsigned long jresult ;
  pagmo::zdt *arg1 = (pagmo::zdt *) 0 ;
  pagmo::vector_double::size_type result;
  
  arg1 = (pagmo::zdt *)jarg1; 
  result = ((pagmo::zdt const *)arg1)->get_nix();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_pagmo_zdt_get_name(void * jarg1) {
  const char * jresult ;
  pagmo::zdt *arg1 = (pagmo::zdt *) 0 ;
  std::string result;
  
  arg1 = (pagmo::zdt *)jarg1; 
  result = ((pagmo::zdt const *)arg1)->get_name();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_pagmo_zdt_p_distance__SWIG_0(void * jarg1, void * jarg2) {
  double jresult ;
  pagmo::zdt *arg1 = (pagmo::zdt *) 0 ;
  pagmo::population *arg2 = 0 ;
  double result;
  
  arg1 = (pagmo::zdt *)jarg1; 
  arg2 = (pagmo::population *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pagmo::population const & is null", 0);
    return 0;
  } 
  result = (double)((pagmo::zdt const *)arg1)->p_distance((pagmo::population const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_pagmo_zdt_p_distance__SWIG_1(void * jarg1, void * jarg2) {
  double jresult ;
  pagmo::zdt *arg1 = (pagmo::zdt *) 0 ;
  pagmo::vector_double *arg2 = 0 ;
  double result;
  
  arg1 = (pagmo::zdt *)jarg1; 
  arg2 = (pagmo::vector_double *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pagmo::vector_double const & is null", 0);
    return 0;
  } 
  result = (double)((pagmo::zdt const *)arg1)->p_distance((pagmo::vector_double const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pagmo_zdt_get_nic(void * jarg1) {
  unsigned long jresult ;
  pagmo::zdt *arg1 = (pagmo::zdt *) 0 ;
  pagmo::vector_double::size_type result;
  
  arg1 = (pagmo::zdt *)jarg1; 
  result = pagmo_zdt_get_nic((pagmo::zdt const *)arg1);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pagmo_zdt_get_nec(void * jarg1) {
  unsigned long jresult ;
  pagmo::zdt *arg1 = (pagmo::zdt *) 0 ;
  pagmo::vector_double::size_type result;
  
  arg1 = (pagmo::zdt *)jarg1; 
  result = pagmo_zdt_get_nec((pagmo::zdt const *)arg1);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pagmo_zdt_has_batch_fitness(void * jarg1) {
  unsigned int jresult ;
  pagmo::zdt *arg1 = (pagmo::zdt *) 0 ;
  bool result;
  
  arg1 = (pagmo::zdt *)jarg1; 
  result = (bool)pagmo_zdt_has_batch_fitness((pagmo::zdt const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pagmo_zdt_get_thread_safety(void * jarg1) {
  int jresult ;
  pagmo::zdt *arg1 = (pagmo::zdt *) 0 ;
  pagmo::thread_safety result;
  
  arg1 = (pagmo::zdt *)jarg1; 
  result = (pagmo::thread_safety)pagmo_zdt_get_thread_safety((pagmo::zdt const *)arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_delete_zdt(void * jarg1) {
  pagmo::zdt *arg1 = (pagmo::zdt *) 0 ;
  
  arg1 = (pagmo::zdt *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_fair_replace() {
  void * jresult ;
  pagmo::fair_replace *result = 0 ;
  
  result = (pagmo::fair_replace *)new pagmo::fair_replace();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_fair_replace_replace(void * jarg1, void * jarg2, unsigned long jarg3, unsigned long jarg4, unsigned long jarg5, unsigned long jarg6, unsigned long jarg7, void * jarg8, void * jarg9) {
  void * jresult ;
  pagmo::fair_replace *arg1 = (pagmo::fair_replace *) 0 ;
  pagmo::individuals_group_t *arg2 = 0 ;
  pagmo::vector_double::size_type *arg3 = 0 ;
  pagmo::vector_double::size_type *arg4 = 0 ;
  pagmo::vector_double::size_type *arg5 = 0 ;
  pagmo::vector_double::size_type *arg6 = 0 ;
  pagmo::vector_double::size_type *arg7 = 0 ;
  pagmo::vector_double *arg8 = 0 ;
  pagmo::individuals_group_t *arg9 = 0 ;
  pagmo::vector_double::size_type temp3 ;
  pagmo::vector_double::size_type temp4 ;
  pagmo::vector_double::size_type temp5 ;
  pagmo::vector_double::size_type temp6 ;
  pagmo::vector_double::size_type temp7 ;
  SwigValueWrapper< std::tuple< std::vector< unsigned long long >,std::vector< std::vector< double > >,std::vector< std::vector< double > > > > result;
  
  arg1 = (pagmo::fair_replace *)jarg1; 
  arg2 = (pagmo::individuals_group_t *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pagmo::individuals_group_t const & is null", 0);
    return 0;
  } 
  temp3 = (pagmo::vector_double::size_type)jarg3; 
  arg3 = &temp3; 
  temp4 = (pagmo::vector_double::size_type)jarg4; 
  arg4 = &temp4; 
  temp5 = (pagmo::vector_double::size_type)jarg5; 
  arg5 = &temp5; 
  temp6 = (pagmo::vector_double::size_type)jarg6; 
  arg6 = &temp6; 
  temp7 = (pagmo::vector_double::size_type)jarg7; 
  arg7 = &temp7; 
  arg8 = (pagmo::vector_double *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pagmo::vector_double const & is null", 0);
    return 0;
  } 
  arg9 = (pagmo::individuals_group_t *)jarg9;
  if (!arg9) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pagmo::individuals_group_t const & is null", 0);
    return 0;
  } 
  result = ((pagmo::fair_replace const *)arg1)->replace((pagmo::individuals_group_t const &)*arg2,(pagmo::vector_double::size_type const &)*arg3,(pagmo::vector_double::size_type const &)*arg4,(pagmo::vector_double::size_type const &)*arg5,(pagmo::vector_double::size_type const &)*arg6,(pagmo::vector_double::size_type const &)*arg7,(pagmo::vector_double const &)*arg8,(pagmo::individuals_group_t const &)*arg9);
  jresult = new pagmo::individuals_group_t(result); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_pagmo_fair_replace_get_name(void * jarg1) {
  const char * jresult ;
  pagmo::fair_replace *arg1 = (pagmo::fair_replace *) 0 ;
  std::string result;
  
  arg1 = (pagmo::fair_replace *)jarg1; 
  result = ((pagmo::fair_replace const *)arg1)->get_name();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_pagmo_fair_replace_get_extra_info(void * jarg1) {
  const char * jresult ;
  pagmo::fair_replace *arg1 = (pagmo::fair_replace *) 0 ;
  std::string result;
  
  arg1 = (pagmo::fair_replace *)jarg1; 
  result = ((pagmo::fair_replace const *)arg1)->get_extra_info();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_delete_fair_replace(void * jarg1) {
  pagmo::fair_replace *arg1 = (pagmo::fair_replace *) 0 ;
  
  arg1 = (pagmo::fair_replace *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_select_best() {
  void * jresult ;
  pagmo::select_best *result = 0 ;
  
  result = (pagmo::select_best *)new pagmo::select_best();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_select_best_select(void * jarg1, void * jarg2, unsigned long jarg3, unsigned long jarg4, unsigned long jarg5, unsigned long jarg6, unsigned long jarg7, void * jarg8) {
  void * jresult ;
  pagmo::select_best *arg1 = (pagmo::select_best *) 0 ;
  pagmo::individuals_group_t *arg2 = 0 ;
  pagmo::vector_double::size_type *arg3 = 0 ;
  pagmo::vector_double::size_type *arg4 = 0 ;
  pagmo::vector_double::size_type *arg5 = 0 ;
  pagmo::vector_double::size_type *arg6 = 0 ;
  pagmo::vector_double::size_type *arg7 = 0 ;
  pagmo::vector_double *arg8 = 0 ;
  pagmo::vector_double::size_type temp3 ;
  pagmo::vector_double::size_type temp4 ;
  pagmo::vector_double::size_type temp5 ;
  pagmo::vector_double::size_type temp6 ;
  pagmo::vector_double::size_type temp7 ;
  SwigValueWrapper< std::tuple< std::vector< unsigned long long >,std::vector< std::vector< double > >,std::vector< std::vector< double > > > > result;
  
  arg1 = (pagmo::select_best *)jarg1; 
  arg2 = (pagmo::individuals_group_t *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pagmo::individuals_group_t const & is null", 0);
    return 0;
  } 
  temp3 = (pagmo::vector_double::size_type)jarg3; 
  arg3 = &temp3; 
  temp4 = (pagmo::vector_double::size_type)jarg4; 
  arg4 = &temp4; 
  temp5 = (pagmo::vector_double::size_type)jarg5; 
  arg5 = &temp5; 
  temp6 = (pagmo::vector_double::size_type)jarg6; 
  arg6 = &temp6; 
  temp7 = (pagmo::vector_double::size_type)jarg7; 
  arg7 = &temp7; 
  arg8 = (pagmo::vector_double *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pagmo::vector_double const & is null", 0);
    return 0;
  } 
  result = ((pagmo::select_best const *)arg1)->select((pagmo::individuals_group_t const &)*arg2,(pagmo::vector_double::size_type const &)*arg3,(pagmo::vector_double::size_type const &)*arg4,(pagmo::vector_double::size_type const &)*arg5,(pagmo::vector_double::size_type const &)*arg6,(pagmo::vector_double::size_type const &)*arg7,(pagmo::vector_double const &)*arg8);
  jresult = new pagmo::individuals_group_t(result); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_pagmo_select_best_get_name(void * jarg1) {
  const char * jresult ;
  pagmo::select_best *arg1 = (pagmo::select_best *) 0 ;
  std::string result;
  
  arg1 = (pagmo::select_best *)jarg1; 
  result = ((pagmo::select_best const *)arg1)->get_name();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_pagmo_select_best_get_extra_info(void * jarg1) {
  const char * jresult ;
  pagmo::select_best *arg1 = (pagmo::select_best *) 0 ;
  std::string result;
  
  arg1 = (pagmo::select_best *)jarg1; 
  result = ((pagmo::select_best const *)arg1)->get_extra_info();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_delete_select_best(void * jarg1) {
  pagmo::select_best *arg1 = (pagmo::select_best *) 0 ;
  
  arg1 = (pagmo::select_best *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_unconnected_get_connections(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  pagmo::unconnected *arg1 = (pagmo::unconnected *) 0 ;
  std::size_t arg2 ;
  SwigValueWrapper< std::pair< std::vector< std::size_t >,std::vector< double > > > result;
  
  arg1 = (pagmo::unconnected *)jarg1; 
  arg2 = (std::size_t)jarg2; 
  result = ((pagmo::unconnected const *)arg1)->get_connections(arg2);
  jresult = new std::pair< std::vector< std::size_t >,pagmo::vector_double >(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_unconnected_push_back(void * jarg1) {
  pagmo::unconnected *arg1 = (pagmo::unconnected *) 0 ;
  
  arg1 = (pagmo::unconnected *)jarg1; 
  (arg1)->push_back();
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_pagmo_unconnected_get_name(void * jarg1) {
  const char * jresult ;
  pagmo::unconnected *arg1 = (pagmo::unconnected *) 0 ;
  std::string result;
  
  arg1 = (pagmo::unconnected *)jarg1; 
  result = ((pagmo::unconnected const *)arg1)->get_name();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_unconnected() {
  void * jresult ;
  pagmo::unconnected *result = 0 ;
  
  result = (pagmo::unconnected *)new pagmo::unconnected();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_delete_unconnected(void * jarg1) {
  pagmo::unconnected *arg1 = (pagmo::unconnected *) 0 ;
  
  arg1 = (pagmo::unconnected *)jarg1; 
  delete arg1;
}


SWIGEXPORT double SWIGSTDCALL CSharp_pagmo_hv_algorithm_volume_between__SWIG_0(void * jarg1, void * jarg2, unsigned long jarg3) {
  double jresult ;
  pagmo::vector_double *arg1 = 0 ;
  pagmo::vector_double *arg2 = 0 ;
  pagmo::vector_double::size_type arg3 ;
  double result;
  
  arg1 = (pagmo::vector_double *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pagmo::vector_double const & is null", 0);
    return 0;
  } 
  arg2 = (pagmo::vector_double *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pagmo::vector_double const & is null", 0);
    return 0;
  } 
  arg3 = (pagmo::vector_double::size_type)jarg3; 
  result = (double)pagmo::hv_algorithm::volume_between((std::vector< double > const &)*arg1,(std::vector< double > const &)*arg2,SWIG_STD_MOVE(arg3));
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_pagmo_hv_algorithm_volume_between__SWIG_1(void * jarg1, void * jarg2) {
  double jresult ;
  pagmo::vector_double *arg1 = 0 ;
  pagmo::vector_double *arg2 = 0 ;
  double result;
  
  arg1 = (pagmo::vector_double *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pagmo::vector_double const & is null", 0);
    return 0;
  } 
  arg2 = (pagmo::vector_double *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pagmo::vector_double const & is null", 0);
    return 0;
  } 
  result = (double)pagmo::hv_algorithm::volume_between((std::vector< double > const &)*arg1,(std::vector< double > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_pagmo_hv_algorithm_volume_between__SWIG_2(void * jarg1, void * jarg2, unsigned long jarg3) {
  double jresult ;
  double *arg1 = (double *) 0 ;
  double *arg2 = (double *) 0 ;
  pagmo::vector_double::size_type arg3 ;
  double result;
  
  arg1 = (double *)jarg1; 
  arg2 = (double *)jarg2; 
  arg3 = (pagmo::vector_double::size_type)jarg3; 
  result = (double)pagmo::hv_algorithm::volume_between(arg1,arg2,SWIG_STD_MOVE(arg3));
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_pagmo_hv_algorithm_compute(void * jarg1, void * jarg2, void * jarg3) {
  double jresult ;
  pagmo::hv_algorithm *arg1 = (pagmo::hv_algorithm *) 0 ;
  std::vector< pagmo::vector_double > *arg2 = 0 ;
  pagmo::vector_double *arg3 = 0 ;
  double result;
  
  arg1 = (pagmo::hv_algorithm *)jarg1; 
  arg2 = (std::vector< pagmo::vector_double > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pagmo::vector_double > & is null", 0);
    return 0;
  } 
  arg3 = (pagmo::vector_double *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pagmo::vector_double const & is null", 0);
    return 0;
  } 
  result = (double)((pagmo::hv_algorithm const *)arg1)->compute(*arg2,(pagmo::vector_double const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_pagmo_hv_algorithm_exclusive(void * jarg1, unsigned int jarg2, void * jarg3, void * jarg4) {
  double jresult ;
  pagmo::hv_algorithm *arg1 = (pagmo::hv_algorithm *) 0 ;
  unsigned int arg2 ;
  std::vector< pagmo::vector_double > *arg3 = 0 ;
  pagmo::vector_double *arg4 = 0 ;
  double result;
  
  arg1 = (pagmo::hv_algorithm *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (std::vector< pagmo::vector_double > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pagmo::vector_double > & is null", 0);
    return 0;
  } 
  arg4 = (pagmo::vector_double *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pagmo::vector_double const & is null", 0);
    return 0;
  } 
  result = (double)((pagmo::hv_algorithm const *)arg1)->exclusive(arg2,*arg3,(pagmo::vector_double const &)*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_pagmo_hv_algorithm_least_contributor(void * jarg1, void * jarg2, void * jarg3) {
  unsigned long long jresult ;
  pagmo::hv_algorithm *arg1 = (pagmo::hv_algorithm *) 0 ;
  std::vector< pagmo::vector_double > *arg2 = 0 ;
  pagmo::vector_double *arg3 = 0 ;
  unsigned long long result;
  
  arg1 = (pagmo::hv_algorithm *)jarg1; 
  arg2 = (std::vector< pagmo::vector_double > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pagmo::vector_double > & is null", 0);
    return 0;
  } 
  arg3 = (pagmo::vector_double *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pagmo::vector_double const & is null", 0);
    return 0;
  } 
  result = (unsigned long long)((pagmo::hv_algorithm const *)arg1)->least_contributor(*arg2,(pagmo::vector_double const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_pagmo_hv_algorithm_greatest_contributor(void * jarg1, void * jarg2, void * jarg3) {
  unsigned long long jresult ;
  pagmo::hv_algorithm *arg1 = (pagmo::hv_algorithm *) 0 ;
  std::vector< pagmo::vector_double > *arg2 = 0 ;
  pagmo::vector_double *arg3 = 0 ;
  unsigned long long result;
  
  arg1 = (pagmo::hv_algorithm *)jarg1; 
  arg2 = (std::vector< pagmo::vector_double > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pagmo::vector_double > & is null", 0);
    return 0;
  } 
  arg3 = (pagmo::vector_double *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pagmo::vector_double const & is null", 0);
    return 0;
  } 
  result = (unsigned long long)((pagmo::hv_algorithm const *)arg1)->greatest_contributor(*arg2,(pagmo::vector_double const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_hv_algorithm_contributions(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  pagmo::hv_algorithm *arg1 = (pagmo::hv_algorithm *) 0 ;
  std::vector< pagmo::vector_double > *arg2 = 0 ;
  pagmo::vector_double *arg3 = 0 ;
  std::vector< double > result;
  
  arg1 = (pagmo::hv_algorithm *)jarg1; 
  arg2 = (std::vector< pagmo::vector_double > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pagmo::vector_double > & is null", 0);
    return 0;
  } 
  arg3 = (pagmo::vector_double *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pagmo::vector_double const & is null", 0);
    return 0;
  } 
  result = ((pagmo::hv_algorithm const *)arg1)->contributions(*arg2,(pagmo::vector_double const &)*arg3);
  jresult = new std::vector< double >(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_hv_algorithm_verify_before_compute(void * jarg1, void * jarg2, void * jarg3) {
  pagmo::hv_algorithm *arg1 = (pagmo::hv_algorithm *) 0 ;
  std::vector< pagmo::vector_double > *arg2 = 0 ;
  pagmo::vector_double *arg3 = 0 ;
  
  arg1 = (pagmo::hv_algorithm *)jarg1; 
  arg2 = (std::vector< pagmo::vector_double > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pagmo::vector_double > const & is null", 0);
    return ;
  } 
  arg3 = (pagmo::vector_double *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pagmo::vector_double const & is null", 0);
    return ;
  } 
  ((pagmo::hv_algorithm const *)arg1)->verify_before_compute((std::vector< pagmo::vector_double > const &)*arg2,(pagmo::vector_double const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_hv_algorithm_clone(void * jarg1) {
  void * jresult ;
  pagmo::hv_algorithm *arg1 = (pagmo::hv_algorithm *) 0 ;
  SwigValueWrapper< std::shared_ptr< pagmo::hv_algorithm > > result;
  
  arg1 = (pagmo::hv_algorithm *)jarg1; 
  result = ((pagmo::hv_algorithm const *)arg1)->clone();
  jresult = new std::shared_ptr< pagmo::hv_algorithm >(result); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_pagmo_hv_algorithm_get_name(void * jarg1) {
  const char * jresult ;
  pagmo::hv_algorithm *arg1 = (pagmo::hv_algorithm *) 0 ;
  std::string result;
  
  arg1 = (pagmo::hv_algorithm *)jarg1; 
  result = ((pagmo::hv_algorithm const *)arg1)->get_name();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_delete_hv_algorithm(void * jarg1) {
  pagmo::hv_algorithm *arg1 = (pagmo::hv_algorithm *) 0 ;
  
  arg1 = (pagmo::hv_algorithm *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_hypervolume__SWIG_0() {
  void * jresult ;
  pagmo::hypervolume *result = 0 ;
  
  result = (pagmo::hypervolume *)new pagmo::hypervolume();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_hypervolume__SWIG_1(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  pagmo::population *arg1 = 0 ;
  bool arg2 ;
  pagmo::hypervolume *result = 0 ;
  
  arg1 = (pagmo::population *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pagmo::population const & is null", 0);
    return 0;
  } 
  arg2 = jarg2 ? true : false; 
  result = (pagmo::hypervolume *)new pagmo::hypervolume((pagmo::population const &)*arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_hypervolume__SWIG_2(void * jarg1) {
  void * jresult ;
  pagmo::population *arg1 = 0 ;
  pagmo::hypervolume *result = 0 ;
  
  arg1 = (pagmo::population *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pagmo::population const & is null", 0);
    return 0;
  } 
  result = (pagmo::hypervolume *)new pagmo::hypervolume((pagmo::population const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_hypervolume__SWIG_3(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  std::vector< pagmo::vector_double > *arg1 = 0 ;
  bool arg2 ;
  pagmo::hypervolume *result = 0 ;
  
  arg1 = (std::vector< pagmo::vector_double > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pagmo::vector_double > const & is null", 0);
    return 0;
  } 
  arg2 = jarg2 ? true : false; 
  result = (pagmo::hypervolume *)new pagmo::hypervolume((std::vector< pagmo::vector_double > const &)*arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_hypervolume__SWIG_4(void * jarg1) {
  void * jresult ;
  std::vector< pagmo::vector_double > *arg1 = 0 ;
  pagmo::hypervolume *result = 0 ;
  
  arg1 = (std::vector< pagmo::vector_double > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pagmo::vector_double > const & is null", 0);
    return 0;
  } 
  result = (pagmo::hypervolume *)new pagmo::hypervolume((std::vector< pagmo::vector_double > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_new_hypervolume__SWIG_5(void * jarg1) {
  void * jresult ;
  pagmo::hypervolume *arg1 = 0 ;
  pagmo::hypervolume *result = 0 ;
  
  arg1 = (pagmo::hypervolume *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pagmo::hypervolume const & is null", 0);
    return 0;
  } 
  result = (pagmo::hypervolume *)new pagmo::hypervolume((pagmo::hypervolume const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_hypervolume_set_copy_points(void * jarg1, unsigned int jarg2) {
  pagmo::hypervolume *arg1 = (pagmo::hypervolume *) 0 ;
  bool arg2 ;
  
  arg1 = (pagmo::hypervolume *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->set_copy_points(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pagmo_hypervolume_get_copy_points(void * jarg1) {
  unsigned int jresult ;
  pagmo::hypervolume *arg1 = (pagmo::hypervolume *) 0 ;
  bool result;
  
  arg1 = (pagmo::hypervolume *)jarg1; 
  result = (bool)((pagmo::hypervolume const *)arg1)->get_copy_points();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_hypervolume_set_verify(void * jarg1, unsigned int jarg2) {
  pagmo::hypervolume *arg1 = (pagmo::hypervolume *) 0 ;
  bool arg2 ;
  
  arg1 = (pagmo::hypervolume *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->set_verify(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pagmo_hypervolume_get_verify(void * jarg1) {
  unsigned int jresult ;
  pagmo::hypervolume *arg1 = (pagmo::hypervolume *) 0 ;
  bool result;
  
  arg1 = (pagmo::hypervolume *)jarg1; 
  result = (bool)((pagmo::hypervolume const *)arg1)->get_verify();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_hypervolume_refpoint__SWIG_0(void * jarg1, double jarg2) {
  void * jresult ;
  pagmo::hypervolume *arg1 = (pagmo::hypervolume *) 0 ;
  double arg2 ;
  pagmo::vector_double result;
  
  arg1 = (pagmo::hypervolume *)jarg1; 
  arg2 = (double)jarg2; 
  result = ((pagmo::hypervolume const *)arg1)->refpoint(arg2);
  jresult = new pagmo::vector_double(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_hypervolume_refpoint__SWIG_1(void * jarg1) {
  void * jresult ;
  pagmo::hypervolume *arg1 = (pagmo::hypervolume *) 0 ;
  pagmo::vector_double result;
  
  arg1 = (pagmo::hypervolume *)jarg1; 
  result = ((pagmo::hypervolume const *)arg1)->refpoint();
  jresult = new pagmo::vector_double(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_hypervolume_get_points(void * jarg1) {
  void * jresult ;
  pagmo::hypervolume *arg1 = (pagmo::hypervolume *) 0 ;
  std::vector< pagmo::vector_double > *result = 0 ;
  
  arg1 = (pagmo::hypervolume *)jarg1; 
  result = (std::vector< pagmo::vector_double > *) &((pagmo::hypervolume const *)arg1)->get_points();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_hypervolume_get_best_compute(void * jarg1, void * jarg2) {
  void * jresult ;
  pagmo::hypervolume *arg1 = (pagmo::hypervolume *) 0 ;
  pagmo::vector_double *arg2 = 0 ;
  SwigValueWrapper< std::shared_ptr< pagmo::hv_algorithm > > result;
  
  arg1 = (pagmo::hypervolume *)jarg1; 
  arg2 = (pagmo::vector_double *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pagmo::vector_double const & is null", 0);
    return 0;
  } 
  result = ((pagmo::hypervolume const *)arg1)->get_best_compute((pagmo::vector_double const &)*arg2);
  jresult = new std::shared_ptr< pagmo::hv_algorithm >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_hypervolume_get_best_exclusive(void * jarg1, unsigned int jarg2, void * jarg3) {
  void * jresult ;
  pagmo::hypervolume *arg1 = (pagmo::hypervolume *) 0 ;
  unsigned int arg2 ;
  pagmo::vector_double *arg3 = 0 ;
  SwigValueWrapper< std::shared_ptr< pagmo::hv_algorithm > > result;
  
  arg1 = (pagmo::hypervolume *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (pagmo::vector_double *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pagmo::vector_double const & is null", 0);
    return 0;
  } 
  result = ((pagmo::hypervolume const *)arg1)->get_best_exclusive(arg2,(pagmo::vector_double const &)*arg3);
  jresult = new std::shared_ptr< pagmo::hv_algorithm >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_hypervolume_get_best_contributions(void * jarg1, void * jarg2) {
  void * jresult ;
  pagmo::hypervolume *arg1 = (pagmo::hypervolume *) 0 ;
  pagmo::vector_double *arg2 = 0 ;
  SwigValueWrapper< std::shared_ptr< pagmo::hv_algorithm > > result;
  
  arg1 = (pagmo::hypervolume *)jarg1; 
  arg2 = (pagmo::vector_double *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pagmo::vector_double const & is null", 0);
    return 0;
  } 
  result = ((pagmo::hypervolume const *)arg1)->get_best_contributions((pagmo::vector_double const &)*arg2);
  jresult = new std::shared_ptr< pagmo::hv_algorithm >(result); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_pagmo_hypervolume_compute__SWIG_0(void * jarg1, void * jarg2) {
  double jresult ;
  pagmo::hypervolume *arg1 = (pagmo::hypervolume *) 0 ;
  pagmo::vector_double *arg2 = 0 ;
  double result;
  
  arg1 = (pagmo::hypervolume *)jarg1; 
  arg2 = (pagmo::vector_double *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pagmo::vector_double const & is null", 0);
    return 0;
  } 
  result = (double)((pagmo::hypervolume const *)arg1)->compute((pagmo::vector_double const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_pagmo_hypervolume_compute__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  double jresult ;
  pagmo::hypervolume *arg1 = (pagmo::hypervolume *) 0 ;
  pagmo::vector_double *arg2 = 0 ;
  pagmo::hv_algorithm *arg3 = 0 ;
  double result;
  
  arg1 = (pagmo::hypervolume *)jarg1; 
  arg2 = (pagmo::vector_double *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pagmo::vector_double const & is null", 0);
    return 0;
  } 
  arg3 = (pagmo::hv_algorithm *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pagmo::hv_algorithm & is null", 0);
    return 0;
  } 
  result = (double)((pagmo::hypervolume const *)arg1)->compute((pagmo::vector_double const &)*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_pagmo_hypervolume_exclusive__SWIG_0(void * jarg1, unsigned int jarg2, void * jarg3, void * jarg4) {
  double jresult ;
  pagmo::hypervolume *arg1 = (pagmo::hypervolume *) 0 ;
  unsigned int arg2 ;
  pagmo::vector_double *arg3 = 0 ;
  pagmo::hv_algorithm *arg4 = 0 ;
  double result;
  
  arg1 = (pagmo::hypervolume *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (pagmo::vector_double *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pagmo::vector_double const & is null", 0);
    return 0;
  } 
  arg4 = (pagmo::hv_algorithm *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pagmo::hv_algorithm & is null", 0);
    return 0;
  } 
  result = (double)((pagmo::hypervolume const *)arg1)->exclusive(arg2,(pagmo::vector_double const &)*arg3,*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_pagmo_hypervolume_exclusive__SWIG_1(void * jarg1, unsigned int jarg2, void * jarg3) {
  double jresult ;
  pagmo::hypervolume *arg1 = (pagmo::hypervolume *) 0 ;
  unsigned int arg2 ;
  pagmo::vector_double *arg3 = 0 ;
  double result;
  
  arg1 = (pagmo::hypervolume *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (pagmo::vector_double *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pagmo::vector_double const & is null", 0);
    return 0;
  } 
  result = (double)((pagmo::hypervolume const *)arg1)->exclusive(arg2,(pagmo::vector_double const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_hypervolume_contributions__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  pagmo::hypervolume *arg1 = (pagmo::hypervolume *) 0 ;
  pagmo::vector_double *arg2 = 0 ;
  pagmo::hv_algorithm *arg3 = 0 ;
  std::vector< double > result;
  
  arg1 = (pagmo::hypervolume *)jarg1; 
  arg2 = (pagmo::vector_double *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pagmo::vector_double const & is null", 0);
    return 0;
  } 
  arg3 = (pagmo::hv_algorithm *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pagmo::hv_algorithm & is null", 0);
    return 0;
  } 
  result = ((pagmo::hypervolume const *)arg1)->contributions((pagmo::vector_double const &)*arg2,*arg3);
  jresult = new std::vector< double >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_hypervolume_contributions__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  pagmo::hypervolume *arg1 = (pagmo::hypervolume *) 0 ;
  pagmo::vector_double *arg2 = 0 ;
  std::vector< double > result;
  
  arg1 = (pagmo::hypervolume *)jarg1; 
  arg2 = (pagmo::vector_double *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pagmo::vector_double const & is null", 0);
    return 0;
  } 
  result = ((pagmo::hypervolume const *)arg1)->contributions((pagmo::vector_double const &)*arg2);
  jresult = new std::vector< double >(result); 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_pagmo_hypervolume_least_contributor__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  unsigned long long jresult ;
  pagmo::hypervolume *arg1 = (pagmo::hypervolume *) 0 ;
  pagmo::vector_double *arg2 = 0 ;
  pagmo::hv_algorithm *arg3 = 0 ;
  unsigned long long result;
  
  arg1 = (pagmo::hypervolume *)jarg1; 
  arg2 = (pagmo::vector_double *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pagmo::vector_double const & is null", 0);
    return 0;
  } 
  arg3 = (pagmo::hv_algorithm *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pagmo::hv_algorithm & is null", 0);
    return 0;
  } 
  result = (unsigned long long)((pagmo::hypervolume const *)arg1)->least_contributor((pagmo::vector_double const &)*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_pagmo_hypervolume_least_contributor__SWIG_1(void * jarg1, void * jarg2) {
  unsigned long long jresult ;
  pagmo::hypervolume *arg1 = (pagmo::hypervolume *) 0 ;
  pagmo::vector_double *arg2 = 0 ;
  unsigned long long result;
  
  arg1 = (pagmo::hypervolume *)jarg1; 
  arg2 = (pagmo::vector_double *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pagmo::vector_double const & is null", 0);
    return 0;
  } 
  result = (unsigned long long)((pagmo::hypervolume const *)arg1)->least_contributor((pagmo::vector_double const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_pagmo_hypervolume_greatest_contributor__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  unsigned long long jresult ;
  pagmo::hypervolume *arg1 = (pagmo::hypervolume *) 0 ;
  pagmo::vector_double *arg2 = 0 ;
  pagmo::hv_algorithm *arg3 = 0 ;
  unsigned long long result;
  
  arg1 = (pagmo::hypervolume *)jarg1; 
  arg2 = (pagmo::vector_double *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pagmo::vector_double const & is null", 0);
    return 0;
  } 
  arg3 = (pagmo::hv_algorithm *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pagmo::hv_algorithm & is null", 0);
    return 0;
  } 
  result = (unsigned long long)((pagmo::hypervolume const *)arg1)->greatest_contributor((pagmo::vector_double const &)*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_pagmo_hypervolume_greatest_contributor__SWIG_1(void * jarg1, void * jarg2) {
  unsigned long long jresult ;
  pagmo::hypervolume *arg1 = (pagmo::hypervolume *) 0 ;
  pagmo::vector_double *arg2 = 0 ;
  unsigned long long result;
  
  arg1 = (pagmo::hypervolume *)jarg1; 
  arg2 = (pagmo::vector_double *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pagmo::vector_double const & is null", 0);
    return 0;
  } 
  result = (unsigned long long)((pagmo::hypervolume const *)arg1)->greatest_contributor((pagmo::vector_double const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_delete_hypervolume(void * jarg1) {
  pagmo::hypervolume *arg1 = (pagmo::hypervolume *) 0 ;
  
  arg1 = (pagmo::hypervolume *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_reksum__SWIG_0(void * jarg1, void * jarg2, unsigned long jarg3, unsigned long jarg4, void * jarg5) {
  std::vector< std::vector< double > > *arg1 = 0 ;
  std::vector< pagmo::pop_size_t > *arg2 = 0 ;
  pagmo::pop_size_t arg3 ;
  pagmo::pop_size_t arg4 ;
  std::vector< double > arg5 ;
  std::vector< double > *argp5 ;
  
  arg1 = (std::vector< std::vector< double > > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::vector< double > > & is null", 0);
    return ;
  } 
  arg2 = (std::vector< pagmo::pop_size_t > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pagmo::pop_size_t > const & is null", 0);
    return ;
  } 
  arg3 = (pagmo::pop_size_t)jarg3; 
  arg4 = (pagmo::pop_size_t)jarg4; 
  argp5 = (std::vector< double > *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::vector< double >", 0);
    return ;
  }
  arg5 = *argp5; 
  pagmo::detail::reksum(*arg1,(std::vector< size_t > const &)*arg2,SWIG_STD_MOVE(arg3),SWIG_STD_MOVE(arg4),SWIG_STD_MOVE(arg5));
}


SWIGEXPORT void SWIGSTDCALL CSharp_pagmo_reksum__SWIG_1(void * jarg1, void * jarg2, unsigned long jarg3, unsigned long jarg4) {
  std::vector< std::vector< double > > *arg1 = 0 ;
  std::vector< pagmo::pop_size_t > *arg2 = 0 ;
  pagmo::pop_size_t arg3 ;
  pagmo::pop_size_t arg4 ;
  
  arg1 = (std::vector< std::vector< double > > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::vector< double > > & is null", 0);
    return ;
  } 
  arg2 = (std::vector< pagmo::pop_size_t > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pagmo::pop_size_t > const & is null", 0);
    return ;
  } 
  arg3 = (pagmo::pop_size_t)jarg3; 
  arg4 = (pagmo::pop_size_t)jarg4; 
  pagmo::detail::reksum(*arg1,(std::vector< size_t > const &)*arg2,SWIG_STD_MOVE(arg3),SWIG_STD_MOVE(arg4));
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pagmo_pareto_dominance(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  pagmo::vector_double *arg1 = 0 ;
  pagmo::vector_double *arg2 = 0 ;
  bool result;
  
  arg1 = (pagmo::vector_double *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pagmo::vector_double const & is null", 0);
    return 0;
  } 
  arg2 = (pagmo::vector_double *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pagmo::vector_double const & is null", 0);
    return 0;
  } 
  result = (bool)pagmo::pareto_dominance((std::vector< double > const &)*arg1,(std::vector< double > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_non_dominated_front_2d(void * jarg1) {
  void * jresult ;
  std::vector< pagmo::vector_double > *arg1 = 0 ;
  SwigValueWrapper< std::vector< size_t > > result;
  
  arg1 = (std::vector< pagmo::vector_double > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pagmo::vector_double > const & is null", 0);
    return 0;
  } 
  result = pagmo::non_dominated_front_2d((std::vector< std::vector< double > > const &)*arg1);
  jresult = new std::vector< pagmo::pop_size_t >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_fast_non_dominated_sorting(void * jarg1) {
  void * jresult ;
  std::vector< pagmo::vector_double > *arg1 = 0 ;
  pagmo::fnds_return_type result;
  
  arg1 = (std::vector< pagmo::vector_double > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pagmo::vector_double > const & is null", 0);
    return 0;
  } 
  result = pagmo::fast_non_dominated_sorting((std::vector< std::vector< double > > const &)*arg1);
  jresult = new pagmo::fnds_return_type(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_crowding_distance(void * jarg1) {
  void * jresult ;
  std::vector< pagmo::vector_double > *arg1 = 0 ;
  pagmo::vector_double result;
  
  arg1 = (std::vector< pagmo::vector_double > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pagmo::vector_double > const & is null", 0);
    return 0;
  } 
  result = pagmo::crowding_distance((std::vector< std::vector< double > > const &)*arg1);
  jresult = new pagmo::vector_double(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_sort_population_mo(void * jarg1) {
  void * jresult ;
  std::vector< pagmo::vector_double > *arg1 = 0 ;
  SwigValueWrapper< std::vector< size_t > > result;
  
  arg1 = (std::vector< pagmo::vector_double > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pagmo::vector_double > const & is null", 0);
    return 0;
  } 
  result = pagmo::sort_population_mo((std::vector< std::vector< double > > const &)*arg1);
  jresult = new std::vector< pagmo::pop_size_t >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_select_best_N_mo(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  std::vector< pagmo::vector_double > *arg1 = 0 ;
  pagmo::pop_size_t arg2 ;
  SwigValueWrapper< std::vector< size_t > > result;
  
  arg1 = (std::vector< pagmo::vector_double > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pagmo::vector_double > const & is null", 0);
    return 0;
  } 
  arg2 = (pagmo::pop_size_t)jarg2; 
  result = pagmo::select_best_N_mo((std::vector< std::vector< double > > const &)*arg1,SWIG_STD_MOVE(arg2));
  jresult = new std::vector< pagmo::pop_size_t >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_ideal(void * jarg1) {
  void * jresult ;
  std::vector< pagmo::vector_double > *arg1 = 0 ;
  pagmo::vector_double result;
  
  arg1 = (std::vector< pagmo::vector_double > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pagmo::vector_double > const & is null", 0);
    return 0;
  } 
  result = pagmo::ideal((std::vector< std::vector< double > > const &)*arg1);
  jresult = new pagmo::vector_double(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_nadir(void * jarg1) {
  void * jresult ;
  std::vector< pagmo::vector_double > *arg1 = 0 ;
  pagmo::vector_double result;
  
  arg1 = (std::vector< pagmo::vector_double > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pagmo::vector_double > const & is null", 0);
    return 0;
  } 
  result = pagmo::nadir((std::vector< std::vector< double > > const &)*arg1);
  jresult = new pagmo::vector_double(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pagmo_decompose_objectives(void * jarg1, void * jarg2, void * jarg3, const char * jarg4) {
  void * jresult ;
  pagmo::vector_double *arg1 = 0 ;
  pagmo::vector_double *arg2 = 0 ;
  pagmo::vector_double *arg3 = 0 ;
  std::string *arg4 = 0 ;
  pagmo::vector_double result;
  
  arg1 = (pagmo::vector_double *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pagmo::vector_double const & is null", 0);
    return 0;
  } 
  arg2 = (pagmo::vector_double *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pagmo::vector_double const & is null", 0);
    return 0;
  } 
  arg3 = (pagmo::vector_double *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pagmo::vector_double const & is null", 0);
    return 0;
  } 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  result = pagmo::decompose_objectives((std::vector< double > const &)*arg1,(std::vector< double > const &)*arg2,(std::vector< double > const &)*arg3,(std::string const &)*arg4);
  jresult = new pagmo::vector_double(result); 
  return jresult;
}


SWIGEXPORT pagmo::algorithm * SWIGSTDCALL CSharp_pagmo_bee_colony_SWIGUpcast(pagmo::bee_colony *jarg1) {
    return (pagmo::algorithm *)jarg1;
}

SWIGEXPORT pagmo::algorithm * SWIGSTDCALL CSharp_pagmo_cmaes_SWIGUpcast(pagmo::cmaes *jarg1) {
    return (pagmo::algorithm *)jarg1;
}

SWIGEXPORT pagmo::algorithm * SWIGSTDCALL CSharp_pagmo_compass_search_SWIGUpcast(pagmo::compass_search *jarg1) {
    return (pagmo::algorithm *)jarg1;
}

SWIGEXPORT pagmo::algorithm * SWIGSTDCALL CSharp_pagmo_de_SWIGUpcast(pagmo::de *jarg1) {
    return (pagmo::algorithm *)jarg1;
}

SWIGEXPORT pagmo::algorithm * SWIGSTDCALL CSharp_pagmo_de1220_SWIGUpcast(pagmo::de1220 *jarg1) {
    return (pagmo::algorithm *)jarg1;
}

SWIGEXPORT pagmo::algorithm * SWIGSTDCALL CSharp_pagmo_gaco_SWIGUpcast(pagmo::gaco *jarg1) {
    return (pagmo::algorithm *)jarg1;
}

SWIGEXPORT pagmo::algorithm * SWIGSTDCALL CSharp_pagmo_gwo_SWIGUpcast(pagmo::gwo *jarg1) {
    return (pagmo::algorithm *)jarg1;
}

SWIGEXPORT pagmo::algorithm * SWIGSTDCALL CSharp_pagmo_nlopt_SWIGUpcast(pagmo::nlopt *jarg1) {
    return (pagmo::algorithm *)jarg1;
}

SWIGEXPORT pagmo::algorithm * SWIGSTDCALL CSharp_pagmo_nspso_SWIGUpcast(pagmo::nspso *jarg1) {
    return (pagmo::algorithm *)jarg1;
}

SWIGEXPORT pagmo::algorithm * SWIGSTDCALL CSharp_pagmo_pso_SWIGUpcast(pagmo::pso *jarg1) {
    return (pagmo::algorithm *)jarg1;
}

SWIGEXPORT pagmo::algorithm * SWIGSTDCALL CSharp_pagmo_pso_gen_SWIGUpcast(pagmo::pso_gen *jarg1) {
    return (pagmo::algorithm *)jarg1;
}

SWIGEXPORT pagmo::algorithm * SWIGSTDCALL CSharp_pagmo_sea_SWIGUpcast(pagmo::sea *jarg1) {
    return (pagmo::algorithm *)jarg1;
}

SWIGEXPORT pagmo::algorithm * SWIGSTDCALL CSharp_pagmo_simulated_annealing_SWIGUpcast(pagmo::simulated_annealing *jarg1) {
    return (pagmo::algorithm *)jarg1;
}

SWIGEXPORT pagmo::algorithm * SWIGSTDCALL CSharp_pagmo_sade_SWIGUpcast(pagmo::sade *jarg1) {
    return (pagmo::algorithm *)jarg1;
}

SWIGEXPORT pagmo::algorithm * SWIGSTDCALL CSharp_pagmo_sga_SWIGUpcast(pagmo::sga *jarg1) {
    return (pagmo::algorithm *)jarg1;
}

SWIGEXPORT pagmo::algorithm * SWIGSTDCALL CSharp_pagmo_xnes_SWIGUpcast(pagmo::xnes *jarg1) {
    return (pagmo::algorithm *)jarg1;
}

SWIGEXPORT pagmo::bfe * SWIGSTDCALL CSharp_pagmo_default_bfe_SWIGUpcast(pagmo::default_bfe *jarg1) {
    return (pagmo::bfe *)jarg1;
}

SWIGEXPORT pagmo::bfe * SWIGSTDCALL CSharp_pagmo_member_bfe_SWIGUpcast(pagmo::member_bfe *jarg1) {
    return (pagmo::bfe *)jarg1;
}

SWIGEXPORT pagmo::bfe * SWIGSTDCALL CSharp_pagmo_thread_bfe_SWIGUpcast(pagmo::thread_bfe *jarg1) {
    return (pagmo::bfe *)jarg1;
}

SWIGEXPORT pagmo::island * SWIGSTDCALL CSharp_pagmo_thread_island_SWIGUpcast(pagmo::thread_island *jarg1) {
    return (pagmo::island *)jarg1;
}

#ifdef __cplusplus
}
#endif

